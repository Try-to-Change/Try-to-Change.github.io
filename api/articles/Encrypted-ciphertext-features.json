{"title":"加密密文特征","uid":"925fed3a18c07a3de0254ce9178a9827","slug":"Encrypted-ciphertext-features","date":"2022-07-21T09:45:54.374Z","updated":"2023-08-06T07:35:24.468Z","comments":true,"path":"api/articles/Encrypted-ciphertext-features.json","keywords":null,"cover":"/img/6.jpg","content":"<p><a href=\"https://blog.51cto.com/u_15274949/2931589\">原文链接</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"1、MD5——示例\"><a href=\"#1、MD5——示例\" class=\"headerlink\" title=\"1、MD5——示例\"></a>1、MD5——示例</h2><p><u><strong>21232F297A57A5A743894A0E4A801FC3</strong></u></p>\n<p>一般MD5值是<u>32位</u>由数字<code>0-9</code>和字母<code>a-f</code>所组成的字符串，如图。<u>如果出现这个范围以外的字符说明这可能是个错误的md5值</u>，就没必要再拿去解密了。16位值是取的是8~24位。</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721175149372.png\" alt=\"image-20220721175149372\"></p>\n<p>md5的三个特征：</p>\n<p>1.<strong>确定性</strong>：一个原始数据的MD5值是唯一的，同一个原始数据不可能会计算出多个不同的MD5值。</p>\n<p>2.<strong>碰撞性</strong>：<u>原始数据与其MD5值并不是一一对应的</u>，有可能多个原始数据计算出来的MD5值是一样的，这就是碰撞。</p>\n<p>3.<strong>不可逆</strong>：也就是说如果告诉你一个MD5值，你是无法通过它还原出它的原始数据的，这不是你的技术不够牛，这是由它的算法所决定的。因为根据第2点，<u>一个给定的MD5值是可能对应多个原始数据的</u>，并且理论上讲是可以对应无限多个原始数据，所有无法确定到底是由哪个原始数据产生的。</p>\n<h2 id=\"2、sha1——示例\"><a href=\"#2、sha1——示例\" class=\"headerlink\" title=\"2、sha1——示例\"></a>2、sha1——示例</h2><p><u><strong>d033e22ae348aeb5660fc2140aec35850c4da997</strong></u></p>\n<p>这种加密的密文特征跟MD5差不多，只不过<u>位数是40</u></p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721175316568.png\" alt=\"image-20220721175316568\"></p>\n<h2 id=\"3、HMAC算法——示例\"><a href=\"#3、HMAC算法——示例\" class=\"headerlink\" title=\"3、HMAC算法——示例\"></a>3、HMAC算法——示例</h2><p><u><strong>5b696ae7da9442ead7adc24d03cedb65</strong></u></p>\n<p>HMAC (Hash-based Message Authentication Code) 常用于接口签名验证，这种算法就是在前两种加密的基础上引入了秘钥，而秘钥又只有传输双方才知道，所以基本上是破解不了的</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721175340163.png\" alt=\"image-20220721175340163\"></p>\n<h2 id=\"4、NTLM——示例\"><a href=\"#4、NTLM——示例\" class=\"headerlink\" title=\"4、NTLM——示例\"></a>4、NTLM——示例</h2><p><u><strong>209c6174da490caeb422f3fa5a7ae634</strong></u></p>\n<p>这种加密是Windows的哈希密码，是 Windows NT 早期版本的标准安全协议。与它相同的还有Domain Cached Credentials（域哈希）。</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721175431939.png\" alt=\"image-20220721175431939\"></p>\n<h2 id=\"相似加密类型\"><a href=\"#相似加密类型\" class=\"headerlink\" title=\"相似加密类型\"></a>相似加密类型</h2><pre><code>\n#    算法       长度\n\n1 \tmd5 \t 32/16\n2 \tsha1 \t    40\n3 \tsha256 \t    64\n4 \tsha512 \t   128\n5 \tadler32 \t 8\n6 \tcrc32 \t     8\n7 \tcrc32b       8\n8 \tfnv132 \t     8\n9 \tfnv164 \t    16\n10 \tfnv1a32 \t 8\n11 \tfnv1a64     16\n12 \tgost \t    64\n13 \tgost-crypto 64\n14 \thaval128,3 \t32\n15 \thaval128,4 \t32\n16 \thaval128,5 \t32\n17 \thaval160,3 \t40\n18 \thaval160,4 \t40\n19 \thaval160,5 \t40\n20 \thaval192,3 \t48\n21 \thaval192,4 \t48\n22 \thaval192,5 \t48\n23 \thaval224,3 \t56\n24 \thaval224,4 \t56\n25 \thaval224,5 \t56\n26 \thaval256,3 \t64\n27 \thaval256,4 \t64\n28 \thaval256,5 \t64\n29 \tjoaat \t     8\n30 \tmd2          32\n31 \tmd4 \t     32\n32 \tripemd128 \t 32\n33 \tripemd160 \t 40\n34 \tripemd256 \t 64\n35 \tripemd320 \t 80\n36 \tsha224 \t     56\n37 \tsha3-224 \t 56\n38 \tsha3-256 \t 64\n39 \tsha3-384 \t 96\n40 \tsha3-512 \t 128\n41 \tsha384       96\n42 \tsha512/224   56\n43 \tsha512/256 \t 64\n44 \tsnefru       64\n45 \tsnefru256    64\n46 \ttiger128,3 \t 32\n47 \ttiger128,4 \t 32\n48 \ttiger160,3   40\n49 \ttiger160,4   40\n50 \ttiger192,3 \t 48\n51 \ttiger192,4   48\n52 \twhirlpool \t 128\n53 \tmysql \t     老MYSQL数据库用的，16位，且第1位和第7位必须为0-8\n54 \tmysql5 \t     40\n55 \tNTLM \t     32\n56 \tDomain Cached Credentials \t32\n</code></pre>\n<h2 id=\"常用解密网站：\"><a href=\"#常用解密网站：\" class=\"headerlink\" title=\"常用解密网站：\"></a>常用解密网站：</h2><p><code>www.cmd5.com（带批量解密工具）</code></p>\n<p><code>www.somd5.com</code></p>\n<p><code>cmd5.la</code></p>\n<p><code>pmd5.com</code></p>\n<p><code>www.ttmd5.com（带批量解密工具）</code></p>\n<hr>\n<p><u>Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型</u></p>\n<h2 id=\"1、Base64——示例\"><a href=\"#1、Base64——示例\" class=\"headerlink\" title=\"1、Base64——示例\"></a>1、Base64——示例</h2><p><u><strong>YWRtaW4tcm9vdA&#x3D;&#x3D;</strong></u></p>\n<p>一般情况下密文尾部都会有两个等号，明文很少的时候则没有</p>\n<p>Base64编码要求把3个8位字节（38&#x3D;24）转化为4个6位的字节（46&#x3D;24），之后在6位的前面补两个0，形成8位一个字节的形式。如果剩下的字符不足3个字节，则用0填充，输出字符使用‘&#x3D;’，因此编码后输出的文本末尾可能会出现1或2个‘&#x3D;’，如图。</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721180138424.png\" alt=\"image-20220721180138424\"></p>\n<p>为了保证所输出的编码位可读字符，Base64制定了一个编码表，以便进行统一转换。编码表的大小为2^6&#x3D;64，这也是Base64名称的由来。</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721180249541.png\" alt=\"image-20220721180249541\"></p>\n<h3 id=\"Base64使用注意问题\"><a href=\"#Base64使用注意问题\" class=\"headerlink\" title=\"Base64使用注意问题\"></a>Base64使用注意问题</h3><h4 id=\"一、Base64和URL传参问题\"><a href=\"#一、Base64和URL传参问题\" class=\"headerlink\" title=\"一、Base64和URL传参问题\"></a>一、Base64和URL传参问题</h4><p>标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的“&#x2F;”和“+”字符变为形如“%XX”的形式，而这些“%”号在存入数据库时还需要再进行转换，因为ANSI SQL中已将“%”号用作通配符。</p>\n<p>为解决此问题，可采用一种用于URL的改进Base64编码，它在末尾填充’&#x3D;’号，并将标准Base64中的“+”和“&#x2F;”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</p>\n<h4 id=\"二、Base64和URL传参问题改善\"><a href=\"#二、Base64和URL传参问题改善\" class=\"headerlink\" title=\"二、Base64和URL传参问题改善\"></a>二、Base64和URL传参问题改善</h4><p>另有一种用于正则表达式的改进Base64变种，它将“+”和“&#x2F;”改成了“!”和“-”，因为“+”,“*”以及前面在IRCu中用到的“[”和“]”在正则表达式中都可能具有特殊含义。</p>\n<p>此外还有一些变种，它们将“+&#x2F;”改为“-”或“.”（用作编程语言中的标识符名称）或“.-”（用于XML中的Nmtoken）甚至“_:”（用于XML中的Name）。</p>\n<h4 id=\"三、Base64转换后比原有的字符串长1-3\"><a href=\"#三、Base64转换后比原有的字符串长1-3\" class=\"headerlink\" title=\"三、Base64转换后比原有的字符串长1&#x2F;3\"></a>三、Base64转换后比原有的字符串长1&#x2F;3</h4><p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（38 &#x3D; 46 &#x3D; 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1&#x2F;3。<br>四、Base64转换总结</p>\n<p>Base64转换，最好是不要用在加密上，尤其是参数加密，很容易出问题。</p>\n<h2 id=\"2、Base58——示例\"><a href=\"#2、Base58——示例\" class=\"headerlink\" title=\"2、Base58——示例\"></a>2、Base58——示例</h2><p><u><strong>6tmHCZvhgfNjQu</strong></u></p>\n<p>它最大的特点是没有等号</p>\n<p>Base58是用于比特币（Bitcoin）中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址。</p>\n<p>相比Base64，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+“和”&#x2F;“符号。</p>\n<p>比特币的Base58字母表：</p>\n<p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p>\n<p>简单的说：Base58一种编码方式，跟十进制，十六进制一样，不过更短更省空间。</p>\n<p>Base58的原理是什么？</p>\n<p>二进制：0和1</p>\n<p>十进制：1到10</p>\n<p>十六进制：十进制的基础上加上了A-F 六个字母</p>\n<p>Base58可以理解为一种58进制。</p>\n<p>Base58包含了阿拉伯数字、小写英文字母，大写英文字母。</p>\n<p>但是去掉了一些容易混淆的数字和字母：0（数字0）、O（o的大写字母）、l（ L的小写字母）、I（i的大写字母）</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721180316955.png\" alt=\"image-20220721180316955\"></p>\n<h2 id=\"3、Base32——示例\"><a href=\"#3、Base32——示例\" class=\"headerlink\" title=\"3、Base32——示例\"></a>3、Base32——示例</h2><p><u><strong>GEZDGNBVGY3TQOJQGE&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong></u></p>\n<p><u>他的特点是明文超过十个后面就会有很多等号</u></p>\n<p>Base32使用了ASCII编码中可打印的<u>32个字符</u>(<strong>大写</strong>字母A-Z和数字2-7)对任意字节数据进行编码.Base32将串起来的二进制数据按照5个二进制位分为一组，由于传输数据的单位是字节(即8个二进制位).所以分割之前的二进制位数是40的倍数(40是5和8的最小公倍数).如果不足40位，则在编码后数据补充”&#x3D;”，一个”&#x3D;”相当于一个组(5个二进制位)，编码后的数据是原先的8&#x2F;5倍.</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721180354078.png\" alt=\"image-20220721180354078\"></p>\n<p>Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721180407579.png\" alt=\"image-20220721180407579\"></p>\n<p>由于数据的二进制传输是按照8比特一组进行（即一个字节），因此Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数）。例如输入单字节字符“%”，它对应的二进制值是“100101”，前面补两个0变成“00100101”（二进制值不足8比特的都要在高位加0直到8比特），从左侧开始按照5比特切分成两组：“00100”和“101”，后一组不足5比特，则在末尾填充0直到5比特，变成“00100”和“10100”，这两组二进制数分别转换成十进制数，通过上述表格即可找到其对应的可打印字符“E”和“U”，但是这里只用到两组共10比特，还差30比特达到40比特，按照5比特一组还需6组，则在末尾填充6个“&#x3D;”。填充“&#x3D;”符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉“&#x3D;”符号。</p>\n<p><u>与Base64相比，Base32具有许多优点：</u></p>\n<p>1.适合不区分大小写的文件系统，更利于人类口语交流或记忆。</p>\n<p>2.结果可以用作文件名，因为它不包含路径分隔符 “&#x2F;”等符号。</p>\n<p>3.排除了视觉上容易混淆的字符，因此可以准确的人工录入。（例如，RFC4648符号集忽略了数字“1”、“8”和“0”，因为它们可能与字母“I”，“B”和“O”混淆）。</p>\n<p>4.排除填充符号“&#x3D;”的结果可以包含在URL中，而不编码任何字符。</p>\n<p><u>Base32也比Base16有优势：</u></p>\n<p><strong>·</strong>Base32比Base16占用的空间更小。（1000比特数据Base32需要200个字符，而Base16则为250个字符）</p>\n<p><u>Base32的缺点：</u></p>\n<p><strong>·</strong>Base32比Base64多占用大约20％的空间。因为Base32使用8个ASCII字符去编码原数据中的5个字节数据，而Base64是使用4个ASCII字符去编码原数据中的3个字节数据。</p>\n<h2 id=\"4、Base16——示例\"><a href=\"#4、Base16——示例\" class=\"headerlink\" title=\"4、Base16——示例\"></a>4、Base16——示例</h2><p><u><strong>61646D696E</strong></u></p>\n<p>它的特点是<u>没有等号</u>并且<u>数字要多于字母</u></p>\n<p>Base16编码的方式：</p>\n<p>1.将数据(根据ASCII编码，UTF-8编码等)转成对应的二进制数，不足8比特位高位补0。然后将所有的二进制全部串起来，4个二进制位为一组，转化成对应十进制数。</p>\n<p>2.根据十进制数值找到Base16编码表里面对应的字符。Base16是4个比特位表示一个字符，所以原始是1个字节(8个比特位)刚好可以分成两组,也就是说原先如果使用ASCII编码后的一个字符，现在转化成两个字符。数据量是原先的2倍。</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721193743306.png\" alt=\"image-20220721193743306\"></p>\n<p>Base16编码是一个标准的十六进制字符串（注意是字符串而不是数值），更易被人类和计算机使用，因为它并不包含任何控制字符，以及Base64和Base32中的“&#x3D;”符号。</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721193802684.png\" alt=\"image-20220721193802684\"></p>\n<h2 id=\"5、Base85——示例\"><a href=\"#5、Base85——示例\" class=\"headerlink\" title=\"5、Base85——示例\"></a>5、Base85——示例</h2><p><u><strong>@:X4hDWe0rkE(G[OdP4CT]N#</strong></u></p>\n<p>特点是<u>奇怪的字符比较多</u>，但是很难出现等号</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721193845924.png\" alt=\"image-20220721193845924\"></p>\n<h2 id=\"6、Base100——示例\"><a href=\"#6、Base100——示例\" class=\"headerlink\" title=\"6、Base100——示例\"></a>6、Base100——示例</h2><p><u><strong>????????????????????</strong></u></p>\n<p>特点就是一堆Emoji表情</p>\n<p>Base100编码&#x2F;解码工具（又名：Emoji表情符号编码&#x2F;解码），可将文本内容编码为Emoji表情符号；同时也可以将编码后的Emoji表情符号内容解码为文本。</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721193925524.png\" alt=\"image-20220721193925524\"></p>\n<h2 id=\"常用解密网站：-1\"><a href=\"#常用解密网站：-1\" class=\"headerlink\" title=\"常用解密网站：\"></a>常用解密网站：</h2><p>Base64：</p>\n<p><code>tool.oschina.net</code></p>\n<p><code>www.sojson.com</code></p>\n<p><code>base64.us</code></p>\n<p>Base58：</p>\n<p><code>www.metools.info</code></p>\n<p>Base32、16：</p>\n<p><code>www.qqxiuzi.cn</code></p>\n<p>Base100：</p>\n<p><code>www.atoolbox.net</code></p>\n<hr>\n<h2 id=\"1、Unicode——汉字示例\"><a href=\"#1、Unicode——汉字示例\" class=\"headerlink\" title=\"1、Unicode——汉字示例\"></a>1、Unicode——汉字示例</h2><pre><code>汉字示例&amp;#36825（这）;、字母示例&amp;#116（t）;、数字符号示例&amp;#53（5）;\n</code></pre>\n<p>可以说Unicode与HTML实体编码是一个东西</p>\n<p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。1990年开始研发，1994年正式公布。</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721194526725.png\" alt=\"image-20220721194526725\"></p>\n<h2 id=\"2、HTML实体编码——示例与Unicode相同\"><a href=\"#2、HTML实体编码——示例与Unicode相同\" class=\"headerlink\" title=\"2、HTML实体编码——示例与Unicode相同\"></a>2、HTML实体编码——示例与Unicode相同</h2><p>字符实体是用一个编号写入HTML代码中来代替一个字符，在使用浏览器访问网页时会将这个编号解析还原为字符以供阅读。</p>\n<p>这么做的目的主要有两个：<br>１、解决HTML代码编写中的一些问题。例如需要在网页上显示小于号（&lt;）和大于号（&gt;），由于它们是HTML的预留标签，可能会被误解析。这时就需要将小于号和大于号写成字符实体：<br>小于号这样写：&lt; 或 &lt;<br>大于号这样写：&gt; 或 &gt;<br>前面的写法称为实体名称，后面的写法则是实体编号。ISO-8859-1字符集（西欧语言）中两百多个字符设定了实体名称，而对于其它所有字符都可以用实体编号来代替。<br>２、网页编码采用了特定语言的编码，却需要显示来自其它语言的字符。例如，网页编码采用了西欧语言ISO-8859-1，却要在网页中显示中文，这时必须将中文字符以实体形式写入HTML代码中。</p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721194551860.png\" alt=\"image-20220721194551860\"></p>\n<h2 id=\"3、16进制Unicode——示例\"><a href=\"#3、16进制Unicode——示例\" class=\"headerlink\" title=\"3、16进制Unicode——示例\"></a>3、16进制Unicode——示例</h2><p><u><strong>\\u8fd9\\u662f\\u4e00</strong></u></p>\n<p><img src=\"/post/Encrypted-ciphertext-features/image-20220721194631625.png\" alt=\"image-20220721194631625\"></p>\n<p>常用解密网站：</p>\n<p>  <strong>·</strong>Unicode：</p>\n<p><code>www.sojson.com</code></p>\n<p>  <strong>·</strong>16进制Unicode：</p>\n<p><code>www.msxindl.com</code></p>\n<p> <strong>·</strong>HTML字符实体：</p>\n<p><code>www.qqxiuzi.cn</code></p>\n<p>….还有一些引入密钥的非对称型算法，可以看看原文</p>\n","text":"原文链接 1、MD5——示例21232F297A57A5A743894A0E4A801FC3 一般MD5值是32位由数字0-9和字母a-f所组成的字符串，如图。...","permalink":"/post/Encrypted-ciphertext-features","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"crypto&misc","slug":"crypto-misc","count":2,"path":"api/tags/crypto-misc.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81MD5%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">1、MD5——示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81sha1%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">2、sha1——示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81HMAC%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3、HMAC算法——示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81NTLM%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">4、NTLM——示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E4%BC%BC%E5%8A%A0%E5%AF%86%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">相似加密类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E8%A7%A3%E5%AF%86%E7%BD%91%E7%AB%99%EF%BC%9A\"><span class=\"toc-text\">常用解密网站：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81Base64%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">1、Base64——示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Base64%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Base64使用注意问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81Base64%E5%92%8CURL%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">一、Base64和URL传参问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Base64%E5%92%8CURL%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98%E6%94%B9%E5%96%84\"><span class=\"toc-text\">二、Base64和URL传参问题改善</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Base64%E8%BD%AC%E6%8D%A2%E5%90%8E%E6%AF%94%E5%8E%9F%E6%9C%89%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF1-3\"><span class=\"toc-text\">三、Base64转换后比原有的字符串长1&#x2F;3</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81Base58%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">2、Base58——示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81Base32%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3、Base32——示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81Base16%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">4、Base16——示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81Base85%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">5、Base85——示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81Base100%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">6、Base100——示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E8%A7%A3%E5%AF%86%E7%BD%91%E7%AB%99%EF%BC%9A-1\"><span class=\"toc-text\">常用解密网站：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81Unicode%E2%80%94%E2%80%94%E6%B1%89%E5%AD%97%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">1、Unicode——汉字示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81HTML%E5%AE%9E%E4%BD%93%E7%BC%96%E7%A0%81%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B%E4%B8%8EUnicode%E7%9B%B8%E5%90%8C\"><span class=\"toc-text\">2、HTML实体编码——示例与Unicode相同</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%8116%E8%BF%9B%E5%88%B6Unicode%E2%80%94%E2%80%94%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3、16进制Unicode——示例</span></a></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"CTFHub-wp","uid":"d58b830525b9df5a19c1d8f3036b3b91","slug":"wp-CTFHub","date":"2022-07-27T09:31:30.845Z","updated":"2023-09-02T08:37:24.572Z","comments":true,"path":"api/articles/wp-CTFHub.json","keywords":null,"cover":"/img/33.jpg","text":"做做笔记 WEB1.密码口令1）弱口令一般思维， 用户名：admin，root 密码：password，admin123，123456 可以用top100字典（...","permalink":"/post/wp-CTFHub","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"靶场","slug":"靶场","count":5,"path":"api/tags/靶场.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"代码审计知识点记录","uid":"0fbb4ce471f03133d4bc00eb32aefb3b","slug":"Code-audit","date":"2022-06-26T14:34:42.604Z","updated":"2023-08-06T07:35:05.550Z","comments":true,"path":"api/articles/Code-audit.json","keywords":null,"cover":"/img/3.jpg","text":"代码审计学习的一些笔记 代码审计-常见php威胁函数（上） 文章来自成都知道创宇 1.常见php回调函数，可调用其他命令&#x2F;代码执行函数call_use...","permalink":"/post/Code-audit","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"代码审计","slug":"代码审计","count":1,"path":"api/tags/代码审计.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}