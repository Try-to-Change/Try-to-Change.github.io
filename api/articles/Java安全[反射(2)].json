{"title":"Java安全[反射(2)]","uid":"d574ea4f3aa1b406fd1d29f7afa502ba","slug":"Java安全[反射(2)]","date":"2023-08-23T01:46:39.171Z","updated":"2023-10-19T14:51:52.289Z","comments":true,"path":"api/articles/Java安全[反射(2)].json","keywords":null,"cover":"/img/50.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如何利用Runtime构造payload</p></blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"Java安全-反射-2\"><a href=\"#Java安全-反射-2\" class=\"headerlink\" title=\"Java安全[反射(2)]\"></a>Java安全[反射(2)]</h1><p>第一篇讲到过，如果想要加载一个类，可以同<code>forName</code>进行加载，但是正常情况下我们一般用到的是<code>import</code>，所以<code>forName</code>就可以帮助攻击者加载任意类。</p>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><p>对于<code>$</code>，在很多源码里看到，类名包含<code>$</code>符号，比如在<code>fastjion</code>在<code>checkAutoType</code>时候就会先将 <code>$</code>替换为<code>.</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://github.com/alibaba/fastjson/blob/fcc9c2a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java#L1038\">https://github.com/alibaba/fastjson/blob/fcc9c2a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java#L1038</a></p></blockquote>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907120021390.png\" alt=\"image-20230907120021390\"></p>\n<p>可以看到类名的<code>$</code>被替换为<code>.</code>来解析，所以<code>$</code>起的作用实际就是查找内部类。</p>\n<p>写个例子，在一个普通类<code>My</code>中，写一个内部类<code>Your</code>，然后编译看看<code>output</code>文件夹会生成什么</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> reflect2<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InsideClass</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">My</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Your</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907122251594.png\" alt=\"image-20230907122251594\"></p>\n<p>可以看到，<code>Your</code>类对应生成了一个<code>My$Your.class</code>，<code>My</code>类对应生成了一个<code>My.class</code>。</p>\n<p>我们还可以试试加载这两个，看看是否有区别</p>\n<pre class=\" language-JAVA\"><code class=\"language-JAVA\">package reflect2;\n\npublic class InsideClass {;\n    public static void main(String[] args) throws Exception {;\n        Class<?> c1 = Class.forName(\"reflect2.My$Your\");\n        System.out.println(c1.getName());\n    };\n};\nclass My{;\n    static {;\n        System.out.println(\"My类被加载\");\n    };\n    class Your{;\n        static {;\n            System.out.println(\"Your类被加载\");\n        };\n    };\n};\n</code></pre>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907124919435.png\" alt=\"image-20230907124919435\"></p>\n<p>发现初始化内部类时，外部类并没有被初始化，所以在一定程度上可以将它们当作两个无关类。</p>\n<p>根据上面所说，Java会将<code>$</code>当作 <code>.</code> ，那如果直接把<code>$</code>换成 <code>.</code> 的话会怎么样</p>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907130041368.png\" alt=\"image-20230907130041368\"></p>\n<p>发现运行报错，原因是Java编译器有自己的规则，<code>$</code>在它的规则中是外部类和内部类的分隔符，但是如果用 <code>.</code>来分割外部类和内部类就会让其分不清意图，从而报错，虽然其内部会将其当作 <code>.</code> ，但是前提还是<code>$</code>被当作内外部类分割符后处理。</p>\n<h2 id=\"getRuntime\"><a href=\"#getRuntime\" class=\"headerlink\" title=\"getRuntime\"></a>getRuntime</h2><p><code>class.newInstrance()</code> 作用是调用这个类中的无参构造函数，但是经常直接在<code>payload</code>中调用<code>newIntstrance</code>时往往会报错，主要有两个原因</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>目标类没有无参构造函数</li>\n<li>目标类的构造函数是私有的</li>\n</ol></blockquote>\n<p>最常遇到的情况下是，调用<code>java.lang.Runtime</code>，</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> reflect2<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>InvocationTargetException<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Instrance</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> Exception <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> cls <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cls<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span>String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"calc.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>发现报错中提示<code>java.lang.Runtime</code>是一个私有的类，是无法直接调用其中的方法</p>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907161320123.png\" alt=\"image-20230907161320123\"></p>\n<p>继续跟进这个类的内容，</p>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907161807768.png\" alt=\"image-20230907161807768\"></p>\n<p><code>Runtime</code>确实为了安全考虑，将其的构造函数设置为私有，为了不让任何其他人实例化这个类，这里的话就无法通过<code>newInstrance</code>直接进行实例化<code>Runtime</code>，也就无法执行<code>exec</code>函数。</p>\n<p>那这里就会有个问题，如果有类的构造函数是私有，那不是代表当用户想要使用这个类时，无法进行实例化，就无法使用，而正常业务中为什么会出现这种情况呢？</p>\n<p>其实，这种情况叫做<code>“单例模式”</code>，是一种很常见的业务模式。</p>\n<p>比如，网站的数据库连接，当连接成功后，就不需要每用一次就建立一次网站数据库连接，这样就会建立多个数据库连接，造成资源浪费。这样开发者在编写代码时就会将构造函数写出私有，并通过<code>静态方法</code>来获取这个函数。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在第一篇中提到过，初始化时，静态方法和静态变量<code>只加载一次</code>，而创建类对象时，构造函数则会每构造一个类对象就执行一次。</p></blockquote>\n<p>写个代码举个例子，</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> reflect2<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrivateInstance</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n         Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> cls <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reflect2.TrainDB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TrainDB</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> TrainDB instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TrainDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> TrainDB <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">TrainDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样只有在初始化时才会执行一次静态变量，实例化<code>TrainDB</code>类，并执行构造函数，而后只能通过调用<code>getInstance()</code> ，才可以获得其实例，但是不会执行构造函数，这样也避免了多次建立实例。</p>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907172109455.png\" alt=\"image-20230907172109455\"></p>\n<h2 id=\"paload构造\"><a href=\"#paload构造\" class=\"headerlink\" title=\"paload构造\"></a>paload构造</h2><p>回归正题，<code>Runtime</code>也是一样的，它也是单例模式，只能通过<code>Runtime.getRuntime()</code>获取<code>Runtime</code>的实例</p>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907173650476.png\" alt=\"image-20230907173650476\"></p>\n<p>那么要构造<code>payload</code>就需要改一下，就不能用<code>newIntstrance</code>进行对<code>Runtime</code>的实例化，只有通过<code>Runtime.getRuntime</code>这个设定的静态方法获取<code>Runtime</code>的实例化后的对象。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> reflect2<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>InvocationTargetException<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InstanceRuntime</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        Class <span class=\"token class-name\">clazz</span> <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span>String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"calc.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在这里，</p>\n<pre class=\" language-java\"><code class=\"language-java\">Class <span class=\"token class-name\">clazz</span> <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span>String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"calc.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>发现用了<code>getMethod</code>方法和<code>invoke</code>方法，</p>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230909110419443.png\" alt=\"image-20230909110419443\"></p>\n<h2 id=\"getMethod\"><a href=\"#getMethod\" class=\"headerlink\" title=\"getMethod\"></a>getMethod</h2><p><code>getMethod</code>的作用就算通过反射获得一个类的某个特定的公有方法。其需要两个参数，第一个是方法名，第二个是方法所需参数的类型  [ 比如，字符串就算<code>String.class</code>] 。</p>\n<p>但是在Java中支持类的重载，也就是可能存在多个<code>相同的名字</code>的但是参数列表或者类型不同的方法，所以只知道名字并不能直接确认函数。</p>\n<p>所以在这里想调用<code>exec</code>方法时，就需要看看在<code>Runtime</code>中其重载列表，看看目标方法中所需的参数类型及其列表。</p>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230909105451350.png\" alt=\"image-20230909105451350\"></p>\n<p>这里可以用第四个重载类型，只要一个字符串，最简单。而前三个要字符串数组，也就是一个命令加上参数之类的。</p>\n<p>所以就得到了通过以下代码获取<code>Runtime.exec</code>方法</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span>String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>getMethod</code>获得这个方法后，就需要执行这个方法，比如传入参数等等。</p>\n<h2 id=\"invoke\"><a href=\"#invoke\" class=\"headerlink\" title=\"invoke\"></a>invoke</h2><p><code>invoke</code>的作用就是执行方法，它的第一个参数是：</p>\n<ul>\n<li><p>如果这个方法是一个普通的方法，那么第一个参数就是类对象</p>\n</li>\n<li><p>如果这个方法是一个静态的方法，那么第一个参数是类</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原因是普通方法需要类实例化后得到类对象，才可以调用该普通方法，所以需要传入类对象。</p>\n<p>而静态方法不用实例化类，就可以直接调用，所以传入类名即可。</p></blockquote>\n</li>\n</ul>\n<p>其实转化一下就更加清楚了，</p>\n<p>正常调用一个方法是 <code>[1].method([2], [3], [4]...)</code> ，而在反射里就是 <code>method.invoke([1], [2], [3], [4]...)</code> 。其中<code>[1]</code>是类或者类对象，而后<code>[...]</code>就是传入方法的参数。</p>\n<h2 id=\"paload分析\"><a href=\"#paload分析\" class=\"headerlink\" title=\"paload分析\"></a>paload分析</h2><p>按上述的，分解一下<code>payload</code>，</p>\n<p>这里先初始化<code>Runtime</code>类，</p>\n<p>然后获取<code>Runtime</code>的<code>exec</code>方法，</p>\n<p>然后再获取<code>Runtime</code>的<code>getRuntime</code>方法，</p>\n<p>然后执行<code>getRuntime</code>获取<code>Runtime</code>的实例化对象，这里<code>invoke</code>传入任何都可以，因为这里<code>getRuntime</code>方法是无参方法，所以不需要参数也行。</p>\n<p>最后调用，<code>exec</code>方法，<code>invoke</code>第一个传入<code>Runtime</code>的实例化对象，第二传入执行的命令<code>calc</code>。</p>\n<pre class=\" language-java\"><code class=\"language-java\">Class <span class=\"token class-name\">clazz</span> <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMethod execMethod <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMethod getRuntimeMethod <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject runtime <span class=\"token operator\">=</span> getRuntimeMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Method<span class=\"token punctuation\">)</span> execMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">,</span> <span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"/post/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230909113747032.png\" alt=\"image-20230909113747032\"></p>\n<p>最后两个疑问，</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类呢？</li>\n<li>如果一个方法或构造方法是私有方法，我们是否能执行它呢？</li>\n</ul></blockquote>\n","text":" 如何利用Runtime构造payload Java安全[反射(2)]第一篇讲到过，如果想要加载一个类，可以同forName进行加载，但是正常情况下我们一般用到...","permalink":"/post/Java安全[反射(2)]","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"Java漫谈学习","slug":"Java漫谈学习","count":6,"path":"api/categories/Java漫谈学习.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%B0%84-2\"><span class=\"toc-text\">Java安全[反射(2)]</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E7%B1%BB\"><span class=\"toc-text\">内部类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#getRuntime\"><span class=\"toc-text\">getRuntime</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#paload%E6%9E%84%E9%80%A0\"><span class=\"toc-text\">paload构造</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#getMethod\"><span class=\"toc-text\">getMethod</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#invoke\"><span class=\"toc-text\">invoke</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#paload%E5%88%86%E6%9E%90\"><span class=\"toc-text\">paload分析</span></a></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"nodejs(原型链污染)浅入","uid":"e19214c909dc9beefabf464664f17048","slug":"nodejs(原型链污染)浅入","date":"2023-08-25T02:16:13.700Z","updated":"2023-09-06T12:29:34.181Z","comments":true,"path":"api/articles/nodejs(原型链污染)浅入.json","keywords":null,"cover":"/img/53.jpg","text":"狠狠污染链，狠狠的继承类 原型与原型链 想要原型链污染，先要了解什么是原型与原型链 Javascript中一切皆是对象，其中对象之间是存在共同和差异的，比如对象...","permalink":"/post/nodejs(原型链污染)浅入","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"js","slug":"js","count":3,"path":"api/tags/js.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"2023(星)CTF","uid":"4b46cdd516927b937a38437aec23a08d","slug":"2023(星)CTF","date":"2023-07-30T12:49:04.825Z","updated":"2023-09-05T01:13:48.493Z","comments":true,"path":"api/articles/2023(星)CTF.json","keywords":null,"cover":"/img/43.jpg","text":"咋只有一道web，全是ai题 jwt2struts看题目猜测考点是jwt伪造+s2漏洞 进入网站，发现是需要admin身份，也确实是jwt伪造 解析jwt用JS...","permalink":"/post/2023(星)CTF","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}