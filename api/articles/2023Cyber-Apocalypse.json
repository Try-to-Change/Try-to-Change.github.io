{"title":"Cyber Apocalypse 2023 wp","uid":"c877094afea6970d987e778fa3ed5361","slug":"2023Cyber-Apocalypse","date":"2023-03-25T06:57:02.412Z","updated":"2023-08-06T08:02:43.103Z","comments":true,"path":"api/articles/2023Cyber-Apocalypse.json","keywords":null,"cover":"/img/48.jpg","content":"<p><code>前面几道题太基础，主要记录后面几道题目</code></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Orbital\"><a href=\"#Orbital\" class=\"headerlink\" title=\"Orbital\"></a>Orbital</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>In order to decipher the alien communication that held the key to their location, she needed access to a decoder with advanced capabilities - a decoder that only The Orbital firm possessed. Can you get your hands on the decoder?</p></blockquote>\n<p>这道题就是sql注入登录，然后在下方可以进行下载文件，通过拦截数据，发现是一个文件包含，点击下载后会响应包中会有文件内容，于是根据本地文件查看得到flag所在文件名，抓包修改包内文件名，对其进行跨目录文件包含，得到flag，难度简单</p>\n<hr>\n<p>主要看到一个大佬思路，我是没想到的，所以记录一下</p>\n<pre class=\"line-numbers language-py\"><code class=\"language-py\">def login(username, password):\n    # I don't think it's not possible to bypass login because I'm verifying the password later.\n    user = query(f'SELECT username, password FROM users WHERE username = \"{username}\"', one=True)\n\n    if user:\n        passwordCheck = passwordVerify(user['password'], password)\n\n        if passwordCheck:\n            token = createJWT(user['username'])\n            return token\n    else:\n        return False\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里看到<code>username</code>被直接包含到<code>sql</code>语句中去，所以这是存在<code>sql</code>注入，</p>\n<p>这段<code>sql</code>语句主要是查询数据库中用户名为输入数据的在数据表中的用户名和密码，</p>\n<p>然后返回的用户名和密码保存到<code>user</code>变量中</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> username<span class=\"token punctuation\">,</span> password <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"{username}\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当检测输入了用户名后，进行password校验</p>\n<pre class=\"line-numbers language-py\"><code class=\"language-py\"> if user:\n        passwordCheck = passwordVerify(user['password'], password) \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这里是将用户输入参数<code>password</code>，先进行md5加密，与数据库查询得到的<code>password</code>进行<code>md5</code>比较</p>\n<pre class=\"line-numbers language-py\"><code class=\"language-py\">def passwordVerify(hashPassword, password):\n\n  md5Hash = hashlib.md5(password.encode())\n\n  if md5Hash.hexdigest() == hashPassword: return True\n\n  else: return False\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其实开始我是最先想到直接插入sql语句，这道题直接注入没有回显，需要报错注入</p>\n<hr>\n<p>但是看到一个大佬的wp，我又多了一个新思路</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>既然它是将我输入的passwd与它通过存在sql注入漏洞的语句返回的查询值中的passwd进行md5</p>\n<p>比较</p>\n<p>如果，我修改后面的语句，使其返回一个admin用户名以及我伪造的md5密码，是不是就可以把admin用户密码认证伪造掉</p>\n<pre><code>&quot; union select &quot;admin&quot;,&quot;e10adc3949ba59abbe56e057f20f883e&quot;#\n</code></pre>\n<p>这句话接到后面，前面语句返回为空，接着后面返回<code>admin</code>和密码<code>123456</code>（<code>e10adc3949ba59abbe56e057f20f883e</code>）</p>\n<p>那么它就会把123456认为是admin的正确密码，然后和我们输入的密码进行对比，从而我们成功登录admin账户</p></blockquote>\n<p><img src=\"/post/2023Cyber-Apocalypse/image-20230325214900826.png\" alt=\"image-20230325214900826\"></p>\n<p>这是很好的思路，这比直接利用sql注入更加优雅，还是我对代码的敏感性不够</p>\n<p><img src=\"/post/2023Cyber-Apocalypse/image-20230325215054574.png\" alt=\"image-20230325215054574\"></p>\n<p><img src=\"/post/2023Cyber-Apocalypse/image-20230325220025877.png\" alt=\"image-20230325220025877\"></p>\n","text":"前面几道题太基础，主要记录后面几道题目 Orbital In order to decipher the alien communication that he...","permalink":"/post/2023Cyber-Apocalypse","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Orbital\"><span class=\"toc-text\">Orbital</span></a></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"nodejs(拆分攻击)","uid":"aa6892c82ad5f1c844ffcb30a272aa78","slug":"nodejs(拆分攻击)","date":"2023-04-06T14:47:24.933Z","updated":"2023-08-25T02:15:04.299Z","comments":true,"path":"api/articles/nodejs(拆分攻击).json","keywords":null,"cover":"/img/18.jpg","text":"总结学习一下，重点把拆分攻击学习记忆一下，原型链污染单独开一篇写 res.render()res.render()是 Node.js 中的一个方法，它可以渲染视...","permalink":"/post/nodejs(拆分攻击)","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"js","slug":"js","count":3,"path":"api/tags/js.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"hxp2022 wp","uid":"797ca882649370ce9de496b0772408c1","slug":"2022hxp","date":"2023-03-10T07:03:20.894Z","updated":"2023-08-06T08:01:43.403Z","comments":true,"path":"api/articles/2022hxp.json","keywords":null,"cover":"/img/38.jpg","text":"在ctftime看到的，题目有深度的 Disclaimer This challenge offers an individual instance for y...","permalink":"/post/2022hxp","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}