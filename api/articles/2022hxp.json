{"title":"hxp2022 wp","uid":"797ca882649370ce9de496b0772408c1","slug":"2022hxp","date":"2023-03-10T07:03:20.894Z","updated":"2023-08-06T08:01:43.403Z","comments":true,"path":"api/articles/2022hxp.json","keywords":null,"cover":"/img/38.jpg","content":"<p><code>在ctftime看到的，题目有深度的</code></p>\n<span id=\"more\"></span>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Disclaimer</p>\n<p>This challenge offers an individual instance for you and therefore runs behind a proxy requesting login credentials. Locally use <code>hxp:hxp</code>.</p></blockquote>\n<p>每个题的<code>docker-compose.yml</code>文件需要修改一下</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">   build:\n+    context: .\n     dockerfile: Dockerfile</code></pre>\n\n<h2 id=\"valentine\"><a href=\"#valentine\" class=\"headerlink\" title=\"valentine\"></a>valentine</h2><p>WEB</p>\n<p>Difficulty estimate: - easy</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Description:</p>\n<p>Create an awesome template for your valentine and share it with the world!</p></blockquote>\n<p>开始页面一看就知道是node.js的ssti</p>\n<p><img src=\"/post/2022hx/image-20230406222548469.png\" alt=\"image-20230406222548469\"></p>\n<p><img src=\"/post/2022hx/image-20230406222817323.png\" alt=\"image-20230406222817323\"></p>\n<p>尝试直接用payload解决</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\"><%= global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /flag.txt&#x27;) %></code></pre>\n\n<p>发现输入的数据实际上就是实现一个前端的效果，并不被模板化<img src=\"/post/2022hx/image-20230406223708029.png\" alt=\"image-20230406223708029\"></p>\n<p>看看app.js</p>\n<pre class=\" language-highlight js\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\"><code class=\"language-highlight js\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);\n<span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;body-parser&#x27;</span>)\n<span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">\"crypto\"</span>);\n<span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);\n<span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);\n\n<span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();\nviewsFolder = path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;views&#x27;</span>);\n\n<span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(viewsFolder)) &#123;\n  fs.<span class=\"title function_\">mkdirSync</span>(viewsFolder);\n&#125;\n\napp.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;views&#x27;</span>, viewsFolder);\napp.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;view engine&#x27;</span>, <span class=\"string\">&#x27;ejs&#x27;</span>);\n\napp.<span class=\"title function_\">use</span>(bodyParser.<span class=\"title function_\">urlencoded</span>(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;))\n\napp.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/template&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123;\n  <span class=\"keyword\">let</span> tmpl = req.<span class=\"property\">body</span>.<span class=\"property\">tmpl</span>;\n  <span class=\"keyword\">let</span> i = -<span class=\"number\">1</span>;\n  <span class=\"keyword\">while</span>((i = tmpl.<span class=\"title function_\">indexOf</span>(<span class=\"string\">\"<%\"</span>, i+<span class=\"number\">1</span>)) >= <span class=\"number\">0</span>) &#123;\n    <span class=\"keyword\">if</span> (tmpl.<span class=\"title function_\">substring</span>(i, i+<span class=\"number\">11</span>) !== <span class=\"string\">\"<%= name %>\"</span>) &#123;\n      res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">message</span>:<span class=\"string\">\"Only &#x27;<%= name %>&#x27; is allowed.\"</span>&#125;);\n      <span class=\"keyword\">return</span>;\n    &#125;\n  &#125;\n  <span class=\"keyword\">let</span> uuid;\n  <span class=\"keyword\">do</span> &#123;\n    uuid = crypto.<span class=\"title function_\">randomUUID</span>();\n  &#125; <span class=\"keyword\">while</span> (fs.<span class=\"title function_\">existsSync</span>(<span class=\"string\">`views/<span class=\"subst\">$&#123;uuid&#125;</span>.ejs`</span>))\n\n  <span class=\"keyword\">try</span> &#123;\n    fs.<span class=\"title function_\">writeFileSync</span>(<span class=\"string\">`views/<span class=\"subst\">$&#123;uuid&#125;</span>.ejs`</span>, tmpl);\n  &#125; <span class=\"keyword\">catch</span>(err) &#123;\n    res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">send</span>(<span class=\"string\">\"Failed to write Valentine&#x27;s card\"</span>);\n    <span class=\"keyword\">return</span>;\n  &#125;\n  <span class=\"keyword\">let</span> name = req.<span class=\"property\">body</span>.<span class=\"property\">name</span> ?? <span class=\"string\">&#x27;&#x27;</span>;\n  <span class=\"keyword\">return</span> res.<span class=\"title function_\">redirect</span>(<span class=\"string\">`/<span class=\"subst\">$&#123;uuid&#125;</span>?name=<span class=\"subst\">$&#123;name&#125;</span>`</span>);\n&#125;);\n\napp.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/:template&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123;\n  <span class=\"keyword\">let</span> query = req.<span class=\"property\">query</span>;\n  <span class=\"keyword\">let</span> template = req.<span class=\"property\">params</span>.<span class=\"property\">template</span>\n  <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^[0-9A-F]&#123;8&#125;-[0-9A-F]&#123;4&#125;-[4][0-9A-F]&#123;3&#125;-[89AB][0-9A-F]&#123;3&#125;-[0-9A-F]&#123;12&#125;$/i</span>.<span class=\"title function_\">test</span>(template)) &#123;\n    res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(<span class=\"string\">\"Not a valid card id\"</span>)\n    <span class=\"keyword\">return</span>;\n  &#125;\n  <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(<span class=\"string\">`views/<span class=\"subst\">$&#123;template&#125;</span>.ejs`</span>)) &#123;\n    res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Valentine\\&#x27;s card does not exist&#x27;</span>)\n    <span class=\"keyword\">return</span>;\n  &#125;\n  <span class=\"keyword\">if</span> (!query[<span class=\"string\">&#x27;name&#x27;</span>]) &#123;\n    query[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;&#x27;</span>\n  &#125;\n  <span class=\"keyword\">return</span> res.<span class=\"title function_\">render</span>(template, query);\n&#125;);\n\napp.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123;\n  <span class=\"keyword\">return</span> res.<span class=\"title function_\">sendFile</span>(<span class=\"string\">&#x27;./index.html&#x27;</span>, &#123;<span class=\"attr\">root</span>: __dirname&#125;);\n&#125;);\n\napp.<span class=\"title function_\">listen</span>(process.<span class=\"property\">env</span>.<span class=\"property\">PORT</span> || <span class=\"number\">3000</span>);</code></pre>\n\n<p>在这里</p>\n<pre class=\" language-highlight js\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/template&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"><code class=\"language-highlight js\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/template&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123;\n  <span class=\"keyword\">let</span> tmpl = req.<span class=\"property\">body</span>.<span class=\"property\">tmpl</span>;\n  <span class=\"keyword\">let</span> i = -<span class=\"number\">1</span>;\n  <span class=\"keyword\">while</span>((i = tmpl.<span class=\"title function_\">indexOf</span>(<span class=\"string\">\"<%\"</span>, i+<span class=\"number\">1</span>)) >= <span class=\"number\">0</span>) &#123;\n    <span class=\"keyword\">if</span> (tmpl.<span class=\"title function_\">substring</span>(i, i+<span class=\"number\">11</span>) !== <span class=\"string\">\"<%= name %>\"</span>) &#123;\n      res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">message</span>:<span class=\"string\">\"Only &#x27;<%= name %>&#x27; is allowed.\"</span>&#125;);\n      <span class=\"keyword\">return</span>;\n    &#125;\n  &#125;\n  <span class=\"keyword\">let</span> uuid;\n  <span class=\"keyword\">do</span> &#123;\n    uuid = crypto.<span class=\"title function_\">randomUUID</span>();\n  &#125; <span class=\"keyword\">while</span> (fs.<span class=\"title function_\">existsSync</span>(<span class=\"string\">`views/<span class=\"subst\">$&#123;uuid&#125;</span>.ejs`</span>))\n\n  <span class=\"keyword\">try</span> &#123;\n    fs.<span class=\"title function_\">writeFileSync</span>(<span class=\"string\">`views/<span class=\"subst\">$&#123;uuid&#125;</span>.ejs`</span>, tmpl);\n  &#125; <span class=\"keyword\">catch</span>(err) &#123;\n    res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">send</span>(<span class=\"string\">\"Failed to write Valentine&#x27;s card\"</span>);\n    <span class=\"keyword\">return</span>;\n  &#125;\n  <span class=\"keyword\">let</span> name = req.<span class=\"property\">body</span>.<span class=\"property\">name</span> ?? <span class=\"string\">&#x27;&#x27;</span>;\n  <span class=\"keyword\">return</span> res.<span class=\"title function_\">redirect</span>(<span class=\"string\">`/<span class=\"subst\">$&#123;uuid&#125;</span>?name=<span class=\"subst\">$&#123;name&#125;</span>`</span>);\n&#125;);</code></pre>\n\n<p>发现它会将输入的tmpl写入<code>views/$&#123;uuid&#125;.ejs</code>当作模板</p>\n<pre class=\" language-highlight js\"><span class=\"keyword\"><code class=\"language-highlight js\"><span class=\"keyword\">try</span> &#123;\n  fs.<span class=\"title function_\">writeFileSync</span>(<span class=\"string\">`views/<span class=\"subst\">$&#123;uuid&#125;</span>.ejs`</span>, tmpl);\n&#125; <span class=\"keyword\">catch</span>(err) &#123;\n  res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">send</span>(<span class=\"string\">\"Failed to write Valentine&#x27;s card\"</span>);\n  <span class=\"keyword\">return</span>;\n&#125;</code></pre>\n\n<p>但是存在校验</p>\n<pre class=\" language-highlight js\"><span class=\"keyword\">while</span>((i = tmpl.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;&lt;%&quot;</span>, i+<span class=\"number\">1</span>)) &gt;= <span class=\"number\"><code class=\"language-highlight js\"><span class=\"keyword\">while</span>((i = tmpl.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;&lt;%&quot;</span>, i+<span class=\"number\">1</span>)) &gt;= <span class=\"number\">0</span>) &#123;\n  <span class=\"keyword\">if</span> (tmpl.<span class=\"title function_\">substring</span>(i, i+<span class=\"number\">11</span>) !== <span class=\"string\">\"<%= name %>\"</span>) &#123;\n    res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">message</span>:<span class=\"string\">\"Only &#x27;<%= name %>&#x27; is allowed.\"</span>&#125;);\n    <span class=\"keyword\">return</span>;\n  &#125;\n&#125;</code></pre>\n\n<p>这段语句限制了如果输入的字段开头为<code>&lt;%</code>，那么从<code>&lt;%</code>开头后的字段必须是<code>&lt;%= name %&gt;</code></p>\n<p>开始尝试各种方法绕过，但确实不行，因为仅能是<code>&lt;%= name %&gt;</code>,里面也不能加东西</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>后面只有看wp才有思路，既然是从&lt;%进行匹配限制，如果可以修改模板语句让其不是&lt;%的开头，</p>\n<p>所以绕过的思路就是能用其他的标签进行绕过</p></blockquote>\n<p>但是在文档中查看时会发现，所有都是以<code>&lt;%</code>开头的标签</p>\n<p><img src=\"/post/2022hx/image-20230411181542931.png\" alt=\"image-20230411181542931\"></p>\n<h3 id=\"delimiter\"><a href=\"#delimiter\" class=\"headerlink\" title=\"delimiter\"></a>delimiter</h3><p><a href=\"https://github.com/mde/ejs#custom-delimiters\">mde&#x2F;ejs: Embedded JavaScript templates delimiter</a></p>\n<p>可以看到标签几乎都是以<code>&lt;%</code>开头和结尾的，</p>\n<p>后面看官方wp时</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>In his analysis, Eslam even scratches the possibility to overwrite options which are passed with data. He specifically mentions the delimiter in the context of abusing it for catastrophic regex.</p>\n<p><strong>In what scenario does anybody even want to pass options with untrusted user data?</strong></p>\n<p>Especially: Options which greatly affect the parsing of the template like ?<code>delimiter</code></p>\n<p>And: Could this “feature” maybe be abused in any way?</p>\n<p>Thus, the idea for this challenge was born.</p></blockquote>\n<p>大致意思就是因为大都ssti过滤就只是对分隔符进行正则匹配过滤，但是如果有选项比如<code>delimiter</code>，可以利用其以不受信任的用户身份发生数据或者以其他形式滥用</p>\n<p><code>delimiter</code>就是对标签的分隔符定义的选项，这样我们就可以通过其修改覆盖标签，从<code>&lt;%=</code>变成<code>&lt;?=</code>或者<code>&lt;==</code>等等</p>\n<p><img src=\"/post/2022hx/image-20230411185506095.png\" alt=\"image-20230411185506095\"></p>\n<p>但是如何传参使得标签覆盖并且同时传入我们的<code>payload</code>？</p>\n<pre class=\" language-highlight js\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/:template&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"><code class=\"language-highlight js\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/:template&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123;\n  <span class=\"keyword\">let</span> query = req.<span class=\"property\">query</span>;\n  <span class=\"keyword\">let</span> template = req.<span class=\"property\">params</span>.<span class=\"property\">template</span>\n  <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^[0-9A-F]&#123;8&#125;-[0-9A-F]&#123;4&#125;-[4][0-9A-F]&#123;3&#125;-[89AB][0-9A-F]&#123;3&#125;-[0-9A-F]&#123;12&#125;$/i</span>.<span class=\"title function_\">test</span>(template)) &#123;\n    res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(<span class=\"string\">\"Not a valid card id\"</span>)\n    <span class=\"keyword\">return</span>;\n  &#125;\n  <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(<span class=\"string\">`views/<span class=\"subst\">$&#123;template&#125;</span>.ejs`</span>)) &#123;\n    res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Valentine\\&#x27;s card does not exist&#x27;</span>)\n    <span class=\"keyword\">return</span>;\n  &#125;\n  <span class=\"keyword\">if</span> (!query[<span class=\"string\">&#x27;name&#x27;</span>]) &#123;\n    query[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;&#x27;</span>\n  &#125;\n  <span class=\"keyword\">return</span> res.<span class=\"title function_\">render</span>(template, query);\n&#125;);</code></pre>\n\n<p>其中看到关键代码</p>\n<pre class=\" language-highlight js\"><span class=\"keyword\">return</span> res.<span class=\"title function_\"><code class=\"language-highlight js\"><span class=\"keyword\">return</span> res.<span class=\"title function_\">render</span>(template, query);</code></pre>\n\n<p>这里会将template和query内容渲染，将query中的值把模板中变量的值替换，从而可以通过在query中重新定义<code>delimiter</code>参数，然后实现渲染覆盖原有的<code>?</code>分割符，将其替换成其他可以绕过的分隔符</p>\n<p>但是这里还有过滤，对<code>template</code>进行的过滤，而<code>template</code>取自<code>:template</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>:template</code> 是一个动态路由参数，它可以匹配 URL 中的任何值。例如，如果请求的 URL 是 <code>http://example.com/about</code>，那么 <code>:template</code> 就会被设置为 <code>about</code></p></blockquote>\n<p>而template的正则匹配内容</p>\n<pre class=\" language-highlight js\">!/^[<span class=\"number\">0</span>-9A-F]&#123;<span class=\"number\">8</span>&#125;-[<span class=\"number\">0</span>-9A-F]&#123;<span class=\"number\">4</span>&#125;-[<span class=\"number\">4</span>][<span class=\"number\">0</span>-9A-F]&#123;<span class=\"number\">3</span>&#125;-[89AB][<span class=\"number\">0</span>-9A-F]&#123;<span class=\"number\">3</span>&#125;-[<span class=\"number\">0</span>-9A-F]&#123;<span class=\"number\"><code class=\"language-highlight js\">!/^[<span class=\"number\">0</span>-9A-F]&#123;<span class=\"number\">8</span>&#125;-[<span class=\"number\">0</span>-9A-F]&#123;<span class=\"number\">4</span>&#125;-[<span class=\"number\">4</span>][<span class=\"number\">0</span>-9A-F]&#123;<span class=\"number\">3</span>&#125;-[89AB][<span class=\"number\">0</span>-9A-F]&#123;<span class=\"number\">3</span>&#125;-[<span class=\"number\">0</span>-9A-F]&#123;<span class=\"number\">12</span>&#125;</code></pre>\n\n<p>搜索发现是 <code>UUID version 4</code> 的格式，而<code>uuid</code>在上面代码出现</p>\n<pre class=\" language-highlight js\"><span class=\"keyword\">return</span> res.<span class=\"title function_\">redirect</span>(<span class=\"string\">`/<span class=\"subst\">$&#123;uuid&#125;</span>?name=<span class=\"subst\"><code class=\"language-highlight js\"><span class=\"keyword\">return</span> res.<span class=\"title function_\">redirect</span>(<span class=\"string\">`/<span class=\"subst\">$&#123;uuid&#125;</span>?name=<span class=\"subst\">$&#123;name&#125;</span>`</span>);</code></pre>\n\n<p>这是重定向时生成的uuid，代表当我们被重定向后，</p>\n<p><code>app</code>会自动渲染下面内容</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">http://x.x.x.x:9086/365c9839-b1a3-4df9-8c1a-142378b79cd5?name=1</code></pre>\n\n<p>所以可以先抓包，得到重定向的uuid，</p>\n<p>然后在后面添加<code>delimiter</code>参数，重新发包，从而实现利用渲染覆盖原有分隔符的目的，然后在按上面的代码<code>POST</code>发送<code>tmpl</code>参数【包含的是修改了分隔符的<code>payload</code>】</p>\n<hr>\n<h3 id=\"解题流程\"><a href=\"#解题流程\" class=\"headerlink\" title=\"解题流程\"></a>解题流程</h3><p>先打算将覆盖<code>%</code>换成<code>?</code>，先发送到<code>/template</code>，这里因为没有黑名单限制字符，于是我们的内容成功写入<code>views/$&#123;uuid&#125;.ejs</code>文件中，而<code>uuid</code>就是响应包中的</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>77354ee1-466d-402f-a829-ec5e859c223e</p></blockquote>\n<p><img src=\"/post/2022hx/image-20230411215254139.png\" alt=\"image-20230411215254139\"></p>\n<p>但是在<code>views/$&#123;uuid&#125;.ejs</code>文件中是以%为分隔符，于是需要修改分隔符为<code>payload</code>的<code>?</code></p>\n<p><img src=\"/post/2022hx/image-20230411220246020.png\" alt=\"image-20230411220246020\"></p>\n<p>得到flag</p>\n<hr>\n<p>进<code>docker</code>看看</p>\n<p><img src=\"/post/2022hx/image-20230411220931414.png\" alt=\"image-20230411220931414\"></p>\n<hr>\n","text":"在ctftime看到的，题目有深度的 Disclaimer This challenge offers an individual instance for y...","permalink":"/post/2022hxp","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#valentine\"><span class=\"toc-text\">valentine</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#delimiter\"><span class=\"toc-text\">delimiter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">解题流程</span></a></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Cyber Apocalypse 2023 wp","uid":"c877094afea6970d987e778fa3ed5361","slug":"2023Cyber-Apocalypse","date":"2023-03-25T06:57:02.412Z","updated":"2023-08-06T08:02:43.103Z","comments":true,"path":"api/articles/2023Cyber-Apocalypse.json","keywords":null,"cover":"/img/48.jpg","text":"前面几道题太基础，主要记录后面几道题目 Orbital In order to decipher the alien communication that he...","permalink":"/post/2023Cyber-Apocalypse","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"笔记","uid":"cfe293c9110123a937624906f872053b","slug":"Notes","date":"2023-02-15T09:34:06.818Z","updated":"2023-10-09T07:57:00.626Z","comments":true,"path":"api/articles/Notes.json","keywords":null,"cover":"/img/21.jpg","text":"关键笔记，主要总结比赛中遇到的 pearcmd.php的巧妙利用 来自P神博客 https://www.leavesongs.com/PENETRATION/d...","permalink":"/post/Notes","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"19 mins."},"categories":[{"name":"web","slug":"web","count":2,"path":"api/categories/web.json"}],"tags":[{"name":"daily","slug":"daily","count":2,"path":"api/tags/daily.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}